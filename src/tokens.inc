// C tokens -- generated by gen.py
enum Token: uint16_t {
  TNul,
  TNewLine,
  TSpace,
  TNot,
  TDoubleQ,
  TBash,
  TDolor,
  TPercent,
  TBitAnd,
  TSignleQ,
  TLbracket,
  TRbracket,
  TMul,
  TAdd,
  TComma,
  TDash,
  TDot,
  TSlash,
  TColon,
  TSemicolon,
  TLt,
  TAssign,
  TGt,
  TQuestionMark,
  TMouse,
  TLSquareBrackets,
  TBackslash,
  TRSquareBrackets,
  TXor,
  TUnderscore,
  TGraveAccent,
  TLcurlyBracket,
  TBitOr,
  TRcurlyBracket,
  TBitNot,
  TAddAdd,
  TSubSub,
  TArrow,
  Tshl,
  Tshr,
  TGe,
  TLe,
  TNe,
  TEq,
  TLogicalOr,
  TLogicalAnd,
  TAsignAdd,
  TAsignSub,
  TAsignMul,
  TAsignDiv,
  TAsignRem,
  TAsignShl,
  TAsignShr,
  TAsignBitAnd,
  TAsignBitOr,
  TAsignBitXor,
  TEllipsis2,
  TEllipsis,
  TCharLit,
  TStringLit,
  PPlaceholder,
  PPSharp,
  PPNumber,
  PPSharpSharp,
  PPMacroPop,
  PPMacroTraceLoc,
  TEOF,
  Kextern,
  Kshort,
  Kregister,
  K_Thread_local,
  Kstatic,
  Kauto,
  Kconstexpr,
  Kinline,
  Ktypedef,
  K_Noreturn,
  K_Decimal32,
  K_Decimal128,
  K_Decimal64,
  K__int128,
  K_Float16,
  K_Accum,
  K_Fract,
  K_Sat,
  K__float128,
  K__float80,
  K__bf16,
  Khalf,
  K__ibm128,
  K__thread,
  K__auto_type,
  K_Imaginary,
  K_Complex,
  K_Atomic,
  K_Bool,
  Kunion,
  Kstruct,
  Kenum,
  Kunsigned,
  Ksigned,
  Kvoid,
  Kint,
  Kchar,
  Klong,
  Kfloat,
  Kdouble,
  Ktypeof_unqual,
  Ktypeof,
  K_BitInt,
  K_Alignas,
  Kconst,
  Krestrict,
  Kvolatile,
  K__func__,
  K__declspec,
  K__attribute,
  K__builtin_choose_expr,
  K__builtin_offsetof,
  K__builtin_FILE,
  K__builtin_FUNCTION,
  K__builtin_LINE,
  K__builtin_COLUMN,
  K__builtin_types_compatible_p,
  K__builtin_va_arg,
  K__builtin_bit_cast,
  K__builtin_available,
  K__cdecl,
  K__stdcall,
  K__fastcall,
  K__thiscall,
  K__regcall,
  K__vectorcall,
  K__pascal,
  K__PRETTY_FUNCTION__,
  K__extension__,
  K__real,
  K__imag,
  K__label__,
  Kasm,
  Knullptr,
  Ktrue,
  Kfalse,
  K__objc_yes,
  K__objc_no,
  Kreturn,
  Kfor,
  Kcase,
  Kswitch,
  Kgoto,
  Kdefault,
  Kif,
  Kelse,
  Kdo,
  Ksizeof,
  Kcontinue,
  Kbreak,
  Kwhile,
  K_Alignof,
  K_Static_assert,
  K_Generic,
  TIdentifier,
  PPIdent,
  PP_main,
  PP__VA_ARGS__,
  PP__LINE__,
  PP__FILE__,
  PP__DATE__,
  PP__TIME__,
  PP__COUNTER__,
  PP_defined,
  PP_Pragma,
  PPifdef,
  PPifndef,
  PPelif,
  PPendif,
  PPdefine,
  PPundef,
  PPline,
  PPinclude,
  PPwarning,
  PPerror,
  PPpragma,
BIprintf,
  BIfprintf,
  BIsnprintf,
  BIsprintf,
  BIvprintf,
  BIvfprintf,
  BIvsnprintf,
  BIvsprintf,
  BIscanf,
  BIfscanf,
  BIsscanf,
  BIvscanf,
  BIvfscanf,
  BIvsscanf,
  BIfopen,
  BIfread,
  BIfwrite,
  BIwcschr,
  BIwcscmp,
  BIwcslen,
  BIwcsncmp,
  BIwmemchr,
  BIwmemcmp,
  BIwmemcpy,
  BIwmemmove,
  BIisalnum,
  BIisalpha,
  BIisblank,
  BIiscntrl,
  BIisdigit,
  BIisgraph,
  BIislower,
  BIisprint,
  BIispunct,
  BIisspace,
  BIisupper,
  BIisxdigit,
  BItolower,
  BItoupper,
  BIabort,
  BIcalloc,
  BIexit,
  BI_Exit,
  BImalloc,
  BIrealloc,
  BIfree,
  BIstrtod,
  BIstrtof,
  BIstrtold,
  BIstrtol,
  BIstrtoll,
  BIstrtoul,
  BIstrtoull,
  BIaligned_alloc,
  BIalloca,
  BIabs,
  BIlabs,
  BIllabs,
  BIindex,
  BIrindex,
  BIbzero,
  BIbcmp,
  BIstrcasecmp,
  BIstrncasecmp,
  BImemcpy,
  BImemcmp,
  BImemmove,
  BIstrcpy,
  BIstrncpy,
  BIstrcmp,
  BIstrncmp,
  BIstrcat,
  BIstrncat,
  BIstrxfrm,
  BImemchr,
  BIstrchr,
  BIstrcspn,
  BIstrpbrk,
  BIstrrchr,
  BIstrspn,
  BIstrstr,
  BIstrtok,
  BImemset,
  BIstrerror,
  BIstrlen,
  BImemccpy,
  BImempcpy,
  BIstpcpy,
  BIstpncpy,
  BIstrdup,
  BIstrndup,
  BIstrlcpy,
  BIstrlcat,
  BImemalign,
  BIsetjmp,
  BIlongjmp,
  BI_setjmp,
  BI__sigsetjmp,
  BIsigsetjmp,
  BIsavectx,
  BIgetcontext,
  BI_longjmp,
  BIsiglongjmp,
  BIatan2,
  BIatan2f,
  BIatan2l,
  BIcopysign,
  BIcopysignf,
  BIcopysignl,
  BIfabs,
  BIfabsf,
  BIfabsl,
  BIfinite,
  BIfinitef,
  BIfinitel,
  BI__finite,
  BI__finitef,
  BI__finitel,
  BIfmod,
  BIfmodf,
  BIfmodl,
  BIfrexp,
  BIfrexpf,
  BIfrexpl,
  BIldexp,
  BIldexpf,
  BIldexpl,
  BImodf,
  BImodff,
  BImodfl,
  BInan,
  BInanf,
  BInanl,
  BIpow,
  BIpowf,
  BIpowl,
  BIacos,
  BIacosf,
  BIacosl,
  BIacosh,
  BIacoshf,
  BIacoshl,
  BIasin,
  BIasinf,
  BIasinl,
  BIasinh,
  BIasinhf,
  BIasinhl,
  BIatan,
  BIatanf,
  BIatanl,
  BIatanh,
  BIatanhf,
  BIatanhl,
  BIcbrt,
  BIcbrtf,
  BIcbrtl,
  BIceil,
  BIceilf,
  BIceill,
  BIcos,
  BIcosf,
  BIcosl,
  BIcosh,
  BIcoshf,
  BIcoshl,
  BIerf,
  BIerff,
  BIerfl,
  BIerfc,
  BIerfcf,
  BIerfcl,
  BIexp,
  BIexpf,
  BIexpl,
  BIexp2,
  BIexp2f,
  BIexp2l,
  BIexpm1,
  BIexpm1f,
  BIexpm1l,
  BIfdim,
  BIfdimf,
  BIfdiml,
  BIfloor,
  BIfloorf,
  BIfloorl,
  BIfma,
  BIfmaf,
  BIfmal,
  BIfmax,
  BIfmaxf,
  BIfmaxl,
  BIfmin,
  BIfminf,
  BIfminl,
  BIhypot,
  BIhypotf,
  BIhypotl,
  BIilogb,
  BIilogbf,
  BIilogbl,
  BIlgamma,
  BIlgammaf,
  BIlgammal,
  BIllrint,
  BIllrintf,
  BIllrintl,
  BIllround,
  BIllroundf,
  BIllroundl,
  BIlog,
  BIlogf,
  BIlogl,
  BIlog10,
  BIlog10f,
  BIlog10l,
  BIlog1p,
  BIlog1pf,
  BIlog1pl,
  BIlog2,
  BIlog2f,
  BIlog2l,
  BIlogb,
  BIlogbf,
  BIlogbl,
  BIlrint,
  BIlrintf,
  BIlrintl,
  BIlround,
  BIlroundf,
  BIlroundl,
  BInearbyint,
  BInearbyintf,
  BInearbyintl,
  BInextafter,
  BInextafterf,
  BInextafterl,
  BInexttoward,
  BInexttowardf,
  BInexttowardl,
  BIremainder,
  BIremainderf,
  BIremainderl,
  BIremquo,
  BIremquof,
  BIremquol,
  BIrint,
  BIrintf,
  BIrintl,
  BIround,
  BIroundf,
  BIroundl,
  BIscalbln,
  BIscalblnf,
  BIscalblnl,
  BIscalbn,
  BIscalbnf,
  BIscalbnl,
  BIsin,
  BIsinf,
  BI__sinpi,
  BI__sinpif,
  BI__cospi,
  BI__cospif,
  BI__tanpi,
  BI__tanpif,
  BI__exp10,
  BI__exp10f,
  BIsinl,
  BIsinh,
  BIsinhf,
  BIsinhl,
  BIsqrt,
  BIsqrtf,
  BIsqrtl,
  BItan,
  BItanf,
  BItanl,
  BItanh,
  BItanhf,
  BItanhl,
  BItgamma,
  BItgammaf,
  BItgammal,
  BItrunc,
  BItruncf,
  BItruncl,
  BIva_start,
  BIva_end,
  BIva_copy,
  BI_exit,
  BIvfork,
  BIcabs,
  BIcabsf,
  BIcabsl,
  BIcacos,
  BIcacosf,
  BIcacosl,
  BIcacosh,
  BIcacoshf,
  BIcacoshl,
  BIcarg,
  BIcargf,
  BIcargl,
  BIcasin,
  BIcasinf,
  BIcasinl,
  BIcasinh,
  BIcasinhf,
  BIcasinhl,
  BIcatan,
  BIcatanf,
  BIcatanl,
  BIcatanh,
  BIcatanhf,
  BIcatanhl,
  BIccos,
  BIccosf,
  BIccosl,
  BIccosh,
  BIccoshf,
  BIccoshl,
  BIcexp,
  BIcexpf,
  BIcexpl,
  BIcimag,
  BIcimagf,
  BIcimagl,
  BIconj,
  BIconjf,
  BIconjl,
  BIclog,
  BIclogf,
  BIclogl,
  BIcproj,
  BIcprojf,
  BIcprojl,
  BIcpow,
  BIcpowf,
  BIcpowl,
  BIcreal,
  BIcrealf,
  BIcreall,
  BIcsin,
  BIcsinf,
  BIcsinl,
  BIcsinh,
  BIcsinhf,
  BIcsinhl,
  BIcsqrt,
  BIcsqrtf,
  BIcsqrtl,
  BIctan,
  BIctanf,
  BIctanl,
  BIctanh,
  BIctanhf,
  BIctanhl,
  BI_Block_object_assign,
  BI_Block_object_dispose,
  BI__builtin_atan2,
  BI__builtin_atan2f,
  BI__builtin_atan2l,
  BI__builtin_atan2f128,
  BI__builtin_abs,
  BI__builtin_copysign,
  BI__builtin_copysignf,
  BI__builtin_copysignf16,
  BI__builtin_copysignl,
  BI__builtin_copysignf128,
  BI__builtin_fabs,
  BI__builtin_fabsf,
  BI__builtin_fabsl,
  BI__builtin_fabsf16,
  BI__builtin_fabsf128,
  BI__builtin_fmod,
  BI__builtin_fmodf,
  BI__builtin_fmodf16,
  BI__builtin_fmodl,
  BI__builtin_fmodf128,
  BI__builtin_frexp,
  BI__builtin_frexpf,
  BI__builtin_frexpl,
  BI__builtin_frexpf128,
  BI__builtin_huge_val,
  BI__builtin_huge_valf,
  BI__builtin_huge_vall,
  BI__builtin_huge_valf128,
  BI__builtin_inf,
  BI__builtin_inff,
  BI__builtin_infl,
  BI__builtin_inff128,
  BI__builtin_labs,
  BI__builtin_llabs,
  BI__builtin_ldexp,
  BI__builtin_ldexpf,
  BI__builtin_ldexpl,
  BI__builtin_ldexpf128,
  BI__builtin_modf,
  BI__builtin_modff,
  BI__builtin_modfl,
  BI__builtin_modff128,
  BI__builtin_nan,
  BI__builtin_nanf,
  BI__builtin_nanl,
  BI__builtin_nanf128,
  BI__builtin_nans,
  BI__builtin_nansf,
  BI__builtin_nansl,
  BI__builtin_nansf128,
  BI__builtin_powi,
  BI__builtin_powif,
  BI__builtin_powil,
  BI__builtin_pow,
  BI__builtin_powf,
  BI__builtin_powf16,
  BI__builtin_powl,
  BI__builtin_powf128,
  BI__builtin_acos,
  BI__builtin_acosf,
  BI__builtin_acosl,
  BI__builtin_acosf128,
  BI__builtin_acosh,
  BI__builtin_acoshf,
  BI__builtin_acoshl,
  BI__builtin_acoshf128,
  BI__builtin_asin,
  BI__builtin_asinf,
  BI__builtin_asinl,
  BI__builtin_asinf128,
  BI__builtin_asinh,
  BI__builtin_asinhf,
  BI__builtin_asinhl,
  BI__builtin_asinhf128,
  BI__builtin_atan,
  BI__builtin_atanf,
  BI__builtin_atanl,
  BI__builtin_atanf128,
  BI__builtin_atanh,
  BI__builtin_atanhf,
  BI__builtin_atanhl,
  BI__builtin_atanhf128,
  BI__builtin_cbrt,
  BI__builtin_cbrtf,
  BI__builtin_cbrtl,
  BI__builtin_cbrtf128,
  BI__builtin_ceil,
  BI__builtin_ceilf,
  BI__builtin_ceilf16,
  BI__builtin_ceill,
  BI__builtin_ceilf128,
  BI__builtin_cos,
  BI__builtin_cosf,
  BI__builtin_cosf16,
  BI__builtin_cosh,
  BI__builtin_coshf,
  BI__builtin_coshl,
  BI__builtin_coshf128,
  BI__builtin_cosl,
  BI__builtin_cosf128,
  BI__builtin_erf,
  BI__builtin_erff,
  BI__builtin_erfl,
  BI__builtin_erff128,
  BI__builtin_erfc,
  BI__builtin_erfcf,
  BI__builtin_erfcl,
  BI__builtin_erfcf128,
  BI__builtin_exp,
  BI__builtin_expf,
  BI__builtin_expf16,
  BI__builtin_expl,
  BI__builtin_expf128,
  BI__builtin_exp2,
  BI__builtin_exp2f,
  BI__builtin_exp2f16,
  BI__builtin_exp2l,
  BI__builtin_exp2f128,
  BI__builtin_expm1,
  BI__builtin_expm1f,
  BI__builtin_expm1l,
  BI__builtin_expm1f128,
  BI__builtin_fdim,
  BI__builtin_fdimf,
  BI__builtin_fdiml,
  BI__builtin_fdimf128,
  BI__builtin_floor,
  BI__builtin_floorf,
  BI__builtin_floorf16,
  BI__builtin_floorl,
  BI__builtin_floorf128,
  BI__builtin_fma,
  BI__builtin_fmaf,
  BI__builtin_fmaf16,
  BI__builtin_fmal,
  BI__builtin_fmaf128,
  BI__builtin_fmax,
  BI__builtin_fmaxf,
  BI__builtin_fmaxf16,
  BI__builtin_fmaxl,
  BI__builtin_fmaxf128,
  BI__builtin_fmin,
  BI__builtin_fminf,
  BI__builtin_fminf16,
  BI__builtin_fminl,
  BI__builtin_fminf128,
  BI__builtin_hypot,
  BI__builtin_hypotf,
  BI__builtin_hypotl,
  BI__builtin_hypotf128,
  BI__builtin_ilogb,
  BI__builtin_ilogbf,
  BI__builtin_ilogbl,
  BI__builtin_ilogbf128,
  BI__builtin_lgamma,
  BI__builtin_lgammaf,
  BI__builtin_lgammal,
  BI__builtin_lgammaf128,
  BI__builtin_llrint,
  BI__builtin_llrintf,
  BI__builtin_llrintl,
  BI__builtin_llrintf128,
  BI__builtin_llround,
  BI__builtin_llroundf,
  BI__builtin_llroundl,
  BI__builtin_llroundf128,
  BI__builtin_log,
  BI__builtin_log10,
  BI__builtin_log10f,
  BI__builtin_log10f16,
  BI__builtin_log10l,
  BI__builtin_log10f128,
  BI__builtin_log1p,
  BI__builtin_log1pf,
  BI__builtin_log1pl,
  BI__builtin_log1pf128,
  BI__builtin_log2,
  BI__builtin_log2f,
  BI__builtin_log2f16,
  BI__builtin_log2l,
  BI__builtin_log2f128,
  BI__builtin_logb,
  BI__builtin_logbf,
  BI__builtin_logbl,
  BI__builtin_logbf128,
  BI__builtin_logf,
  BI__builtin_logf16,
  BI__builtin_logl,
  BI__builtin_logf128,
  BI__builtin_lrint,
  BI__builtin_lrintf,
  BI__builtin_lrintl,
  BI__builtin_lrintf128,
  BI__builtin_lround,
  BI__builtin_lroundf,
  BI__builtin_lroundl,
  BI__builtin_lroundf128,
  BI__builtin_nearbyint,
  BI__builtin_nearbyintf,
  BI__builtin_nearbyintl,
  BI__builtin_nearbyintf128,
  BI__builtin_nextafter,
  BI__builtin_nextafterf,
  BI__builtin_nextafterl,
  BI__builtin_nextafterf128,
  BI__builtin_nexttoward,
  BI__builtin_nexttowardf,
  BI__builtin_nexttowardl,
  BI__builtin_nexttowardf128,
  BI__builtin_remainder,
  BI__builtin_remainderf,
  BI__builtin_remainderl,
  BI__builtin_remainderf128,
  BI__builtin_remquo,
  BI__builtin_remquof,
  BI__builtin_remquol,
  BI__builtin_remquof128,
  BI__builtin_rint,
  BI__builtin_rintf,
  BI__builtin_rintf16,
  BI__builtin_rintl,
  BI__builtin_rintf128,
  BI__builtin_round,
  BI__builtin_roundf,
  BI__builtin_roundf16,
  BI__builtin_roundl,
  BI__builtin_roundf128,
  BI__builtin_scalbln,
  BI__builtin_scalblnf,
  BI__builtin_scalblnl,
  BI__builtin_scalblnf128,
  BI__builtin_scalbn,
  BI__builtin_scalbnf,
  BI__builtin_scalbnl,
  BI__builtin_scalbnf128,
  BI__builtin_sin,
  BI__builtin_sinf,
  BI__builtin_sinf16,
  BI__builtin_sinh,
  BI__builtin_sinhf,
  BI__builtin_sinhl,
  BI__builtin_sinhf128,
  BI__builtin_sinl,
  BI__builtin_sinf128,
  BI__builtin_sqrt,
  BI__builtin_sqrtf,
  BI__builtin_sqrtf16,
  BI__builtin_sqrtl,
  BI__builtin_sqrtf128,
  BI__builtin_tan,
  BI__builtin_tanf,
  BI__builtin_tanh,
  BI__builtin_tanhf,
  BI__builtin_tanhl,
  BI__builtin_tanhf128,
  BI__builtin_tanl,
  BI__builtin_tanf128,
  BI__builtin_tgamma,
  BI__builtin_tgammaf,
  BI__builtin_tgammal,
  BI__builtin_tgammaf128,
  BI__builtin_trunc,
  BI__builtin_truncf,
  BI__builtin_truncl,
  BI__builtin_truncf128,
  BI__builtin_truncf16,
  BI__builtin_flt_rounds,
  BI__builtin_cabs,
  BI__builtin_cabsf,
  BI__builtin_cabsl,
  BI__builtin_cacos,
  BI__builtin_cacosf,
  BI__builtin_cacosh,
  BI__builtin_cacoshf,
  BI__builtin_cacoshl,
  BI__builtin_cacosl,
  BI__builtin_carg,
  BI__builtin_cargf,
  BI__builtin_cargl,
  BI__builtin_casin,
  BI__builtin_casinf,
  BI__builtin_casinh,
  BI__builtin_casinhf,
  BI__builtin_casinhl,
  BI__builtin_casinl,
  BI__builtin_catan,
  BI__builtin_catanf,
  BI__builtin_catanh,
  BI__builtin_catanhf,
  BI__builtin_catanhl,
  BI__builtin_catanl,
  BI__builtin_ccos,
  BI__builtin_ccosf,
  BI__builtin_ccosl,
  BI__builtin_ccosh,
  BI__builtin_ccoshf,
  BI__builtin_ccoshl,
  BI__builtin_cexp,
  BI__builtin_cexpf,
  BI__builtin_cexpl,
  BI__builtin_cimag,
  BI__builtin_cimagf,
  BI__builtin_cimagl,
  BI__builtin_conj,
  BI__builtin_conjf,
  BI__builtin_conjl,
  BI__builtin_clog,
  BI__builtin_clogf,
  BI__builtin_clogl,
  BI__builtin_cproj,
  BI__builtin_cprojf,
  BI__builtin_cprojl,
  BI__builtin_cpow,
  BI__builtin_cpowf,
  BI__builtin_cpowl,
  BI__builtin_creal,
  BI__builtin_crealf,
  BI__builtin_creall,
  BI__builtin_csin,
  BI__builtin_csinf,
  BI__builtin_csinl,
  BI__builtin_csinh,
  BI__builtin_csinhf,
  BI__builtin_csinhl,
  BI__builtin_csqrt,
  BI__builtin_csqrtf,
  BI__builtin_csqrtl,
  BI__builtin_ctan,
  BI__builtin_ctanf,
  BI__builtin_ctanl,
  BI__builtin_ctanh,
  BI__builtin_ctanhf,
  BI__builtin_ctanhl,
  BI__builtin_isgreater,
  BI__builtin_isgreaterequal,
  BI__builtin_isless,
  BI__builtin_islessequal,
  BI__builtin_islessgreater,
  BI__builtin_isunordered,
  BI__builtin_fpclassify,
  BI__builtin_isfinite,
  BI__builtin_isinf,
  BI__builtin_isinf_sign,
  BI__builtin_isnan,
  BI__builtin_isnormal,
  BI__builtin_signbit,
  BI__builtin_signbitf,
  BI__builtin_signbitl,
  BI__builtin_canonicalize,
  BI__builtin_canonicalizef,
  BI__builtin_canonicalizef16,
  BI__builtin_canonicalizel,
  BI__builtin_clzs,
  BI__builtin_clz,
  BI__builtin_clzl,
  BI__builtin_clzll,
  BI__builtin_ctzs,
  BI__builtin_ctz,
  BI__builtin_ctzl,
  BI__builtin_ctzll,
  BI__builtin_ffs,
  BI__builtin_ffsl,
  BI__builtin_ffsll,
  BI__builtin_parity,
  BI__builtin_parityl,
  BI__builtin_parityll,
  BI__builtin_popcount,
  BI__builtin_popcountl,
  BI__builtin_popcountll,
  BI__builtin_clrsb,
  BI__builtin_clrsbl,
  BI__builtin_clrsbll,
  BI__builtin_bswap16,
  BI__builtin_bswap32,
  BI__builtin_bswap64,
  BI__builtin_bitreverse8,
  BI__builtin_bitreverse16,
  BI__builtin_bitreverse32,
  BI__builtin_bitreverse64,
  BI__builtin_rotateleft8,
  BI__builtin_rotateleft16,
  BI__builtin_rotateleft32,
  BI__builtin_rotateleft64,
  BI__builtin_rotateright8,
  BI__builtin_rotateright16,
  BI__builtin_rotateright32,
  BI__builtin_rotateright64,
  BI__builtin_calloc,
  BI__builtin_constant_p,
  BI__builtin_classify_type,
  BI__builtin___CFStringMakeConstantString,
  BI__builtin___NSStringMakeConstantString,
  BI__builtin_va_start,
  BI__builtin_va_end,
  BI__builtin_va_copy,
  BI__builtin_stdarg_start,
  BI__builtin_assume_aligned,
  BI__builtin_bcmp,
  BI__builtin_bcopy,
  BI__builtin_bzero,
  BI__builtin_fprintf,
  BI__builtin_free,
  BI__builtin_malloc,
  BI__builtin_memchr,
  BI__builtin_memcmp,
  BI__builtin_memcpy,
  BI__builtin_memcpy_inline,
  BI__builtin_memmove,
  BI__builtin_mempcpy,
  BI__builtin_memset,
  BI__builtin_printf,
  BI__builtin_stpcpy,
  BI__builtin_stpncpy,
  BI__builtin_strcasecmp,
  BI__builtin_strcat,
  BI__builtin_strchr,
  BI__builtin_strcmp,
  BI__builtin_strcpy,
  BI__builtin_strcspn,
  BI__builtin_strdup,
  BI__builtin_strlen,
  BI__builtin_strncasecmp,
  BI__builtin_strncat,
  BI__builtin_strncmp,
  BI__builtin_strncpy,
  BI__builtin_strndup,
  BI__builtin_strpbrk,
  BI__builtin_strrchr,
  BI__builtin_strspn,
  BI__builtin_strstr,
  BI__builtin_wcschr,
  BI__builtin_wcscmp,
  BI__builtin_wcslen,
  BI__builtin_wcsncmp,
  BI__builtin_wmemchr,
  BI__builtin_wmemcmp,
  BI__builtin_wmemcpy,
  BI__builtin_wmemmove,
  BI__builtin_realloc,
  BI__builtin_return_address,
  BI__builtin_extract_return_addr,
  BI__builtin_frame_address,
  BI__builtin___clear_cache,
  BI__builtin_setjmp,
  BI__builtin_longjmp,
  BI__builtin_unwind_init,
  BI__builtin_eh_return_data_regno,
  BI__builtin_snprintf,
  BI__builtin_sprintf,
  BI__builtin_vsnprintf,
  BI__builtin_vsprintf,
  BI__builtin_thread_pointer,
  BI__builtin_launder,
  BI__builtin_eh_return,
  BI__builtin_frob_return_addr,
  BI__builtin_dwarf_cfa,
  BI__builtin_init_dwarf_reg_size_table,
  BI__builtin_dwarf_sp_column,
  BI__builtin_extend_pointer,
  BI__builtin_object_size,
  BI__builtin_dynamic_object_size,
  BI__builtin___memcpy_chk,
  BI__builtin___memccpy_chk,
  BI__builtin___memmove_chk,
  BI__builtin___mempcpy_chk,
  BI__builtin___memset_chk,
  BI__builtin___stpcpy_chk,
  BI__builtin___strcat_chk,
  BI__builtin___strcpy_chk,
  BI__builtin___strlcat_chk,
  BI__builtin___strlcpy_chk,
  BI__builtin___strncat_chk,
  BI__builtin___strncpy_chk,
  BI__builtin___stpncpy_chk,
  BI__builtin___snprintf_chk,
  BI__builtin___sprintf_chk,
  BI__builtin___vsnprintf_chk,
  BI__builtin___vsprintf_chk,
  BI__builtin___fprintf_chk,
  BI__builtin___printf_chk,
  BI__builtin___vfprintf_chk,
  BI__builtin___vprintf_chk,
  BI__builtin_unpredictable,
  BI__builtin_expect,
  BI__builtin_expect_with_probability,
  BI__builtin_prefetch,
  BI__builtin_readcyclecounter,
  BI__builtin_trap,
  BI__builtin_debugtrap,
  BI__builtin_unreachable,
  BI__builtin_shufflevector,
  BI__builtin_convertvector,
  BI__builtin_alloca,
  BI__builtin_alloca_uninitialized,
  BI__builtin_alloca_with_align,
  BI__builtin_alloca_with_align_uninitialized,
  BI__builtin_call_with_static_chain,
  BI__builtin_elementwise_abs,
  BI__builtin_elementwise_max,
  BI__builtin_elementwise_min,
  BI__builtin_elementwise_ceil,
  BI__builtin_elementwise_floor,
  BI__builtin_elementwise_roundeven,
  BI__builtin_elementwise_trunc,
  BI__builtin_reduce_max,
  BI__builtin_reduce_min,
  BI__builtin_reduce_xor,
  BI__builtin_reduce_or,
  BI__builtin_reduce_and,
  BI__builtin_matrix_transpose,
  BI__builtin_matrix_column_major_load,
  BI__builtin_matrix_column_major_store,
  BI__sync_fetch_and_add,
  BI__sync_fetch_and_add_1,
  BI__sync_fetch_and_add_2,
  BI__sync_fetch_and_add_4,
  BI__sync_fetch_and_add_8,
  BI__sync_fetch_and_add_16,
  BI__sync_fetch_and_sub,
  BI__sync_fetch_and_sub_1,
  BI__sync_fetch_and_sub_2,
  BI__sync_fetch_and_sub_4,
  BI__sync_fetch_and_sub_8,
  BI__sync_fetch_and_sub_16,
  BI__sync_fetch_and_or,
  BI__sync_fetch_and_or_1,
  BI__sync_fetch_and_or_2,
  BI__sync_fetch_and_or_4,
  BI__sync_fetch_and_or_8,
  BI__sync_fetch_and_or_16,
  BI__sync_fetch_and_and,
  BI__sync_fetch_and_and_1,
  BI__sync_fetch_and_and_2,
  BI__sync_fetch_and_and_4,
  BI__sync_fetch_and_and_8,
  BI__sync_fetch_and_and_16,
  BI__sync_fetch_and_xor,
  BI__sync_fetch_and_xor_1,
  BI__sync_fetch_and_xor_2,
  BI__sync_fetch_and_xor_4,
  BI__sync_fetch_and_xor_8,
  BI__sync_fetch_and_xor_16,
  BI__sync_fetch_and_nand,
  BI__sync_fetch_and_nand_1,
  BI__sync_fetch_and_nand_2,
  BI__sync_fetch_and_nand_4,
  BI__sync_fetch_and_nand_8,
  BI__sync_fetch_and_nand_16,
  BI__sync_add_and_fetch,
  BI__sync_add_and_fetch_1,
  BI__sync_add_and_fetch_2,
  BI__sync_add_and_fetch_4,
  BI__sync_add_and_fetch_8,
  BI__sync_add_and_fetch_16,
  BI__sync_sub_and_fetch,
  BI__sync_sub_and_fetch_1,
  BI__sync_sub_and_fetch_2,
  BI__sync_sub_and_fetch_4,
  BI__sync_sub_and_fetch_8,
  BI__sync_sub_and_fetch_16,
  BI__sync_or_and_fetch,
  BI__sync_or_and_fetch_1,
  BI__sync_or_and_fetch_2,
  BI__sync_or_and_fetch_4,
  BI__sync_or_and_fetch_8,
  BI__sync_or_and_fetch_16,
  BI__sync_and_and_fetch,
  BI__sync_and_and_fetch_1,
  BI__sync_and_and_fetch_2,
  BI__sync_and_and_fetch_4,
  BI__sync_and_and_fetch_8,
  BI__sync_and_and_fetch_16,
  BI__sync_xor_and_fetch,
  BI__sync_xor_and_fetch_1,
  BI__sync_xor_and_fetch_2,
  BI__sync_xor_and_fetch_4,
  BI__sync_xor_and_fetch_8,
  BI__sync_xor_and_fetch_16,
  BI__sync_nand_and_fetch,
  BI__sync_nand_and_fetch_1,
  BI__sync_nand_and_fetch_2,
  BI__sync_nand_and_fetch_4,
  BI__sync_nand_and_fetch_8,
  BI__sync_nand_and_fetch_16,
  BI__sync_bool_compare_and_swap,
  BI__sync_bool_compare_and_swap_1,
  BI__sync_bool_compare_and_swap_2,
  BI__sync_bool_compare_and_swap_4,
  BI__sync_bool_compare_and_swap_8,
  BI__sync_bool_compare_and_swap_16,
  BI__sync_val_compare_and_swap,
  BI__sync_val_compare_and_swap_1,
  BI__sync_val_compare_and_swap_2,
  BI__sync_val_compare_and_swap_4,
  BI__sync_val_compare_and_swap_8,
  BI__sync_val_compare_and_swap_16,
  BI__sync_lock_test_and_set,
  BI__sync_lock_test_and_set_1,
  BI__sync_lock_test_and_set_2,
  BI__sync_lock_test_and_set_4,
  BI__sync_lock_test_and_set_8,
  BI__sync_lock_test_and_set_16,
  BI__sync_lock_release,
  BI__sync_lock_release_1,
  BI__sync_lock_release_2,
  BI__sync_lock_release_4,
  BI__sync_lock_release_8,
  BI__sync_lock_release_16,
  BI__sync_swap,
  BI__sync_swap_1,
  BI__sync_swap_2,
  BI__sync_swap_4,
  BI__sync_swap_8,
  BI__sync_swap_16,
  BI__c11_atomic_init,
  BI__c11_atomic_load,
  BI__c11_atomic_store,
  BI__c11_atomic_exchange,
  BI__c11_atomic_compare_exchange_strong,
  BI__c11_atomic_compare_exchange_weak,
  BI__c11_atomic_fetch_add,
  BI__c11_atomic_fetch_sub,
  BI__c11_atomic_fetch_and,
  BI__c11_atomic_fetch_or,
  BI__c11_atomic_fetch_xor,
  BI__c11_atomic_fetch_nand,
  BI__c11_atomic_fetch_max,
  BI__c11_atomic_fetch_min,
  BI__c11_atomic_thread_fence,
  BI__c11_atomic_signal_fence,
  BI__c11_atomic_is_lock_free,
  BI__atomic_load,
  BI__atomic_load_n,
  BI__atomic_store,
  BI__atomic_store_n,
  BI__atomic_exchange,
  BI__atomic_exchange_n,
  BI__atomic_compare_exchange,
  BI__atomic_compare_exchange_n,
  BI__atomic_fetch_add,
  BI__atomic_fetch_sub,
  BI__atomic_fetch_and,
  BI__atomic_fetch_or,
  BI__atomic_fetch_xor,
  BI__atomic_fetch_nand,
  BI__atomic_add_fetch,
  BI__atomic_sub_fetch,
  BI__atomic_and_fetch,
  BI__atomic_or_fetch,
  BI__atomic_xor_fetch,
  BI__atomic_max_fetch,
  BI__atomic_min_fetch,
  BI__atomic_nand_fetch,
  BI__atomic_test_and_set,
  BI__atomic_clear,
  BI__atomic_thread_fence,
  BI__atomic_signal_fence,
  BI__atomic_always_lock_free,
  BI__atomic_is_lock_free,
  BI__atomic_fetch_min,
  BI__atomic_fetch_max,
  BI__hip_atomic_load,
  BI__hip_atomic_store,
  BI__hip_atomic_compare_exchange_weak,
  BI__hip_atomic_compare_exchange_strong,
  BI__hip_atomic_exchange,
  BI__hip_atomic_fetch_add,
  BI__hip_atomic_fetch_and,
  BI__hip_atomic_fetch_or,
  BI__hip_atomic_fetch_xor,
  BI__hip_atomic_fetch_min,
  BI__hip_atomic_fetch_max,
  BI__sync_synchronize,
  BI__sync_fetch_and_min,
  BI__sync_fetch_and_max,
  BI__sync_fetch_and_umin,
  BI__sync_fetch_and_umax,
  BI__builtin_abort,
  BI__builtin_index,
  BI__builtin_rindex,
  BI__warn_memset_zero_len,
  BI__builtin_add_overflow,
  BI__builtin_sub_overflow,
  BI__builtin_mul_overflow,
  BI__builtin_uadd_overflow,
  BI__builtin_uaddl_overflow,
  BI__builtin_uaddll_overflow,
  BI__builtin_usub_overflow,
  BI__builtin_usubl_overflow,
  BI__builtin_usubll_overflow,
  BI__builtin_umul_overflow,
  BI__builtin_umull_overflow,
  BI__builtin_umulll_overflow,
  BI__builtin_sadd_overflow,
  BI__builtin_saddl_overflow,
  BI__builtin_saddll_overflow,
  BI__builtin_ssub_overflow,
  BI__builtin_ssubl_overflow,
  BI__builtin_ssubll_overflow,
  BI__builtin_smul_overflow,
  BI__builtin_smull_overflow,
  BI__builtin_smulll_overflow,
  BI__builtin_addressof,
  BI__builtin_function_start,
  BI__builtin_operator_new,
  BI__builtin_operator_delete,
  BI__builtin_char_memchr,
  BI__builtin_dump_struct,
  BI__builtin_preserve_access_index,
  BI__builtin_is_aligned,
  BI__builtin_align_up,
  BI__builtin_align_down,
  BI__builtin___get_unsafe_stack_start,
  BI__builtin___get_unsafe_stack_bottom,
  BI__builtin___get_unsafe_stack_top,
  BI__builtin___get_unsafe_stack_ptr,
  BI__builtin_nontemporal_store,
  BI__builtin_nontemporal_load,
  BI__builtin_os_log_format_buffer_size,
  BI__builtin_os_log_format,
  BI__xray_customevent,
  BI__xray_typedevent,
  BI__builtin_ms_va_start,
  BI__builtin_ms_va_end,
  BI__builtin_ms_va_copy,
  BI__builtin_annotation,
  BI__builtin_assume,
  BI__builtin_addcb,
  BI__builtin_addcs,
  BI__builtin_addc,
  BI__builtin_addcl,
  BI__builtin_addcll,
  BI__builtin_subcb,
  BI__builtin_subcs,
  BI__builtin_subc,
  BI__builtin_subcl,
  BI__builtin_subcll
};
static constexpr Token 
    Kstart_builtin_functions = BIprintf,
    Kend_lib_builtin_functions = BI_Block_object_dispose,
    Kend_compiler_builtin_functions = BI__builtin_subcll;
static const char *show(Token o){
  switch(o) {
    case Kextern: return "extern";
    case Kshort: return "short";
    case Kregister: return "register";
    case K_Thread_local: return "_Thread_local";
    case Kstatic: return "static";
    case Kauto: return "auto";
    case Kconstexpr: return "constexpr";
    case Kinline: return "inline";
    case Ktypedef: return "typedef";
    case K_Noreturn: return "_Noreturn";
    case K_Decimal32: return "_Decimal32";
    case K_Decimal128: return "_Decimal128";
    case K_Decimal64: return "_Decimal64";
    case K__int128: return "__int128";
    case K_Float16: return "_Float16";
    case K_Accum: return "_Accum";
    case K_Fract: return "_Fract";
    case K_Sat: return "_Sat";
    case K__float128: return "__float128";
    case K__float80: return "__float80";
    case K__bf16: return "__bf16";
    case Khalf: return "half";
    case K__ibm128: return "__ibm128";
    case K__thread: return "__thread";
    case K__auto_type: return "__auto_type";
    case K_Imaginary: return "_Imaginary";
    case K_Complex: return "_Complex";
    case K_Atomic: return "_Atomic";
    case K_Bool: return "_Bool";
    case Kunion: return "union";
    case Kstruct: return "struct";
    case Kenum: return "enum";
    case Kunsigned: return "unsigned";
    case Ksigned: return "signed";
    case Kvoid: return "void";
    case Kint: return "int";
    case Kchar: return "char";
    case Klong: return "long";
    case Kfloat: return "float";
    case Kdouble: return "double";
    case Ktypeof_unqual: return "typeof_unqual";
    case Ktypeof: return "typeof";
    case K_BitInt: return "_BitInt";
    case K_Alignas: return "_Alignas";
    case Kconst: return "const";
    case Krestrict: return "restrict";
    case Kvolatile: return "volatile";
    case K__func__: return "__func__";
    case K__declspec: return "__declspec";
    case K__attribute: return "__attribute";
    case K__builtin_choose_expr: return "__builtin_choose_expr";
    case K__builtin_offsetof: return "__builtin_offsetof";
    case K__builtin_FILE: return "__builtin_FILE";
    case K__builtin_FUNCTION: return "__builtin_FUNCTION";
    case K__builtin_LINE: return "__builtin_LINE";
    case K__builtin_COLUMN: return "__builtin_COLUMN";
    case K__builtin_types_compatible_p: return "__builtin_types_compatible_p";
    case K__builtin_va_arg: return "__builtin_va_arg";
    case K__builtin_bit_cast: return "__builtin_bit_cast";
    case K__builtin_available: return "__builtin_available";
    case K__cdecl: return "__cdecl";
    case K__stdcall: return "__stdcall";
    case K__fastcall: return "__fastcall";
    case K__thiscall: return "__thiscall";
    case K__regcall: return "__regcall";
    case K__vectorcall: return "__vectorcall";
    case K__pascal: return "__pascal";
    case K__PRETTY_FUNCTION__: return "__PRETTY_FUNCTION__";
    case K__extension__: return "__extension__";
    case K__real: return "__real";
    case K__imag: return "__imag";
    case K__label__: return "__label__";
    case Kasm: return "asm";
    case Knullptr: return "nullptr";
    case Ktrue: return "true";
    case Kfalse: return "false";
    case K__objc_yes: return "__objc_yes";
    case K__objc_no: return "__objc_no";
    case Kreturn: return "return";
    case Kfor: return "for";
    case Kcase: return "case";
    case Kswitch: return "switch";
    case Kgoto: return "goto";
    case Kdefault: return "default";
    case Kif: return "if";
    case Kelse: return "else";
    case Kdo: return "do";
    case Ksizeof: return "sizeof";
    case Kcontinue: return "continue";
    case Kbreak: return "break";
    case Kwhile: return "while";
    case K_Alignof: return "_Alignof";
    case K_Static_assert: return "_Static_assert";
    case K_Generic: return "_Generic";
    case TIdentifier: return "<TIdentifier>";
    case PPIdent: return "<PPIdent>";
    case PP_main: return "main";
    case PP__VA_ARGS__: return "__VA_ARGS__";
    case PP__LINE__: return "__LINE__";
    case PP__FILE__: return "__FILE__";
    case PP__DATE__: return "__DATE__";
    case PP__TIME__: return "__TIME__";
    case PP__COUNTER__: return "__COUNTER__";
    case PP_defined: return "defined";
    case PP_Pragma: return "_Pragma";
    case PPifdef: return "ifdef";
    case PPifndef: return "ifndef";
    case PPelif: return "elif";
    case PPendif: return "endif";
    case PPdefine: return "define";
    case PPundef: return "undef";
    case PPline: return "line";
    case PPinclude: return "include";
    case PPwarning: return "warning";
    case PPerror: return "error";
    case PPpragma: return "pragma";
    case TNul: return "\\0";
    case TNewLine: return "\\n";
    case TSpace: return " ";
    case TNot: return "!";
    case TDoubleQ: return "\"";
    case TBash: return "~";
    case TDolor: return "$";
    case TPercent: return "%";
    case TBitAnd: return "&";
    case TSignleQ: return "'";
    case TLbracket: return "(";
    case TRbracket: return ")";
    case TMul: return "*";
    case TAdd: return "+";
    case TComma: return ",";
    case TDash: return "-";
    case TDot: return ".";
    case TSlash: return "/";
    case TColon: return ":";
    case TSemicolon: return ";";
    case TLt: return "<";
    case TAssign: return "=";
    case TGt: return ">";
    case TQuestionMark: return "?";
    case TMouse: return "@";
    case TLSquareBrackets: return "[";
    case TBackslash: return "\\";
    case TRSquareBrackets: return "]";
    case TXor: return "^";
    case TUnderscore: return "_";
    case TGraveAccent: return "`";
    case TLcurlyBracket: return "{";
    case TBitOr: return "|";
    case TRcurlyBracket: return "}";
    case TBitNot: return "~";
    case TAddAdd: return "++";
    case TSubSub: return "--";
    case TArrow: return "->";
    case Tshl: return "<<";
    case Tshr: return ">>";
    case TGe: return ">=";
    case TLe: return "<=";
    case TNe: return "!=";
    case TEq: return "==";
    case TLogicalOr: return "||";
    case TLogicalAnd: return "&&";
    case TAsignAdd: return "+=";
    case TAsignSub: return "-=";
    case TAsignMul: return "*=";
    case TAsignDiv: return "/=";
    case TAsignRem: return "%=";
    case TAsignShl: return "<<=";
    case TAsignShr: return ">>=";
    case TAsignBitAnd: return "&=";
    case TAsignBitOr: return "|=";
    case TAsignBitXor: return "^=";
    case TEllipsis2: return "..";
    case TEllipsis: return "...";
    case TCharLit: return "<char>";
    case TStringLit: return "<string>";
    case PPlaceholder: return "<placeholder>";
    case PPSharp: return "#";
    case PPNumber: return "<pp-number>";
    case PPSharpSharp: return "##";
    case PPMacroPop: return "<macro-pop>";
    case PPMacroTraceLoc: return "<macro-trace-loc>";
    case TEOF: return "<EOF>";
    case BIprintf: return "printf";
    case BIfprintf: return "fprintf";
    case BIsnprintf: return "snprintf";
    case BIsprintf: return "sprintf";
    case BIvprintf: return "vprintf";
    case BIvfprintf: return "vfprintf";
    case BIvsnprintf: return "vsnprintf";
    case BIvsprintf: return "vsprintf";
    case BIscanf: return "scanf";
    case BIfscanf: return "fscanf";
    case BIsscanf: return "sscanf";
    case BIvscanf: return "vscanf";
    case BIvfscanf: return "vfscanf";
    case BIvsscanf: return "vsscanf";
    case BIfopen: return "fopen";
    case BIfread: return "fread";
    case BIfwrite: return "fwrite";
    case BIwcschr: return "wcschr";
    case BIwcscmp: return "wcscmp";
    case BIwcslen: return "wcslen";
    case BIwcsncmp: return "wcsncmp";
    case BIwmemchr: return "wmemchr";
    case BIwmemcmp: return "wmemcmp";
    case BIwmemcpy: return "wmemcpy";
    case BIwmemmove: return "wmemmove";
    case BIisalnum: return "isalnum";
    case BIisalpha: return "isalpha";
    case BIisblank: return "isblank";
    case BIiscntrl: return "iscntrl";
    case BIisdigit: return "isdigit";
    case BIisgraph: return "isgraph";
    case BIislower: return "islower";
    case BIisprint: return "isprint";
    case BIispunct: return "ispunct";
    case BIisspace: return "isspace";
    case BIisupper: return "isupper";
    case BIisxdigit: return "isxdigit";
    case BItolower: return "tolower";
    case BItoupper: return "toupper";
    case BIabort: return "abort";
    case BIcalloc: return "calloc";
    case BIexit: return "exit";
    case BI_Exit: return "_Exit";
    case BImalloc: return "malloc";
    case BIrealloc: return "realloc";
    case BIfree: return "free";
    case BIstrtod: return "strtod";
    case BIstrtof: return "strtof";
    case BIstrtold: return "strtold";
    case BIstrtol: return "strtol";
    case BIstrtoll: return "strtoll";
    case BIstrtoul: return "strtoul";
    case BIstrtoull: return "strtoull";
    case BIaligned_alloc: return "aligned_alloc";
    case BIalloca: return "alloca";
    case BIabs: return "abs";
    case BIlabs: return "labs";
    case BIllabs: return "llabs";
    case BIindex: return "index";
    case BIrindex: return "rindex";
    case BIbzero: return "bzero";
    case BIbcmp: return "bcmp";
    case BIstrcasecmp: return "strcasecmp";
    case BIstrncasecmp: return "strncasecmp";
    case BImemcpy: return "memcpy";
    case BImemcmp: return "memcmp";
    case BImemmove: return "memmove";
    case BIstrcpy: return "strcpy";
    case BIstrncpy: return "strncpy";
    case BIstrcmp: return "strcmp";
    case BIstrncmp: return "strncmp";
    case BIstrcat: return "strcat";
    case BIstrncat: return "strncat";
    case BIstrxfrm: return "strxfrm";
    case BImemchr: return "memchr";
    case BIstrchr: return "strchr";
    case BIstrcspn: return "strcspn";
    case BIstrpbrk: return "strpbrk";
    case BIstrrchr: return "strrchr";
    case BIstrspn: return "strspn";
    case BIstrstr: return "strstr";
    case BIstrtok: return "strtok";
    case BImemset: return "memset";
    case BIstrerror: return "strerror";
    case BIstrlen: return "strlen";
    case BImemccpy: return "memccpy";
    case BImempcpy: return "mempcpy";
    case BIstpcpy: return "stpcpy";
    case BIstpncpy: return "stpncpy";
    case BIstrdup: return "strdup";
    case BIstrndup: return "strndup";
    case BIstrlcpy: return "strlcpy";
    case BIstrlcat: return "strlcat";
    case BImemalign: return "memalign";
    case BIsetjmp: return "setjmp";
    case BIlongjmp: return "longjmp";
    case BI_setjmp: return "_setjmp";
    case BI__sigsetjmp: return "__sigsetjmp";
    case BIsigsetjmp: return "sigsetjmp";
    case BIsavectx: return "savectx";
    case BIgetcontext: return "getcontext";
    case BI_longjmp: return "_longjmp";
    case BIsiglongjmp: return "siglongjmp";
    case BIatan2: return "atan2";
    case BIatan2f: return "atan2f";
    case BIatan2l: return "atan2l";
    case BIcopysign: return "copysign";
    case BIcopysignf: return "copysignf";
    case BIcopysignl: return "copysignl";
    case BIfabs: return "fabs";
    case BIfabsf: return "fabsf";
    case BIfabsl: return "fabsl";
    case BIfinite: return "finite";
    case BIfinitef: return "finitef";
    case BIfinitel: return "finitel";
    case BI__finite: return "__finite";
    case BI__finitef: return "__finitef";
    case BI__finitel: return "__finitel";
    case BIfmod: return "fmod";
    case BIfmodf: return "fmodf";
    case BIfmodl: return "fmodl";
    case BIfrexp: return "frexp";
    case BIfrexpf: return "frexpf";
    case BIfrexpl: return "frexpl";
    case BIldexp: return "ldexp";
    case BIldexpf: return "ldexpf";
    case BIldexpl: return "ldexpl";
    case BImodf: return "modf";
    case BImodff: return "modff";
    case BImodfl: return "modfl";
    case BInan: return "nan";
    case BInanf: return "nanf";
    case BInanl: return "nanl";
    case BIpow: return "pow";
    case BIpowf: return "powf";
    case BIpowl: return "powl";
    case BIacos: return "acos";
    case BIacosf: return "acosf";
    case BIacosl: return "acosl";
    case BIacosh: return "acosh";
    case BIacoshf: return "acoshf";
    case BIacoshl: return "acoshl";
    case BIasin: return "asin";
    case BIasinf: return "asinf";
    case BIasinl: return "asinl";
    case BIasinh: return "asinh";
    case BIasinhf: return "asinhf";
    case BIasinhl: return "asinhl";
    case BIatan: return "atan";
    case BIatanf: return "atanf";
    case BIatanl: return "atanl";
    case BIatanh: return "atanh";
    case BIatanhf: return "atanhf";
    case BIatanhl: return "atanhl";
    case BIcbrt: return "cbrt";
    case BIcbrtf: return "cbrtf";
    case BIcbrtl: return "cbrtl";
    case BIceil: return "ceil";
    case BIceilf: return "ceilf";
    case BIceill: return "ceill";
    case BIcos: return "cos";
    case BIcosf: return "cosf";
    case BIcosl: return "cosl";
    case BIcosh: return "cosh";
    case BIcoshf: return "coshf";
    case BIcoshl: return "coshl";
    case BIerf: return "erf";
    case BIerff: return "erff";
    case BIerfl: return "erfl";
    case BIerfc: return "erfc";
    case BIerfcf: return "erfcf";
    case BIerfcl: return "erfcl";
    case BIexp: return "exp";
    case BIexpf: return "expf";
    case BIexpl: return "expl";
    case BIexp2: return "exp2";
    case BIexp2f: return "exp2f";
    case BIexp2l: return "exp2l";
    case BIexpm1: return "expm1";
    case BIexpm1f: return "expm1f";
    case BIexpm1l: return "expm1l";
    case BIfdim: return "fdim";
    case BIfdimf: return "fdimf";
    case BIfdiml: return "fdiml";
    case BIfloor: return "floor";
    case BIfloorf: return "floorf";
    case BIfloorl: return "floorl";
    case BIfma: return "fma";
    case BIfmaf: return "fmaf";
    case BIfmal: return "fmal";
    case BIfmax: return "fmax";
    case BIfmaxf: return "fmaxf";
    case BIfmaxl: return "fmaxl";
    case BIfmin: return "fmin";
    case BIfminf: return "fminf";
    case BIfminl: return "fminl";
    case BIhypot: return "hypot";
    case BIhypotf: return "hypotf";
    case BIhypotl: return "hypotl";
    case BIilogb: return "ilogb";
    case BIilogbf: return "ilogbf";
    case BIilogbl: return "ilogbl";
    case BIlgamma: return "lgamma";
    case BIlgammaf: return "lgammaf";
    case BIlgammal: return "lgammal";
    case BIllrint: return "llrint";
    case BIllrintf: return "llrintf";
    case BIllrintl: return "llrintl";
    case BIllround: return "llround";
    case BIllroundf: return "llroundf";
    case BIllroundl: return "llroundl";
    case BIlog: return "log";
    case BIlogf: return "logf";
    case BIlogl: return "logl";
    case BIlog10: return "log10";
    case BIlog10f: return "log10f";
    case BIlog10l: return "log10l";
    case BIlog1p: return "log1p";
    case BIlog1pf: return "log1pf";
    case BIlog1pl: return "log1pl";
    case BIlog2: return "log2";
    case BIlog2f: return "log2f";
    case BIlog2l: return "log2l";
    case BIlogb: return "logb";
    case BIlogbf: return "logbf";
    case BIlogbl: return "logbl";
    case BIlrint: return "lrint";
    case BIlrintf: return "lrintf";
    case BIlrintl: return "lrintl";
    case BIlround: return "lround";
    case BIlroundf: return "lroundf";
    case BIlroundl: return "lroundl";
    case BInearbyint: return "nearbyint";
    case BInearbyintf: return "nearbyintf";
    case BInearbyintl: return "nearbyintl";
    case BInextafter: return "nextafter";
    case BInextafterf: return "nextafterf";
    case BInextafterl: return "nextafterl";
    case BInexttoward: return "nexttoward";
    case BInexttowardf: return "nexttowardf";
    case BInexttowardl: return "nexttowardl";
    case BIremainder: return "remainder";
    case BIremainderf: return "remainderf";
    case BIremainderl: return "remainderl";
    case BIremquo: return "remquo";
    case BIremquof: return "remquof";
    case BIremquol: return "remquol";
    case BIrint: return "rint";
    case BIrintf: return "rintf";
    case BIrintl: return "rintl";
    case BIround: return "round";
    case BIroundf: return "roundf";
    case BIroundl: return "roundl";
    case BIscalbln: return "scalbln";
    case BIscalblnf: return "scalblnf";
    case BIscalblnl: return "scalblnl";
    case BIscalbn: return "scalbn";
    case BIscalbnf: return "scalbnf";
    case BIscalbnl: return "scalbnl";
    case BIsin: return "sin";
    case BIsinf: return "sinf";
    case BI__sinpi: return "__sinpi";
    case BI__sinpif: return "__sinpif";
    case BI__cospi: return "__cospi";
    case BI__cospif: return "__cospif";
    case BI__tanpi: return "__tanpi";
    case BI__tanpif: return "__tanpif";
    case BI__exp10: return "__exp10";
    case BI__exp10f: return "__exp10f";
    case BIsinl: return "sinl";
    case BIsinh: return "sinh";
    case BIsinhf: return "sinhf";
    case BIsinhl: return "sinhl";
    case BIsqrt: return "sqrt";
    case BIsqrtf: return "sqrtf";
    case BIsqrtl: return "sqrtl";
    case BItan: return "tan";
    case BItanf: return "tanf";
    case BItanl: return "tanl";
    case BItanh: return "tanh";
    case BItanhf: return "tanhf";
    case BItanhl: return "tanhl";
    case BItgamma: return "tgamma";
    case BItgammaf: return "tgammaf";
    case BItgammal: return "tgammal";
    case BItrunc: return "trunc";
    case BItruncf: return "truncf";
    case BItruncl: return "truncl";
    case BIva_start: return "va_start";
    case BIva_end: return "va_end";
    case BIva_copy: return "va_copy";
    case BI_exit: return "_exit";
    case BIvfork: return "vfork";
    case BIcabs: return "cabs";
    case BIcabsf: return "cabsf";
    case BIcabsl: return "cabsl";
    case BIcacos: return "cacos";
    case BIcacosf: return "cacosf";
    case BIcacosl: return "cacosl";
    case BIcacosh: return "cacosh";
    case BIcacoshf: return "cacoshf";
    case BIcacoshl: return "cacoshl";
    case BIcarg: return "carg";
    case BIcargf: return "cargf";
    case BIcargl: return "cargl";
    case BIcasin: return "casin";
    case BIcasinf: return "casinf";
    case BIcasinl: return "casinl";
    case BIcasinh: return "casinh";
    case BIcasinhf: return "casinhf";
    case BIcasinhl: return "casinhl";
    case BIcatan: return "catan";
    case BIcatanf: return "catanf";
    case BIcatanl: return "catanl";
    case BIcatanh: return "catanh";
    case BIcatanhf: return "catanhf";
    case BIcatanhl: return "catanhl";
    case BIccos: return "ccos";
    case BIccosf: return "ccosf";
    case BIccosl: return "ccosl";
    case BIccosh: return "ccosh";
    case BIccoshf: return "ccoshf";
    case BIccoshl: return "ccoshl";
    case BIcexp: return "cexp";
    case BIcexpf: return "cexpf";
    case BIcexpl: return "cexpl";
    case BIcimag: return "cimag";
    case BIcimagf: return "cimagf";
    case BIcimagl: return "cimagl";
    case BIconj: return "conj";
    case BIconjf: return "conjf";
    case BIconjl: return "conjl";
    case BIclog: return "clog";
    case BIclogf: return "clogf";
    case BIclogl: return "clogl";
    case BIcproj: return "cproj";
    case BIcprojf: return "cprojf";
    case BIcprojl: return "cprojl";
    case BIcpow: return "cpow";
    case BIcpowf: return "cpowf";
    case BIcpowl: return "cpowl";
    case BIcreal: return "creal";
    case BIcrealf: return "crealf";
    case BIcreall: return "creall";
    case BIcsin: return "csin";
    case BIcsinf: return "csinf";
    case BIcsinl: return "csinl";
    case BIcsinh: return "csinh";
    case BIcsinhf: return "csinhf";
    case BIcsinhl: return "csinhl";
    case BIcsqrt: return "csqrt";
    case BIcsqrtf: return "csqrtf";
    case BIcsqrtl: return "csqrtl";
    case BIctan: return "ctan";
    case BIctanf: return "ctanf";
    case BIctanl: return "ctanl";
    case BIctanh: return "ctanh";
    case BIctanhf: return "ctanhf";
    case BIctanhl: return "ctanhl";
    case BI_Block_object_assign: return "_Block_object_assign";
    case BI_Block_object_dispose: return "_Block_object_dispose";
    case BI__builtin_atan2: return "__builtin_atan2";
    case BI__builtin_atan2f: return "__builtin_atan2f";
    case BI__builtin_atan2l: return "__builtin_atan2l";
    case BI__builtin_atan2f128: return "__builtin_atan2f128";
    case BI__builtin_abs: return "__builtin_abs";
    case BI__builtin_copysign: return "__builtin_copysign";
    case BI__builtin_copysignf: return "__builtin_copysignf";
    case BI__builtin_copysignf16: return "__builtin_copysignf16";
    case BI__builtin_copysignl: return "__builtin_copysignl";
    case BI__builtin_copysignf128: return "__builtin_copysignf128";
    case BI__builtin_fabs: return "__builtin_fabs";
    case BI__builtin_fabsf: return "__builtin_fabsf";
    case BI__builtin_fabsl: return "__builtin_fabsl";
    case BI__builtin_fabsf16: return "__builtin_fabsf16";
    case BI__builtin_fabsf128: return "__builtin_fabsf128";
    case BI__builtin_fmod: return "__builtin_fmod";
    case BI__builtin_fmodf: return "__builtin_fmodf";
    case BI__builtin_fmodf16: return "__builtin_fmodf16";
    case BI__builtin_fmodl: return "__builtin_fmodl";
    case BI__builtin_fmodf128: return "__builtin_fmodf128";
    case BI__builtin_frexp: return "__builtin_frexp";
    case BI__builtin_frexpf: return "__builtin_frexpf";
    case BI__builtin_frexpl: return "__builtin_frexpl";
    case BI__builtin_frexpf128: return "__builtin_frexpf128";
    case BI__builtin_huge_val: return "__builtin_huge_val";
    case BI__builtin_huge_valf: return "__builtin_huge_valf";
    case BI__builtin_huge_vall: return "__builtin_huge_vall";
    case BI__builtin_huge_valf128: return "__builtin_huge_valf128";
    case BI__builtin_inf: return "__builtin_inf";
    case BI__builtin_inff: return "__builtin_inff";
    case BI__builtin_infl: return "__builtin_infl";
    case BI__builtin_inff128: return "__builtin_inff128";
    case BI__builtin_labs: return "__builtin_labs";
    case BI__builtin_llabs: return "__builtin_llabs";
    case BI__builtin_ldexp: return "__builtin_ldexp";
    case BI__builtin_ldexpf: return "__builtin_ldexpf";
    case BI__builtin_ldexpl: return "__builtin_ldexpl";
    case BI__builtin_ldexpf128: return "__builtin_ldexpf128";
    case BI__builtin_modf: return "__builtin_modf";
    case BI__builtin_modff: return "__builtin_modff";
    case BI__builtin_modfl: return "__builtin_modfl";
    case BI__builtin_modff128: return "__builtin_modff128";
    case BI__builtin_nan: return "__builtin_nan";
    case BI__builtin_nanf: return "__builtin_nanf";
    case BI__builtin_nanl: return "__builtin_nanl";
    case BI__builtin_nanf128: return "__builtin_nanf128";
    case BI__builtin_nans: return "__builtin_nans";
    case BI__builtin_nansf: return "__builtin_nansf";
    case BI__builtin_nansl: return "__builtin_nansl";
    case BI__builtin_nansf128: return "__builtin_nansf128";
    case BI__builtin_powi: return "__builtin_powi";
    case BI__builtin_powif: return "__builtin_powif";
    case BI__builtin_powil: return "__builtin_powil";
    case BI__builtin_pow: return "__builtin_pow";
    case BI__builtin_powf: return "__builtin_powf";
    case BI__builtin_powf16: return "__builtin_powf16";
    case BI__builtin_powl: return "__builtin_powl";
    case BI__builtin_powf128: return "__builtin_powf128";
    case BI__builtin_acos: return "__builtin_acos";
    case BI__builtin_acosf: return "__builtin_acosf";
    case BI__builtin_acosl: return "__builtin_acosl";
    case BI__builtin_acosf128: return "__builtin_acosf128";
    case BI__builtin_acosh: return "__builtin_acosh";
    case BI__builtin_acoshf: return "__builtin_acoshf";
    case BI__builtin_acoshl: return "__builtin_acoshl";
    case BI__builtin_acoshf128: return "__builtin_acoshf128";
    case BI__builtin_asin: return "__builtin_asin";
    case BI__builtin_asinf: return "__builtin_asinf";
    case BI__builtin_asinl: return "__builtin_asinl";
    case BI__builtin_asinf128: return "__builtin_asinf128";
    case BI__builtin_asinh: return "__builtin_asinh";
    case BI__builtin_asinhf: return "__builtin_asinhf";
    case BI__builtin_asinhl: return "__builtin_asinhl";
    case BI__builtin_asinhf128: return "__builtin_asinhf128";
    case BI__builtin_atan: return "__builtin_atan";
    case BI__builtin_atanf: return "__builtin_atanf";
    case BI__builtin_atanl: return "__builtin_atanl";
    case BI__builtin_atanf128: return "__builtin_atanf128";
    case BI__builtin_atanh: return "__builtin_atanh";
    case BI__builtin_atanhf: return "__builtin_atanhf";
    case BI__builtin_atanhl: return "__builtin_atanhl";
    case BI__builtin_atanhf128: return "__builtin_atanhf128";
    case BI__builtin_cbrt: return "__builtin_cbrt";
    case BI__builtin_cbrtf: return "__builtin_cbrtf";
    case BI__builtin_cbrtl: return "__builtin_cbrtl";
    case BI__builtin_cbrtf128: return "__builtin_cbrtf128";
    case BI__builtin_ceil: return "__builtin_ceil";
    case BI__builtin_ceilf: return "__builtin_ceilf";
    case BI__builtin_ceilf16: return "__builtin_ceilf16";
    case BI__builtin_ceill: return "__builtin_ceill";
    case BI__builtin_ceilf128: return "__builtin_ceilf128";
    case BI__builtin_cos: return "__builtin_cos";
    case BI__builtin_cosf: return "__builtin_cosf";
    case BI__builtin_cosf16: return "__builtin_cosf16";
    case BI__builtin_cosh: return "__builtin_cosh";
    case BI__builtin_coshf: return "__builtin_coshf";
    case BI__builtin_coshl: return "__builtin_coshl";
    case BI__builtin_coshf128: return "__builtin_coshf128";
    case BI__builtin_cosl: return "__builtin_cosl";
    case BI__builtin_cosf128: return "__builtin_cosf128";
    case BI__builtin_erf: return "__builtin_erf";
    case BI__builtin_erff: return "__builtin_erff";
    case BI__builtin_erfl: return "__builtin_erfl";
    case BI__builtin_erff128: return "__builtin_erff128";
    case BI__builtin_erfc: return "__builtin_erfc";
    case BI__builtin_erfcf: return "__builtin_erfcf";
    case BI__builtin_erfcl: return "__builtin_erfcl";
    case BI__builtin_erfcf128: return "__builtin_erfcf128";
    case BI__builtin_exp: return "__builtin_exp";
    case BI__builtin_expf: return "__builtin_expf";
    case BI__builtin_expf16: return "__builtin_expf16";
    case BI__builtin_expl: return "__builtin_expl";
    case BI__builtin_expf128: return "__builtin_expf128";
    case BI__builtin_exp2: return "__builtin_exp2";
    case BI__builtin_exp2f: return "__builtin_exp2f";
    case BI__builtin_exp2f16: return "__builtin_exp2f16";
    case BI__builtin_exp2l: return "__builtin_exp2l";
    case BI__builtin_exp2f128: return "__builtin_exp2f128";
    case BI__builtin_expm1: return "__builtin_expm1";
    case BI__builtin_expm1f: return "__builtin_expm1f";
    case BI__builtin_expm1l: return "__builtin_expm1l";
    case BI__builtin_expm1f128: return "__builtin_expm1f128";
    case BI__builtin_fdim: return "__builtin_fdim";
    case BI__builtin_fdimf: return "__builtin_fdimf";
    case BI__builtin_fdiml: return "__builtin_fdiml";
    case BI__builtin_fdimf128: return "__builtin_fdimf128";
    case BI__builtin_floor: return "__builtin_floor";
    case BI__builtin_floorf: return "__builtin_floorf";
    case BI__builtin_floorf16: return "__builtin_floorf16";
    case BI__builtin_floorl: return "__builtin_floorl";
    case BI__builtin_floorf128: return "__builtin_floorf128";
    case BI__builtin_fma: return "__builtin_fma";
    case BI__builtin_fmaf: return "__builtin_fmaf";
    case BI__builtin_fmaf16: return "__builtin_fmaf16";
    case BI__builtin_fmal: return "__builtin_fmal";
    case BI__builtin_fmaf128: return "__builtin_fmaf128";
    case BI__builtin_fmax: return "__builtin_fmax";
    case BI__builtin_fmaxf: return "__builtin_fmaxf";
    case BI__builtin_fmaxf16: return "__builtin_fmaxf16";
    case BI__builtin_fmaxl: return "__builtin_fmaxl";
    case BI__builtin_fmaxf128: return "__builtin_fmaxf128";
    case BI__builtin_fmin: return "__builtin_fmin";
    case BI__builtin_fminf: return "__builtin_fminf";
    case BI__builtin_fminf16: return "__builtin_fminf16";
    case BI__builtin_fminl: return "__builtin_fminl";
    case BI__builtin_fminf128: return "__builtin_fminf128";
    case BI__builtin_hypot: return "__builtin_hypot";
    case BI__builtin_hypotf: return "__builtin_hypotf";
    case BI__builtin_hypotl: return "__builtin_hypotl";
    case BI__builtin_hypotf128: return "__builtin_hypotf128";
    case BI__builtin_ilogb: return "__builtin_ilogb";
    case BI__builtin_ilogbf: return "__builtin_ilogbf";
    case BI__builtin_ilogbl: return "__builtin_ilogbl";
    case BI__builtin_ilogbf128: return "__builtin_ilogbf128";
    case BI__builtin_lgamma: return "__builtin_lgamma";
    case BI__builtin_lgammaf: return "__builtin_lgammaf";
    case BI__builtin_lgammal: return "__builtin_lgammal";
    case BI__builtin_lgammaf128: return "__builtin_lgammaf128";
    case BI__builtin_llrint: return "__builtin_llrint";
    case BI__builtin_llrintf: return "__builtin_llrintf";
    case BI__builtin_llrintl: return "__builtin_llrintl";
    case BI__builtin_llrintf128: return "__builtin_llrintf128";
    case BI__builtin_llround: return "__builtin_llround";
    case BI__builtin_llroundf: return "__builtin_llroundf";
    case BI__builtin_llroundl: return "__builtin_llroundl";
    case BI__builtin_llroundf128: return "__builtin_llroundf128";
    case BI__builtin_log: return "__builtin_log";
    case BI__builtin_log10: return "__builtin_log10";
    case BI__builtin_log10f: return "__builtin_log10f";
    case BI__builtin_log10f16: return "__builtin_log10f16";
    case BI__builtin_log10l: return "__builtin_log10l";
    case BI__builtin_log10f128: return "__builtin_log10f128";
    case BI__builtin_log1p: return "__builtin_log1p";
    case BI__builtin_log1pf: return "__builtin_log1pf";
    case BI__builtin_log1pl: return "__builtin_log1pl";
    case BI__builtin_log1pf128: return "__builtin_log1pf128";
    case BI__builtin_log2: return "__builtin_log2";
    case BI__builtin_log2f: return "__builtin_log2f";
    case BI__builtin_log2f16: return "__builtin_log2f16";
    case BI__builtin_log2l: return "__builtin_log2l";
    case BI__builtin_log2f128: return "__builtin_log2f128";
    case BI__builtin_logb: return "__builtin_logb";
    case BI__builtin_logbf: return "__builtin_logbf";
    case BI__builtin_logbl: return "__builtin_logbl";
    case BI__builtin_logbf128: return "__builtin_logbf128";
    case BI__builtin_logf: return "__builtin_logf";
    case BI__builtin_logf16: return "__builtin_logf16";
    case BI__builtin_logl: return "__builtin_logl";
    case BI__builtin_logf128: return "__builtin_logf128";
    case BI__builtin_lrint: return "__builtin_lrint";
    case BI__builtin_lrintf: return "__builtin_lrintf";
    case BI__builtin_lrintl: return "__builtin_lrintl";
    case BI__builtin_lrintf128: return "__builtin_lrintf128";
    case BI__builtin_lround: return "__builtin_lround";
    case BI__builtin_lroundf: return "__builtin_lroundf";
    case BI__builtin_lroundl: return "__builtin_lroundl";
    case BI__builtin_lroundf128: return "__builtin_lroundf128";
    case BI__builtin_nearbyint: return "__builtin_nearbyint";
    case BI__builtin_nearbyintf: return "__builtin_nearbyintf";
    case BI__builtin_nearbyintl: return "__builtin_nearbyintl";
    case BI__builtin_nearbyintf128: return "__builtin_nearbyintf128";
    case BI__builtin_nextafter: return "__builtin_nextafter";
    case BI__builtin_nextafterf: return "__builtin_nextafterf";
    case BI__builtin_nextafterl: return "__builtin_nextafterl";
    case BI__builtin_nextafterf128: return "__builtin_nextafterf128";
    case BI__builtin_nexttoward: return "__builtin_nexttoward";
    case BI__builtin_nexttowardf: return "__builtin_nexttowardf";
    case BI__builtin_nexttowardl: return "__builtin_nexttowardl";
    case BI__builtin_nexttowardf128: return "__builtin_nexttowardf128";
    case BI__builtin_remainder: return "__builtin_remainder";
    case BI__builtin_remainderf: return "__builtin_remainderf";
    case BI__builtin_remainderl: return "__builtin_remainderl";
    case BI__builtin_remainderf128: return "__builtin_remainderf128";
    case BI__builtin_remquo: return "__builtin_remquo";
    case BI__builtin_remquof: return "__builtin_remquof";
    case BI__builtin_remquol: return "__builtin_remquol";
    case BI__builtin_remquof128: return "__builtin_remquof128";
    case BI__builtin_rint: return "__builtin_rint";
    case BI__builtin_rintf: return "__builtin_rintf";
    case BI__builtin_rintf16: return "__builtin_rintf16";
    case BI__builtin_rintl: return "__builtin_rintl";
    case BI__builtin_rintf128: return "__builtin_rintf128";
    case BI__builtin_round: return "__builtin_round";
    case BI__builtin_roundf: return "__builtin_roundf";
    case BI__builtin_roundf16: return "__builtin_roundf16";
    case BI__builtin_roundl: return "__builtin_roundl";
    case BI__builtin_roundf128: return "__builtin_roundf128";
    case BI__builtin_scalbln: return "__builtin_scalbln";
    case BI__builtin_scalblnf: return "__builtin_scalblnf";
    case BI__builtin_scalblnl: return "__builtin_scalblnl";
    case BI__builtin_scalblnf128: return "__builtin_scalblnf128";
    case BI__builtin_scalbn: return "__builtin_scalbn";
    case BI__builtin_scalbnf: return "__builtin_scalbnf";
    case BI__builtin_scalbnl: return "__builtin_scalbnl";
    case BI__builtin_scalbnf128: return "__builtin_scalbnf128";
    case BI__builtin_sin: return "__builtin_sin";
    case BI__builtin_sinf: return "__builtin_sinf";
    case BI__builtin_sinf16: return "__builtin_sinf16";
    case BI__builtin_sinh: return "__builtin_sinh";
    case BI__builtin_sinhf: return "__builtin_sinhf";
    case BI__builtin_sinhl: return "__builtin_sinhl";
    case BI__builtin_sinhf128: return "__builtin_sinhf128";
    case BI__builtin_sinl: return "__builtin_sinl";
    case BI__builtin_sinf128: return "__builtin_sinf128";
    case BI__builtin_sqrt: return "__builtin_sqrt";
    case BI__builtin_sqrtf: return "__builtin_sqrtf";
    case BI__builtin_sqrtf16: return "__builtin_sqrtf16";
    case BI__builtin_sqrtl: return "__builtin_sqrtl";
    case BI__builtin_sqrtf128: return "__builtin_sqrtf128";
    case BI__builtin_tan: return "__builtin_tan";
    case BI__builtin_tanf: return "__builtin_tanf";
    case BI__builtin_tanh: return "__builtin_tanh";
    case BI__builtin_tanhf: return "__builtin_tanhf";
    case BI__builtin_tanhl: return "__builtin_tanhl";
    case BI__builtin_tanhf128: return "__builtin_tanhf128";
    case BI__builtin_tanl: return "__builtin_tanl";
    case BI__builtin_tanf128: return "__builtin_tanf128";
    case BI__builtin_tgamma: return "__builtin_tgamma";
    case BI__builtin_tgammaf: return "__builtin_tgammaf";
    case BI__builtin_tgammal: return "__builtin_tgammal";
    case BI__builtin_tgammaf128: return "__builtin_tgammaf128";
    case BI__builtin_trunc: return "__builtin_trunc";
    case BI__builtin_truncf: return "__builtin_truncf";
    case BI__builtin_truncl: return "__builtin_truncl";
    case BI__builtin_truncf128: return "__builtin_truncf128";
    case BI__builtin_truncf16: return "__builtin_truncf16";
    case BI__builtin_flt_rounds: return "__builtin_flt_rounds";
    case BI__builtin_cabs: return "__builtin_cabs";
    case BI__builtin_cabsf: return "__builtin_cabsf";
    case BI__builtin_cabsl: return "__builtin_cabsl";
    case BI__builtin_cacos: return "__builtin_cacos";
    case BI__builtin_cacosf: return "__builtin_cacosf";
    case BI__builtin_cacosh: return "__builtin_cacosh";
    case BI__builtin_cacoshf: return "__builtin_cacoshf";
    case BI__builtin_cacoshl: return "__builtin_cacoshl";
    case BI__builtin_cacosl: return "__builtin_cacosl";
    case BI__builtin_carg: return "__builtin_carg";
    case BI__builtin_cargf: return "__builtin_cargf";
    case BI__builtin_cargl: return "__builtin_cargl";
    case BI__builtin_casin: return "__builtin_casin";
    case BI__builtin_casinf: return "__builtin_casinf";
    case BI__builtin_casinh: return "__builtin_casinh";
    case BI__builtin_casinhf: return "__builtin_casinhf";
    case BI__builtin_casinhl: return "__builtin_casinhl";
    case BI__builtin_casinl: return "__builtin_casinl";
    case BI__builtin_catan: return "__builtin_catan";
    case BI__builtin_catanf: return "__builtin_catanf";
    case BI__builtin_catanh: return "__builtin_catanh";
    case BI__builtin_catanhf: return "__builtin_catanhf";
    case BI__builtin_catanhl: return "__builtin_catanhl";
    case BI__builtin_catanl: return "__builtin_catanl";
    case BI__builtin_ccos: return "__builtin_ccos";
    case BI__builtin_ccosf: return "__builtin_ccosf";
    case BI__builtin_ccosl: return "__builtin_ccosl";
    case BI__builtin_ccosh: return "__builtin_ccosh";
    case BI__builtin_ccoshf: return "__builtin_ccoshf";
    case BI__builtin_ccoshl: return "__builtin_ccoshl";
    case BI__builtin_cexp: return "__builtin_cexp";
    case BI__builtin_cexpf: return "__builtin_cexpf";
    case BI__builtin_cexpl: return "__builtin_cexpl";
    case BI__builtin_cimag: return "__builtin_cimag";
    case BI__builtin_cimagf: return "__builtin_cimagf";
    case BI__builtin_cimagl: return "__builtin_cimagl";
    case BI__builtin_conj: return "__builtin_conj";
    case BI__builtin_conjf: return "__builtin_conjf";
    case BI__builtin_conjl: return "__builtin_conjl";
    case BI__builtin_clog: return "__builtin_clog";
    case BI__builtin_clogf: return "__builtin_clogf";
    case BI__builtin_clogl: return "__builtin_clogl";
    case BI__builtin_cproj: return "__builtin_cproj";
    case BI__builtin_cprojf: return "__builtin_cprojf";
    case BI__builtin_cprojl: return "__builtin_cprojl";
    case BI__builtin_cpow: return "__builtin_cpow";
    case BI__builtin_cpowf: return "__builtin_cpowf";
    case BI__builtin_cpowl: return "__builtin_cpowl";
    case BI__builtin_creal: return "__builtin_creal";
    case BI__builtin_crealf: return "__builtin_crealf";
    case BI__builtin_creall: return "__builtin_creall";
    case BI__builtin_csin: return "__builtin_csin";
    case BI__builtin_csinf: return "__builtin_csinf";
    case BI__builtin_csinl: return "__builtin_csinl";
    case BI__builtin_csinh: return "__builtin_csinh";
    case BI__builtin_csinhf: return "__builtin_csinhf";
    case BI__builtin_csinhl: return "__builtin_csinhl";
    case BI__builtin_csqrt: return "__builtin_csqrt";
    case BI__builtin_csqrtf: return "__builtin_csqrtf";
    case BI__builtin_csqrtl: return "__builtin_csqrtl";
    case BI__builtin_ctan: return "__builtin_ctan";
    case BI__builtin_ctanf: return "__builtin_ctanf";
    case BI__builtin_ctanl: return "__builtin_ctanl";
    case BI__builtin_ctanh: return "__builtin_ctanh";
    case BI__builtin_ctanhf: return "__builtin_ctanhf";
    case BI__builtin_ctanhl: return "__builtin_ctanhl";
    case BI__builtin_isgreater: return "__builtin_isgreater";
    case BI__builtin_isgreaterequal: return "__builtin_isgreaterequal";
    case BI__builtin_isless: return "__builtin_isless";
    case BI__builtin_islessequal: return "__builtin_islessequal";
    case BI__builtin_islessgreater: return "__builtin_islessgreater";
    case BI__builtin_isunordered: return "__builtin_isunordered";
    case BI__builtin_fpclassify: return "__builtin_fpclassify";
    case BI__builtin_isfinite: return "__builtin_isfinite";
    case BI__builtin_isinf: return "__builtin_isinf";
    case BI__builtin_isinf_sign: return "__builtin_isinf_sign";
    case BI__builtin_isnan: return "__builtin_isnan";
    case BI__builtin_isnormal: return "__builtin_isnormal";
    case BI__builtin_signbit: return "__builtin_signbit";
    case BI__builtin_signbitf: return "__builtin_signbitf";
    case BI__builtin_signbitl: return "__builtin_signbitl";
    case BI__builtin_canonicalize: return "__builtin_canonicalize";
    case BI__builtin_canonicalizef: return "__builtin_canonicalizef";
    case BI__builtin_canonicalizef16: return "__builtin_canonicalizef16";
    case BI__builtin_canonicalizel: return "__builtin_canonicalizel";
    case BI__builtin_clzs: return "__builtin_clzs";
    case BI__builtin_clz: return "__builtin_clz";
    case BI__builtin_clzl: return "__builtin_clzl";
    case BI__builtin_clzll: return "__builtin_clzll";
    case BI__builtin_ctzs: return "__builtin_ctzs";
    case BI__builtin_ctz: return "__builtin_ctz";
    case BI__builtin_ctzl: return "__builtin_ctzl";
    case BI__builtin_ctzll: return "__builtin_ctzll";
    case BI__builtin_ffs: return "__builtin_ffs";
    case BI__builtin_ffsl: return "__builtin_ffsl";
    case BI__builtin_ffsll: return "__builtin_ffsll";
    case BI__builtin_parity: return "__builtin_parity";
    case BI__builtin_parityl: return "__builtin_parityl";
    case BI__builtin_parityll: return "__builtin_parityll";
    case BI__builtin_popcount: return "__builtin_popcount";
    case BI__builtin_popcountl: return "__builtin_popcountl";
    case BI__builtin_popcountll: return "__builtin_popcountll";
    case BI__builtin_clrsb: return "__builtin_clrsb";
    case BI__builtin_clrsbl: return "__builtin_clrsbl";
    case BI__builtin_clrsbll: return "__builtin_clrsbll";
    case BI__builtin_bswap16: return "__builtin_bswap16";
    case BI__builtin_bswap32: return "__builtin_bswap32";
    case BI__builtin_bswap64: return "__builtin_bswap64";
    case BI__builtin_bitreverse8: return "__builtin_bitreverse8";
    case BI__builtin_bitreverse16: return "__builtin_bitreverse16";
    case BI__builtin_bitreverse32: return "__builtin_bitreverse32";
    case BI__builtin_bitreverse64: return "__builtin_bitreverse64";
    case BI__builtin_rotateleft8: return "__builtin_rotateleft8";
    case BI__builtin_rotateleft16: return "__builtin_rotateleft16";
    case BI__builtin_rotateleft32: return "__builtin_rotateleft32";
    case BI__builtin_rotateleft64: return "__builtin_rotateleft64";
    case BI__builtin_rotateright8: return "__builtin_rotateright8";
    case BI__builtin_rotateright16: return "__builtin_rotateright16";
    case BI__builtin_rotateright32: return "__builtin_rotateright32";
    case BI__builtin_rotateright64: return "__builtin_rotateright64";
    case BI__builtin_calloc: return "__builtin_calloc";
    case BI__builtin_constant_p: return "__builtin_constant_p";
    case BI__builtin_classify_type: return "__builtin_classify_type";
    case BI__builtin___CFStringMakeConstantString: return "__builtin___CFStringMakeConstantString";
    case BI__builtin___NSStringMakeConstantString: return "__builtin___NSStringMakeConstantString";
    case BI__builtin_va_start: return "__builtin_va_start";
    case BI__builtin_va_end: return "__builtin_va_end";
    case BI__builtin_va_copy: return "__builtin_va_copy";
    case BI__builtin_stdarg_start: return "__builtin_stdarg_start";
    case BI__builtin_assume_aligned: return "__builtin_assume_aligned";
    case BI__builtin_bcmp: return "__builtin_bcmp";
    case BI__builtin_bcopy: return "__builtin_bcopy";
    case BI__builtin_bzero: return "__builtin_bzero";
    case BI__builtin_fprintf: return "__builtin_fprintf";
    case BI__builtin_free: return "__builtin_free";
    case BI__builtin_malloc: return "__builtin_malloc";
    case BI__builtin_memchr: return "__builtin_memchr";
    case BI__builtin_memcmp: return "__builtin_memcmp";
    case BI__builtin_memcpy: return "__builtin_memcpy";
    case BI__builtin_memcpy_inline: return "__builtin_memcpy_inline";
    case BI__builtin_memmove: return "__builtin_memmove";
    case BI__builtin_mempcpy: return "__builtin_mempcpy";
    case BI__builtin_memset: return "__builtin_memset";
    case BI__builtin_printf: return "__builtin_printf";
    case BI__builtin_stpcpy: return "__builtin_stpcpy";
    case BI__builtin_stpncpy: return "__builtin_stpncpy";
    case BI__builtin_strcasecmp: return "__builtin_strcasecmp";
    case BI__builtin_strcat: return "__builtin_strcat";
    case BI__builtin_strchr: return "__builtin_strchr";
    case BI__builtin_strcmp: return "__builtin_strcmp";
    case BI__builtin_strcpy: return "__builtin_strcpy";
    case BI__builtin_strcspn: return "__builtin_strcspn";
    case BI__builtin_strdup: return "__builtin_strdup";
    case BI__builtin_strlen: return "__builtin_strlen";
    case BI__builtin_strncasecmp: return "__builtin_strncasecmp";
    case BI__builtin_strncat: return "__builtin_strncat";
    case BI__builtin_strncmp: return "__builtin_strncmp";
    case BI__builtin_strncpy: return "__builtin_strncpy";
    case BI__builtin_strndup: return "__builtin_strndup";
    case BI__builtin_strpbrk: return "__builtin_strpbrk";
    case BI__builtin_strrchr: return "__builtin_strrchr";
    case BI__builtin_strspn: return "__builtin_strspn";
    case BI__builtin_strstr: return "__builtin_strstr";
    case BI__builtin_wcschr: return "__builtin_wcschr";
    case BI__builtin_wcscmp: return "__builtin_wcscmp";
    case BI__builtin_wcslen: return "__builtin_wcslen";
    case BI__builtin_wcsncmp: return "__builtin_wcsncmp";
    case BI__builtin_wmemchr: return "__builtin_wmemchr";
    case BI__builtin_wmemcmp: return "__builtin_wmemcmp";
    case BI__builtin_wmemcpy: return "__builtin_wmemcpy";
    case BI__builtin_wmemmove: return "__builtin_wmemmove";
    case BI__builtin_realloc: return "__builtin_realloc";
    case BI__builtin_return_address: return "__builtin_return_address";
    case BI__builtin_extract_return_addr: return "__builtin_extract_return_addr";
    case BI__builtin_frame_address: return "__builtin_frame_address";
    case BI__builtin___clear_cache: return "__builtin___clear_cache";
    case BI__builtin_setjmp: return "__builtin_setjmp";
    case BI__builtin_longjmp: return "__builtin_longjmp";
    case BI__builtin_unwind_init: return "__builtin_unwind_init";
    case BI__builtin_eh_return_data_regno: return "__builtin_eh_return_data_regno";
    case BI__builtin_snprintf: return "__builtin_snprintf";
    case BI__builtin_sprintf: return "__builtin_sprintf";
    case BI__builtin_vsnprintf: return "__builtin_vsnprintf";
    case BI__builtin_vsprintf: return "__builtin_vsprintf";
    case BI__builtin_thread_pointer: return "__builtin_thread_pointer";
    case BI__builtin_launder: return "__builtin_launder";
    case BI__builtin_eh_return: return "__builtin_eh_return";
    case BI__builtin_frob_return_addr: return "__builtin_frob_return_addr";
    case BI__builtin_dwarf_cfa: return "__builtin_dwarf_cfa";
    case BI__builtin_init_dwarf_reg_size_table: return "__builtin_init_dwarf_reg_size_table";
    case BI__builtin_dwarf_sp_column: return "__builtin_dwarf_sp_column";
    case BI__builtin_extend_pointer: return "__builtin_extend_pointer";
    case BI__builtin_object_size: return "__builtin_object_size";
    case BI__builtin_dynamic_object_size: return "__builtin_dynamic_object_size";
    case BI__builtin___memcpy_chk: return "__builtin___memcpy_chk";
    case BI__builtin___memccpy_chk: return "__builtin___memccpy_chk";
    case BI__builtin___memmove_chk: return "__builtin___memmove_chk";
    case BI__builtin___mempcpy_chk: return "__builtin___mempcpy_chk";
    case BI__builtin___memset_chk: return "__builtin___memset_chk";
    case BI__builtin___stpcpy_chk: return "__builtin___stpcpy_chk";
    case BI__builtin___strcat_chk: return "__builtin___strcat_chk";
    case BI__builtin___strcpy_chk: return "__builtin___strcpy_chk";
    case BI__builtin___strlcat_chk: return "__builtin___strlcat_chk";
    case BI__builtin___strlcpy_chk: return "__builtin___strlcpy_chk";
    case BI__builtin___strncat_chk: return "__builtin___strncat_chk";
    case BI__builtin___strncpy_chk: return "__builtin___strncpy_chk";
    case BI__builtin___stpncpy_chk: return "__builtin___stpncpy_chk";
    case BI__builtin___snprintf_chk: return "__builtin___snprintf_chk";
    case BI__builtin___sprintf_chk: return "__builtin___sprintf_chk";
    case BI__builtin___vsnprintf_chk: return "__builtin___vsnprintf_chk";
    case BI__builtin___vsprintf_chk: return "__builtin___vsprintf_chk";
    case BI__builtin___fprintf_chk: return "__builtin___fprintf_chk";
    case BI__builtin___printf_chk: return "__builtin___printf_chk";
    case BI__builtin___vfprintf_chk: return "__builtin___vfprintf_chk";
    case BI__builtin___vprintf_chk: return "__builtin___vprintf_chk";
    case BI__builtin_unpredictable: return "__builtin_unpredictable";
    case BI__builtin_expect: return "__builtin_expect";
    case BI__builtin_expect_with_probability: return "__builtin_expect_with_probability";
    case BI__builtin_prefetch: return "__builtin_prefetch";
    case BI__builtin_readcyclecounter: return "__builtin_readcyclecounter";
    case BI__builtin_trap: return "__builtin_trap";
    case BI__builtin_debugtrap: return "__builtin_debugtrap";
    case BI__builtin_unreachable: return "__builtin_unreachable";
    case BI__builtin_shufflevector: return "__builtin_shufflevector";
    case BI__builtin_convertvector: return "__builtin_convertvector";
    case BI__builtin_alloca: return "__builtin_alloca";
    case BI__builtin_alloca_uninitialized: return "__builtin_alloca_uninitialized";
    case BI__builtin_alloca_with_align: return "__builtin_alloca_with_align";
    case BI__builtin_alloca_with_align_uninitialized: return "__builtin_alloca_with_align_uninitialized";
    case BI__builtin_call_with_static_chain: return "__builtin_call_with_static_chain";
    case BI__builtin_elementwise_abs: return "__builtin_elementwise_abs";
    case BI__builtin_elementwise_max: return "__builtin_elementwise_max";
    case BI__builtin_elementwise_min: return "__builtin_elementwise_min";
    case BI__builtin_elementwise_ceil: return "__builtin_elementwise_ceil";
    case BI__builtin_elementwise_floor: return "__builtin_elementwise_floor";
    case BI__builtin_elementwise_roundeven: return "__builtin_elementwise_roundeven";
    case BI__builtin_elementwise_trunc: return "__builtin_elementwise_trunc";
    case BI__builtin_reduce_max: return "__builtin_reduce_max";
    case BI__builtin_reduce_min: return "__builtin_reduce_min";
    case BI__builtin_reduce_xor: return "__builtin_reduce_xor";
    case BI__builtin_reduce_or: return "__builtin_reduce_or";
    case BI__builtin_reduce_and: return "__builtin_reduce_and";
    case BI__builtin_matrix_transpose: return "__builtin_matrix_transpose";
    case BI__builtin_matrix_column_major_load: return "__builtin_matrix_column_major_load";
    case BI__builtin_matrix_column_major_store: return "__builtin_matrix_column_major_store";
    case BI__sync_fetch_and_add: return "__sync_fetch_and_add";
    case BI__sync_fetch_and_add_1: return "__sync_fetch_and_add_1";
    case BI__sync_fetch_and_add_2: return "__sync_fetch_and_add_2";
    case BI__sync_fetch_and_add_4: return "__sync_fetch_and_add_4";
    case BI__sync_fetch_and_add_8: return "__sync_fetch_and_add_8";
    case BI__sync_fetch_and_add_16: return "__sync_fetch_and_add_16";
    case BI__sync_fetch_and_sub: return "__sync_fetch_and_sub";
    case BI__sync_fetch_and_sub_1: return "__sync_fetch_and_sub_1";
    case BI__sync_fetch_and_sub_2: return "__sync_fetch_and_sub_2";
    case BI__sync_fetch_and_sub_4: return "__sync_fetch_and_sub_4";
    case BI__sync_fetch_and_sub_8: return "__sync_fetch_and_sub_8";
    case BI__sync_fetch_and_sub_16: return "__sync_fetch_and_sub_16";
    case BI__sync_fetch_and_or: return "__sync_fetch_and_or";
    case BI__sync_fetch_and_or_1: return "__sync_fetch_and_or_1";
    case BI__sync_fetch_and_or_2: return "__sync_fetch_and_or_2";
    case BI__sync_fetch_and_or_4: return "__sync_fetch_and_or_4";
    case BI__sync_fetch_and_or_8: return "__sync_fetch_and_or_8";
    case BI__sync_fetch_and_or_16: return "__sync_fetch_and_or_16";
    case BI__sync_fetch_and_and: return "__sync_fetch_and_and";
    case BI__sync_fetch_and_and_1: return "__sync_fetch_and_and_1";
    case BI__sync_fetch_and_and_2: return "__sync_fetch_and_and_2";
    case BI__sync_fetch_and_and_4: return "__sync_fetch_and_and_4";
    case BI__sync_fetch_and_and_8: return "__sync_fetch_and_and_8";
    case BI__sync_fetch_and_and_16: return "__sync_fetch_and_and_16";
    case BI__sync_fetch_and_xor: return "__sync_fetch_and_xor";
    case BI__sync_fetch_and_xor_1: return "__sync_fetch_and_xor_1";
    case BI__sync_fetch_and_xor_2: return "__sync_fetch_and_xor_2";
    case BI__sync_fetch_and_xor_4: return "__sync_fetch_and_xor_4";
    case BI__sync_fetch_and_xor_8: return "__sync_fetch_and_xor_8";
    case BI__sync_fetch_and_xor_16: return "__sync_fetch_and_xor_16";
    case BI__sync_fetch_and_nand: return "__sync_fetch_and_nand";
    case BI__sync_fetch_and_nand_1: return "__sync_fetch_and_nand_1";
    case BI__sync_fetch_and_nand_2: return "__sync_fetch_and_nand_2";
    case BI__sync_fetch_and_nand_4: return "__sync_fetch_and_nand_4";
    case BI__sync_fetch_and_nand_8: return "__sync_fetch_and_nand_8";
    case BI__sync_fetch_and_nand_16: return "__sync_fetch_and_nand_16";
    case BI__sync_add_and_fetch: return "__sync_add_and_fetch";
    case BI__sync_add_and_fetch_1: return "__sync_add_and_fetch_1";
    case BI__sync_add_and_fetch_2: return "__sync_add_and_fetch_2";
    case BI__sync_add_and_fetch_4: return "__sync_add_and_fetch_4";
    case BI__sync_add_and_fetch_8: return "__sync_add_and_fetch_8";
    case BI__sync_add_and_fetch_16: return "__sync_add_and_fetch_16";
    case BI__sync_sub_and_fetch: return "__sync_sub_and_fetch";
    case BI__sync_sub_and_fetch_1: return "__sync_sub_and_fetch_1";
    case BI__sync_sub_and_fetch_2: return "__sync_sub_and_fetch_2";
    case BI__sync_sub_and_fetch_4: return "__sync_sub_and_fetch_4";
    case BI__sync_sub_and_fetch_8: return "__sync_sub_and_fetch_8";
    case BI__sync_sub_and_fetch_16: return "__sync_sub_and_fetch_16";
    case BI__sync_or_and_fetch: return "__sync_or_and_fetch";
    case BI__sync_or_and_fetch_1: return "__sync_or_and_fetch_1";
    case BI__sync_or_and_fetch_2: return "__sync_or_and_fetch_2";
    case BI__sync_or_and_fetch_4: return "__sync_or_and_fetch_4";
    case BI__sync_or_and_fetch_8: return "__sync_or_and_fetch_8";
    case BI__sync_or_and_fetch_16: return "__sync_or_and_fetch_16";
    case BI__sync_and_and_fetch: return "__sync_and_and_fetch";
    case BI__sync_and_and_fetch_1: return "__sync_and_and_fetch_1";
    case BI__sync_and_and_fetch_2: return "__sync_and_and_fetch_2";
    case BI__sync_and_and_fetch_4: return "__sync_and_and_fetch_4";
    case BI__sync_and_and_fetch_8: return "__sync_and_and_fetch_8";
    case BI__sync_and_and_fetch_16: return "__sync_and_and_fetch_16";
    case BI__sync_xor_and_fetch: return "__sync_xor_and_fetch";
    case BI__sync_xor_and_fetch_1: return "__sync_xor_and_fetch_1";
    case BI__sync_xor_and_fetch_2: return "__sync_xor_and_fetch_2";
    case BI__sync_xor_and_fetch_4: return "__sync_xor_and_fetch_4";
    case BI__sync_xor_and_fetch_8: return "__sync_xor_and_fetch_8";
    case BI__sync_xor_and_fetch_16: return "__sync_xor_and_fetch_16";
    case BI__sync_nand_and_fetch: return "__sync_nand_and_fetch";
    case BI__sync_nand_and_fetch_1: return "__sync_nand_and_fetch_1";
    case BI__sync_nand_and_fetch_2: return "__sync_nand_and_fetch_2";
    case BI__sync_nand_and_fetch_4: return "__sync_nand_and_fetch_4";
    case BI__sync_nand_and_fetch_8: return "__sync_nand_and_fetch_8";
    case BI__sync_nand_and_fetch_16: return "__sync_nand_and_fetch_16";
    case BI__sync_bool_compare_and_swap: return "__sync_bool_compare_and_swap";
    case BI__sync_bool_compare_and_swap_1: return "__sync_bool_compare_and_swap_1";
    case BI__sync_bool_compare_and_swap_2: return "__sync_bool_compare_and_swap_2";
    case BI__sync_bool_compare_and_swap_4: return "__sync_bool_compare_and_swap_4";
    case BI__sync_bool_compare_and_swap_8: return "__sync_bool_compare_and_swap_8";
    case BI__sync_bool_compare_and_swap_16: return "__sync_bool_compare_and_swap_16";
    case BI__sync_val_compare_and_swap: return "__sync_val_compare_and_swap";
    case BI__sync_val_compare_and_swap_1: return "__sync_val_compare_and_swap_1";
    case BI__sync_val_compare_and_swap_2: return "__sync_val_compare_and_swap_2";
    case BI__sync_val_compare_and_swap_4: return "__sync_val_compare_and_swap_4";
    case BI__sync_val_compare_and_swap_8: return "__sync_val_compare_and_swap_8";
    case BI__sync_val_compare_and_swap_16: return "__sync_val_compare_and_swap_16";
    case BI__sync_lock_test_and_set: return "__sync_lock_test_and_set";
    case BI__sync_lock_test_and_set_1: return "__sync_lock_test_and_set_1";
    case BI__sync_lock_test_and_set_2: return "__sync_lock_test_and_set_2";
    case BI__sync_lock_test_and_set_4: return "__sync_lock_test_and_set_4";
    case BI__sync_lock_test_and_set_8: return "__sync_lock_test_and_set_8";
    case BI__sync_lock_test_and_set_16: return "__sync_lock_test_and_set_16";
    case BI__sync_lock_release: return "__sync_lock_release";
    case BI__sync_lock_release_1: return "__sync_lock_release_1";
    case BI__sync_lock_release_2: return "__sync_lock_release_2";
    case BI__sync_lock_release_4: return "__sync_lock_release_4";
    case BI__sync_lock_release_8: return "__sync_lock_release_8";
    case BI__sync_lock_release_16: return "__sync_lock_release_16";
    case BI__sync_swap: return "__sync_swap";
    case BI__sync_swap_1: return "__sync_swap_1";
    case BI__sync_swap_2: return "__sync_swap_2";
    case BI__sync_swap_4: return "__sync_swap_4";
    case BI__sync_swap_8: return "__sync_swap_8";
    case BI__sync_swap_16: return "__sync_swap_16";
    case BI__c11_atomic_init: return "__c11_atomic_init";
    case BI__c11_atomic_load: return "__c11_atomic_load";
    case BI__c11_atomic_store: return "__c11_atomic_store";
    case BI__c11_atomic_exchange: return "__c11_atomic_exchange";
    case BI__c11_atomic_compare_exchange_strong: return "__c11_atomic_compare_exchange_strong";
    case BI__c11_atomic_compare_exchange_weak: return "__c11_atomic_compare_exchange_weak";
    case BI__c11_atomic_fetch_add: return "__c11_atomic_fetch_add";
    case BI__c11_atomic_fetch_sub: return "__c11_atomic_fetch_sub";
    case BI__c11_atomic_fetch_and: return "__c11_atomic_fetch_and";
    case BI__c11_atomic_fetch_or: return "__c11_atomic_fetch_or";
    case BI__c11_atomic_fetch_xor: return "__c11_atomic_fetch_xor";
    case BI__c11_atomic_fetch_nand: return "__c11_atomic_fetch_nand";
    case BI__c11_atomic_fetch_max: return "__c11_atomic_fetch_max";
    case BI__c11_atomic_fetch_min: return "__c11_atomic_fetch_min";
    case BI__c11_atomic_thread_fence: return "__c11_atomic_thread_fence";
    case BI__c11_atomic_signal_fence: return "__c11_atomic_signal_fence";
    case BI__c11_atomic_is_lock_free: return "__c11_atomic_is_lock_free";
    case BI__atomic_load: return "__atomic_load";
    case BI__atomic_load_n: return "__atomic_load_n";
    case BI__atomic_store: return "__atomic_store";
    case BI__atomic_store_n: return "__atomic_store_n";
    case BI__atomic_exchange: return "__atomic_exchange";
    case BI__atomic_exchange_n: return "__atomic_exchange_n";
    case BI__atomic_compare_exchange: return "__atomic_compare_exchange";
    case BI__atomic_compare_exchange_n: return "__atomic_compare_exchange_n";
    case BI__atomic_fetch_add: return "__atomic_fetch_add";
    case BI__atomic_fetch_sub: return "__atomic_fetch_sub";
    case BI__atomic_fetch_and: return "__atomic_fetch_and";
    case BI__atomic_fetch_or: return "__atomic_fetch_or";
    case BI__atomic_fetch_xor: return "__atomic_fetch_xor";
    case BI__atomic_fetch_nand: return "__atomic_fetch_nand";
    case BI__atomic_add_fetch: return "__atomic_add_fetch";
    case BI__atomic_sub_fetch: return "__atomic_sub_fetch";
    case BI__atomic_and_fetch: return "__atomic_and_fetch";
    case BI__atomic_or_fetch: return "__atomic_or_fetch";
    case BI__atomic_xor_fetch: return "__atomic_xor_fetch";
    case BI__atomic_max_fetch: return "__atomic_max_fetch";
    case BI__atomic_min_fetch: return "__atomic_min_fetch";
    case BI__atomic_nand_fetch: return "__atomic_nand_fetch";
    case BI__atomic_test_and_set: return "__atomic_test_and_set";
    case BI__atomic_clear: return "__atomic_clear";
    case BI__atomic_thread_fence: return "__atomic_thread_fence";
    case BI__atomic_signal_fence: return "__atomic_signal_fence";
    case BI__atomic_always_lock_free: return "__atomic_always_lock_free";
    case BI__atomic_is_lock_free: return "__atomic_is_lock_free";
    case BI__atomic_fetch_min: return "__atomic_fetch_min";
    case BI__atomic_fetch_max: return "__atomic_fetch_max";
    case BI__hip_atomic_load: return "__hip_atomic_load";
    case BI__hip_atomic_store: return "__hip_atomic_store";
    case BI__hip_atomic_compare_exchange_weak: return "__hip_atomic_compare_exchange_weak";
    case BI__hip_atomic_compare_exchange_strong: return "__hip_atomic_compare_exchange_strong";
    case BI__hip_atomic_exchange: return "__hip_atomic_exchange";
    case BI__hip_atomic_fetch_add: return "__hip_atomic_fetch_add";
    case BI__hip_atomic_fetch_and: return "__hip_atomic_fetch_and";
    case BI__hip_atomic_fetch_or: return "__hip_atomic_fetch_or";
    case BI__hip_atomic_fetch_xor: return "__hip_atomic_fetch_xor";
    case BI__hip_atomic_fetch_min: return "__hip_atomic_fetch_min";
    case BI__hip_atomic_fetch_max: return "__hip_atomic_fetch_max";
    case BI__sync_synchronize: return "__sync_synchronize";
    case BI__sync_fetch_and_min: return "__sync_fetch_and_min";
    case BI__sync_fetch_and_max: return "__sync_fetch_and_max";
    case BI__sync_fetch_and_umin: return "__sync_fetch_and_umin";
    case BI__sync_fetch_and_umax: return "__sync_fetch_and_umax";
    case BI__builtin_abort: return "__builtin_abort";
    case BI__builtin_index: return "__builtin_index";
    case BI__builtin_rindex: return "__builtin_rindex";
    case BI__warn_memset_zero_len: return "__warn_memset_zero_len";
    case BI__builtin_add_overflow: return "__builtin_add_overflow";
    case BI__builtin_sub_overflow: return "__builtin_sub_overflow";
    case BI__builtin_mul_overflow: return "__builtin_mul_overflow";
    case BI__builtin_uadd_overflow: return "__builtin_uadd_overflow";
    case BI__builtin_uaddl_overflow: return "__builtin_uaddl_overflow";
    case BI__builtin_uaddll_overflow: return "__builtin_uaddll_overflow";
    case BI__builtin_usub_overflow: return "__builtin_usub_overflow";
    case BI__builtin_usubl_overflow: return "__builtin_usubl_overflow";
    case BI__builtin_usubll_overflow: return "__builtin_usubll_overflow";
    case BI__builtin_umul_overflow: return "__builtin_umul_overflow";
    case BI__builtin_umull_overflow: return "__builtin_umull_overflow";
    case BI__builtin_umulll_overflow: return "__builtin_umulll_overflow";
    case BI__builtin_sadd_overflow: return "__builtin_sadd_overflow";
    case BI__builtin_saddl_overflow: return "__builtin_saddl_overflow";
    case BI__builtin_saddll_overflow: return "__builtin_saddll_overflow";
    case BI__builtin_ssub_overflow: return "__builtin_ssub_overflow";
    case BI__builtin_ssubl_overflow: return "__builtin_ssubl_overflow";
    case BI__builtin_ssubll_overflow: return "__builtin_ssubll_overflow";
    case BI__builtin_smul_overflow: return "__builtin_smul_overflow";
    case BI__builtin_smull_overflow: return "__builtin_smull_overflow";
    case BI__builtin_smulll_overflow: return "__builtin_smulll_overflow";
    case BI__builtin_addressof: return "__builtin_addressof";
    case BI__builtin_function_start: return "__builtin_function_start";
    case BI__builtin_operator_new: return "__builtin_operator_new";
    case BI__builtin_operator_delete: return "__builtin_operator_delete";
    case BI__builtin_char_memchr: return "__builtin_char_memchr";
    case BI__builtin_dump_struct: return "__builtin_dump_struct";
    case BI__builtin_preserve_access_index: return "__builtin_preserve_access_index";
    case BI__builtin_is_aligned: return "__builtin_is_aligned";
    case BI__builtin_align_up: return "__builtin_align_up";
    case BI__builtin_align_down: return "__builtin_align_down";
    case BI__builtin___get_unsafe_stack_start: return "__builtin___get_unsafe_stack_start";
    case BI__builtin___get_unsafe_stack_bottom: return "__builtin___get_unsafe_stack_bottom";
    case BI__builtin___get_unsafe_stack_top: return "__builtin___get_unsafe_stack_top";
    case BI__builtin___get_unsafe_stack_ptr: return "__builtin___get_unsafe_stack_ptr";
    case BI__builtin_nontemporal_store: return "__builtin_nontemporal_store";
    case BI__builtin_nontemporal_load: return "__builtin_nontemporal_load";
    case BI__builtin_os_log_format_buffer_size: return "__builtin_os_log_format_buffer_size";
    case BI__builtin_os_log_format: return "__builtin_os_log_format";
    case BI__xray_customevent: return "__xray_customevent";
    case BI__xray_typedevent: return "__xray_typedevent";
    case BI__builtin_ms_va_start: return "__builtin_ms_va_start";
    case BI__builtin_ms_va_end: return "__builtin_ms_va_end";
    case BI__builtin_ms_va_copy: return "__builtin_ms_va_copy";
    case BI__builtin_annotation: return "__builtin_annotation";
    case BI__builtin_assume: return "__builtin_assume";
    case BI__builtin_addcb: return "__builtin_addcb";
    case BI__builtin_addcs: return "__builtin_addcs";
    case BI__builtin_addc: return "__builtin_addc";
    case BI__builtin_addcl: return "__builtin_addcl";
    case BI__builtin_addcll: return "__builtin_addcll";
    case BI__builtin_subcb: return "__builtin_subcb";
    case BI__builtin_subcs: return "__builtin_subcs";
    case BI__builtin_subc: return "__builtin_subc";
    case BI__builtin_subcl: return "__builtin_subcl";
    case BI__builtin_subcll: return "__builtin_subcll";
    default: return "(unknown token)";
  }
}
