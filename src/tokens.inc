// C tokens -- generated by gen.py
enum Token: unsigned char {
  TNul,
  TNewLine,
  TSpace,
  TNot,
  TDoubleQ,
  TBash,
  TDolor,
  TPercent,
  TBitAnd,
  TSignleQ,
  TLbracket,
  TRbracket,
  TMul,
  TAdd,
  TComma,
  TDash,
  TDot,
  TSlash,
  TColon,
  TSemicolon,
  TLt,
  TAssign,
  TGt,
  TQuestionMark,
  TMouse,
  TLSquareBrackets,
  TBackslash,
  TRSquareBrackets,
  TXor,
  TUnderscore,
  TGraveAccent,
  TLcurlyBracket,
  TBitOr,
  TRcurlyBracket,
  TBitNot,
  TAddAdd,
  TSubSub,
  TArrow,
  Tshl,
  Tshr,
  TGe,
  TLe,
  TNe,
  TEq,
  TLogicalOr,
  TLogicalAnd,
  TAsignAdd,
  TAsignSub,
  TAsignMul,
  TAsignDiv,
  TAsignRem,
  TAsignShl,
  TAsignShr,
  TAsignBitAnd,
  TAsignBitOr,
  TAsignBitXor,
  TEllipsis2,
  TEllipsis,
  TCharLit,
  TStringLit,
  PPlaceholder,
  PPSharp,
  PPNumber,
  PPSharpSharp,
  PPMacroPop,
  PPMacroTraceLoc,
  TEOF,
  Kextern,
  Kshort,
  Kregister,
  K_Thread_local,
  Kstatic,
  Kauto,
  Kconstexpr,
  Kinline,
  Ktypedef,
  K_Noreturn,
  K_Decimal32,
  K_Decimal128,
  K_Decimal64,
  K__int128,
  K_Float16,
  K_Accum,
  K_Fract,
  K_Sat,
  K__float128,
  K__bf16,
  Khalf,
  K__ibm128,
  K__thread,
  K__auto_type,
  K_Imaginary,
  K_Complex,
  K_Atomic,
  K_Bool,
  Kunion,
  Kstruct,
  Kenum,
  Kunsigned,
  Ksigned,
  Kvoid,
  Kint,
  Kchar,
  Klong,
  Kfloat,
  Kdouble,
  Ktypeof_unqual,
  Ktypeof,
  K_BitInt,
  K_Alignas,
  Kconst,
  Krestrict,
  Kvolatile,
  K__func__,
  K__declspec,
  K__attribute,
  K__builtin_choose_expr,
  K__builtin_offsetof,
  K__builtin_FILE,
  K__builtin_FUNCTION,
  K__builtin_LINE,
  K__builtin_COLUMN,
  K__builtin_types_compatible_p,
  K__builtin_va_arg,
  K__builtin_bit_cast,
  K__builtin_available,
  K__cdecl,
  K__stdcall,
  K__fastcall,
  K__thiscall,
  K__regcall,
  K__vectorcall,
  K__pascal,
  K__PRETTY_FUNCTION__,
  K__extension__,
  K__real,
  K__imag,
  K__label__,
  Kasm,
  Knullptr,
  Ktrue,
  Kfalse,
  K__objc_yes,
  K__objc_no,
  Kreturn,
  Kfor,
  Kcase,
  Kswitch,
  Kgoto,
  Kdefault,
  Kif,
  Kelse,
  Kdo,
  Ksizeof,
  Kcontinue,
  Kbreak,
  Kwhile,
  K_Alignof,
  K_Static_assert,
  K_Generic,
  TIdentifier,
  PPIdent,
  PP_main,
  PP__VA_ARGS__,
  PP__LINE__,
  PP__FILE__,
  PP__DATE__,
  PP__TIME__,
  PP__COUNTER__,
  PP_defined,
  PP_Pragma,
  PPifdef,
  PPifndef,
  PPelif,
  PPendif,
  PPdefine,
  PPundef,
  PPline,
  PPinclude,
  PPwarning,
  PPerror,
  PPpragma
};
static const char *show(Token o){
  switch(o) {
    case Kextern: return "extern";
    case Kshort: return "short";
    case Kregister: return "register";
    case K_Thread_local: return "_Thread_local";
    case Kstatic: return "static";
    case Kauto: return "auto";
    case Kconstexpr: return "constexpr";
    case Kinline: return "inline";
    case Ktypedef: return "typedef";
    case K_Noreturn: return "_Noreturn";
    case K_Decimal32: return "_Decimal32";
    case K_Decimal128: return "_Decimal128";
    case K_Decimal64: return "_Decimal64";
    case K__int128: return "__int128";
    case K_Float16: return "_Float16";
    case K_Accum: return "_Accum";
    case K_Fract: return "_Fract";
    case K_Sat: return "_Sat";
    case K__float128: return "__float128";
    case K__bf16: return "__bf16";
    case Khalf: return "half";
    case K__ibm128: return "__ibm128";
    case K__thread: return "__thread";
    case K__auto_type: return "__auto_type";
    case K_Imaginary: return "_Imaginary";
    case K_Complex: return "_Complex";
    case K_Atomic: return "_Atomic";
    case K_Bool: return "_Bool";
    case Kunion: return "union";
    case Kstruct: return "struct";
    case Kenum: return "enum";
    case Kunsigned: return "unsigned";
    case Ksigned: return "signed";
    case Kvoid: return "void";
    case Kint: return "int";
    case Kchar: return "char";
    case Klong: return "long";
    case Kfloat: return "float";
    case Kdouble: return "double";
    case Ktypeof_unqual: return "typeof_unqual";
    case Ktypeof: return "typeof";
    case K_BitInt: return "_BitInt";
    case K_Alignas: return "_Alignas";
    case Kconst: return "const";
    case Krestrict: return "restrict";
    case Kvolatile: return "volatile";
    case K__func__: return "__func__";
    case K__declspec: return "__declspec";
    case K__attribute: return "__attribute";
    case K__builtin_choose_expr: return "__builtin_choose_expr";
    case K__builtin_offsetof: return "__builtin_offsetof";
    case K__builtin_FILE: return "__builtin_FILE";
    case K__builtin_FUNCTION: return "__builtin_FUNCTION";
    case K__builtin_LINE: return "__builtin_LINE";
    case K__builtin_COLUMN: return "__builtin_COLUMN";
    case K__builtin_types_compatible_p: return "__builtin_types_compatible_p";
    case K__builtin_va_arg: return "__builtin_va_arg";
    case K__builtin_bit_cast: return "__builtin_bit_cast";
    case K__builtin_available: return "__builtin_available";
    case K__cdecl: return "__cdecl";
    case K__stdcall: return "__stdcall";
    case K__fastcall: return "__fastcall";
    case K__thiscall: return "__thiscall";
    case K__regcall: return "__regcall";
    case K__vectorcall: return "__vectorcall";
    case K__pascal: return "__pascal";
    case K__PRETTY_FUNCTION__: return "__PRETTY_FUNCTION__";
    case K__extension__: return "__extension__";
    case K__real: return "__real";
    case K__imag: return "__imag";
    case K__label__: return "__label__";
    case Kasm: return "asm";
    case Knullptr: return "nullptr";
    case Ktrue: return "true";
    case Kfalse: return "false";
    case K__objc_yes: return "__objc_yes";
    case K__objc_no: return "__objc_no";
    case Kreturn: return "return";
    case Kfor: return "for";
    case Kcase: return "case";
    case Kswitch: return "switch";
    case Kgoto: return "goto";
    case Kdefault: return "default";
    case Kif: return "if";
    case Kelse: return "else";
    case Kdo: return "do";
    case Ksizeof: return "sizeof";
    case Kcontinue: return "continue";
    case Kbreak: return "break";
    case Kwhile: return "while";
    case K_Alignof: return "_Alignof";
    case K_Static_assert: return "_Static_assert";
    case K_Generic: return "_Generic";
    case TIdentifier: return "<TIdentifier>";
    case PPIdent: return "<PPIdent>";
    case PP_main: return "main";
    case PP__VA_ARGS__: return "__VA_ARGS__";
    case PP__LINE__: return "__LINE__";
    case PP__FILE__: return "__FILE__";
    case PP__DATE__: return "__DATE__";
    case PP__TIME__: return "__TIME__";
    case PP__COUNTER__: return "__COUNTER__";
    case PP_defined: return "defined";
    case PP_Pragma: return "_Pragma";
    case PPifdef: return "ifdef";
    case PPifndef: return "ifndef";
    case PPelif: return "elif";
    case PPendif: return "endif";
    case PPdefine: return "define";
    case PPundef: return "undef";
    case PPline: return "line";
    case PPinclude: return "include";
    case PPwarning: return "warning";
    case PPerror: return "error";
    case PPpragma: return "pragma";
    case TNul: return "(null)";
    case TNewLine: return "(new-line)";
    case TSpace: return "(space)";
    case TNot: return "!";
    case TDoubleQ: return "\"";
    case TBash: return "~";
    case TDolor: return "$";
    case TPercent: return "%";
    case TBitAnd: return "&";
    case TSignleQ: return "'";
    case TLbracket: return "(";
    case TRbracket: return ")";
    case TMul: return "*";
    case TAdd: return "+";
    case TComma: return ",";
    case TDash: return "-";
    case TDot: return ".";
    case TSlash: return "/";
    case TColon: return ":";
    case TSemicolon: return ";";
    case TLt: return "<";
    case TAssign: return "=";
    case TGt: return ">";
    case TQuestionMark: return "?";
    case TMouse: return "@";
    case TLSquareBrackets: return "[";
    case TBackslash: return "\\";
    case TRSquareBrackets: return "]";
    case TXor: return "^";
    case TUnderscore: return "_";
    case TGraveAccent: return "`";
    case TLcurlyBracket: return "{";
    case TBitOr: return "|";
    case TRcurlyBracket: return "}";
    case TBitNot: return "~";
    case TAddAdd: return "++";
    case TSubSub: return "--";
    case TArrow: return "->";
    case Tshl: return "<<";
    case Tshr: return ">>";
    case TGe: return ">=";
    case TLe: return "<=";
    case TNe: return "!=";
    case TEq: return "==";
    case TLogicalOr: return "||";
    case TLogicalAnd: return "&&";
    case TAsignAdd: return "+=";
    case TAsignSub: return "-=";
    case TAsignMul: return "*=";
    case TAsignDiv: return "/=";
    case TAsignRem: return "%=";
    case TAsignShl: return "<<=";
    case TAsignShr: return ">>=";
    case TAsignBitAnd: return "&=";
    case TAsignBitOr: return "|=";
    case TAsignBitXor: return "^=";
    case TEllipsis2: return "..";
    case TEllipsis: return "...";
    case TCharLit: return "<char>";
    case TStringLit: return "<string>";
    case PPlaceholder: return "<placeholder>";
    case PPSharp: return "#";
    case PPNumber: return "<pp-number>";
    case PPSharpSharp: return "##";
    case PPMacroPop: return "<macro-pop>";
    case PPMacroTraceLoc: return "<macro-trace-loc>";
    case TEOF: return "<EOF>";
    default: return "(unknown token)";
  }
}
