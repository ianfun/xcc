// C types -- generated by gen.py
enum CTypeKind: uint8_t {
    TYPRIM,
    TYPOINTER,
    TYTAG,
    TYBITFIELD,
    TYARRAY,
    TYFUNCTION,
    TYVLA,
    TYBITINT
};

#include "CType.cpp"
    union alignas(void*) {
    struct alignas(void*) {
        CType p;
    };
    struct alignas(void*) {
        unsigned idx;
        enum TagKind tag;
        IdentRef tag_name;
        TagDecl tag_decl;
    };
    struct alignas(void*) {
        CType bittype;
        unsigned bitsize;
        unsigned bitoffset;
    };
    struct alignas(void*) {
        CType arrtype;
        bool hassize;
        unsigned arrsize;
    };
    struct alignas(void*) {
        CType ret;
        xvector<Param> params;
        bool isVarArg;
    };
    struct alignas(void*) {
        CType vla_arraytype;
        Expr vla_expr;
    };
    struct alignas(void*) {
        CType bitint_base;
        unsigned bits;
    };
    };
};
struct PrimType {
    uint64_t tags;
    };
struct PointerType{
    uint64_t tags;
    struct alignas(void*) {
        CType p;
    };
};
struct TagType{
    uint64_t tags;
    struct alignas(void*) {
        unsigned idx;
        enum TagKind tag;
        IdentRef tag_name;
        TagDecl tag_decl;
    };
};
struct BitfieldType{
    uint64_t tags;
    struct alignas(void*) {
        CType bittype;
        unsigned bitsize;
        unsigned bitoffset;
    };
};
struct ArrayType{
    uint64_t tags;
    struct alignas(void*) {
        CType arrtype;
        bool hassize;
        unsigned arrsize;
    };
};
struct FunctionType{
    uint64_t tags;
    struct alignas(void*) {
        CType ret;
        xvector<Param> params;
        bool isVarArg;
    };
};
struct VlaType{
    uint64_t tags;
    struct alignas(void*) {
        CType vla_arraytype;
        Expr vla_expr;
    };
};
struct BitintType{
    uint64_t tags;
    struct alignas(void*) {
        CType bitint_base;
        unsigned bits;
    };
};
static size_t ctype_size_map[] = {
    sizeof(PrimType),
    sizeof(PointerType),
    sizeof(TagType),
    sizeof(BitfieldType),
    sizeof(ArrayType),
    sizeof(FunctionType),
    sizeof(VlaType),
    sizeof(BitintType)
};
static constexpr size_t ctype_max_size = std::max({sizeof(PrimType), sizeof(PointerType), sizeof(TagType), sizeof(BitfieldType), sizeof(ArrayType), sizeof(FunctionType), sizeof(VlaType), sizeof(BitintType)});
