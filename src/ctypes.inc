// C types -- generated by gen.py
enum CTypeKind: uint8_t {
  TYPRIM,
  TYPOINTER,
  TYSTRUCT,
  TYUNION,
  TYENUM,
  TYBITFIELD,
  TYARRAY,
  TYFUNCTION,
  TYINCOMPLETE
};

#include "CType.cpp"
  union {
  struct {
      CType p;
  };
  struct {
      size_t sidx;
      IdentRef sname;
      xvector<Declator> selems;
  };
  struct {
      size_t uidx;
      IdentRef uname;
      xvector<Declator> uelems;
  };
  struct {
      size_t eidx;
      IdentRef ename;
      xvector<EnumPair> eelems;
  };
  struct {
      CType bittype;
      unsigned bitsize;
  };
  struct {
      Expr vla;
      CType arrtype;
      bool hassize;
      unsigned arrsize;
  };
  struct {
      CType ret;
      xvector<Param> params;
      bool isVarArg;
  };
  struct {
      enum TagType tag;
      IdentRef name;
      size_t iidx;
  };
  };
};
struct PrimType {
  uint64_t tags;
};
struct PointerType{
  uint64_t tags;
  struct {
    CType p;
  };
};
struct StructType{
  uint64_t tags;
  struct {
    size_t sidx;
    IdentRef sname;
    xvector<Declator> selems;
  };
};
struct UnionType{
  uint64_t tags;
  struct {
    size_t uidx;
    IdentRef uname;
    xvector<Declator> uelems;
  };
};
struct EnumType{
  uint64_t tags;
  struct {
    size_t eidx;
    IdentRef ename;
    xvector<EnumPair> eelems;
  };
};
struct BitfieldType{
  uint64_t tags;
  struct {
    CType bittype;
    unsigned bitsize;
  };
};
struct ArrayType{
  uint64_t tags;
  struct {
    Expr vla;
    CType arrtype;
    bool hassize;
    unsigned arrsize;
  };
};
struct FunctionType{
  uint64_t tags;
  struct {
    CType ret;
    xvector<Param> params;
    bool isVarArg;
  };
};
struct IncompleteType{
  uint64_t tags;
  struct {
    enum TagType tag;
    IdentRef name;
    size_t iidx;
  };
};
static size_t ctype_size_map[] = {
    sizeof(PrimType),
    sizeof(PointerType),
    sizeof(StructType),
    sizeof(UnionType),
    sizeof(EnumType),
    sizeof(BitfieldType),
    sizeof(ArrayType),
    sizeof(FunctionType),
    sizeof(IncompleteType)
};
static constexpr size_t ctype_max_size = std::max({sizeof(PrimType), sizeof(PointerType), sizeof(StructType), sizeof(UnionType), sizeof(EnumType), sizeof(BitfieldType), sizeof(ArrayType), sizeof(FunctionType), sizeof(IncompleteType)});
