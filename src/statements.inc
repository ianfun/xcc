// C statements and declarations -- generated by gen.py
enum StmtKind: uint8_t {
  SHead,
  SCompound,
  SGoto,
  SContinue,
  SBreak,
  SReturn,
  SExpr,
  SLabeled,
  SIf,
  SDoWhile,
  SWhile,
  SFor,
  SSwitch,
  SDeclOnly,
  SAsm,
  SLoop,
  SVarDecl,
  SDefault,
  SCase,
  SFunction
};
struct NullStmt {
  enum StmtKind k;
  Location loc;
  Stmt next;
};
struct OpaqueStmt {
  StmtKind k;
  Location loc;
  Stmt next;
  union {
  struct {
      Stmt inner;
  };
  struct {
      IdentRef location;
  };
  struct {
      Expr ret;
  };
  struct {
      Expr exprbody;
  };
  struct {
      IdentRef label;
    Stmt labledstmt;
  };
  struct {
      Expr iftest;
    Stmt ifbody, elsebody;
  };
  struct {
      Expr dowhiletest;;
    Stmt dowhilebody;
  };
  struct {
      Expr whiletest;
    Stmt whilebody;
  };
  struct {
      Stmt forinit, forbody;
    Expr forcond, forincl;
  };
  struct {
      Expr swtest;
    Stmt swbody;
  };
  struct {
      CType decl;
  };
  struct {
      xstring asms;
  };
  struct {
      Stmt loop;
  };
  struct {
      xvector<VarDecl> vars;
  };
  struct {
      Stmt default_stmt;
  };
  struct {
      Stmt case_stmt;
    Expr case_expr;
  };
  struct {
      IdentRef funcname;
    CType functy;
    Stmt funcbody;
    xvector<IdentRef> labels = xvector<IdentRef>::get();
  };
};};
struct HeadStmt {
  enum StmtKind k=SHead;
  Location loc;
  Stmt next;
 /* empty! */ 
};struct CompoundStmt {
  enum StmtKind k=SCompound;
  Location loc;
  Stmt next;
struct {
  
    Stmt inner;

  };};
struct GotoStmt {
  enum StmtKind k=SGoto;
  Location loc;
  Stmt next;
struct {
  
    IdentRef location;

  };};
struct ContinueStmt {
  enum StmtKind k=SContinue;
  Location loc;
  Stmt next;
 /* empty! */ 
};struct BreakStmt {
  enum StmtKind k=SBreak;
  Location loc;
  Stmt next;
 /* empty! */ 
};struct ReturnStmt {
  enum StmtKind k=SReturn;
  Location loc;
  Stmt next;
struct {
  
    Expr ret;

  };};
struct ExprStmt {
  enum StmtKind k=SExpr;
  Location loc;
  Stmt next;
struct {
  
    Expr exprbody;

  };};
struct LabeledStmt {
  enum StmtKind k=SLabeled;
  Location loc;
  Stmt next;
struct {
  
    IdentRef label;
    Stmt labledstmt;

  };};
struct IfStmt {
  enum StmtKind k=SIf;
  Location loc;
  Stmt next;
struct {
  
    Expr iftest;
    Stmt ifbody, elsebody;

  };};
struct DoWhileStmt {
  enum StmtKind k=SDoWhile;
  Location loc;
  Stmt next;
struct {
  
    Expr dowhiletest;;
    Stmt dowhilebody;

  };};
struct WhileStmt {
  enum StmtKind k=SWhile;
  Location loc;
  Stmt next;
struct {
  
    Expr whiletest;
    Stmt whilebody;

  };};
struct ForStmt {
  enum StmtKind k=SFor;
  Location loc;
  Stmt next;
struct {
  
    Stmt forinit, forbody;
    Expr forcond, forincl;

  };};
struct SwitchStmt {
  enum StmtKind k=SSwitch;
  Location loc;
  Stmt next;
struct {
  
    Expr swtest;
    Stmt swbody;

  };};
struct DeclOnlyStmt {
  enum StmtKind k=SDeclOnly;
  Location loc;
  Stmt next;
struct {
  
    CType decl;

  };};
struct AsmStmt {
  enum StmtKind k=SAsm;
  Location loc;
  Stmt next;
struct {
  
    xstring asms;

  };};
struct LoopStmt {
  enum StmtKind k=SLoop;
  Location loc;
  Stmt next;
struct {
  
    Stmt loop;

  };};
struct VarDeclStmt {
  enum StmtKind k=SVarDecl;
  Location loc;
  Stmt next;
struct {
  
    xvector<VarDecl> vars;

  };};
struct DefaultStmt {
  enum StmtKind k=SDefault;
  Location loc;
  Stmt next;
struct {
  
    Stmt default_stmt;

  };};
struct CaseStmt {
  enum StmtKind k=SCase;
  Location loc;
  Stmt next;
struct {
  
    Stmt case_stmt;
    Expr case_expr;

  };};
struct FunctionStmt {
  enum StmtKind k=SFunction;
  Location loc;
  Stmt next;
struct {
  
    IdentRef funcname;
    CType functy;
    Stmt funcbody;
    xvector<IdentRef> labels = xvector<IdentRef>::get();

  };};
static uint8_t stmt_size_map[] = {
    sizeof(HeadStmt),
    sizeof(CompoundStmt),
    sizeof(GotoStmt),
    sizeof(ContinueStmt),
    sizeof(BreakStmt),
    sizeof(ReturnStmt),
    sizeof(ExprStmt),
    sizeof(LabeledStmt),
    sizeof(IfStmt),
    sizeof(DoWhileStmt),
    sizeof(WhileStmt),
    sizeof(ForStmt),
    sizeof(SwitchStmt),
    sizeof(DeclOnlyStmt),
    sizeof(AsmStmt),
    sizeof(LoopStmt),
    sizeof(VarDeclStmt),
    sizeof(DefaultStmt),
    sizeof(CaseStmt),
    sizeof(FunctionStmt)
};
static constexpr size_t stmt_max_size = std::max({sizeof(HeadStmt), sizeof(CompoundStmt), sizeof(GotoStmt), sizeof(ContinueStmt), sizeof(BreakStmt), sizeof(ReturnStmt), sizeof(ExprStmt), sizeof(LabeledStmt), sizeof(IfStmt), sizeof(DoWhileStmt), sizeof(WhileStmt), sizeof(ForStmt), sizeof(SwitchStmt), sizeof(DeclOnlyStmt), sizeof(AsmStmt), sizeof(LoopStmt), sizeof(VarDeclStmt), sizeof(DefaultStmt), sizeof(CaseStmt), sizeof(FunctionStmt)});
