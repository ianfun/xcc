// C statements and declarations -- generated by gen.py
enum StmtKind: uint8_t {
    SHead,
    SCompound,
    SLabel,
    SGoto,
    SCondJump,
    SSwitch,
    SDeclOnly,
    SReturn,
    SExpr,
    SNoReturnCall,
    SAsm,
    SVarDecl,
    SDecl,
    SFunction
};
struct NullStmt {
    Stmt next = nullptr;
    enum StmtKind k;
};
struct OpaqueStmt {
    Stmt next = nullptr;
    StmtKind k;
    bool isTerminator() const {
        switch (k) {
            case SGoto:
            case SReturn:
            case SCondJump:
            case SNoReturnCall:
                return true;
            default:
                return false;
        }
    }
union alignas(void*) {
    struct alignas(void*) {
        Stmt inner;
    };
    struct alignas(void*) {
        label_t label;
        IdentRef labelName;
    };
    struct alignas(void*) {
        label_t location;
    };
    struct alignas(void*) {
        Expr test;
        label_t T;
        label_t F;
    };
    struct alignas(void*) {
        Expr itest;
        xvector<SwitchCase> switchs;
        xvector<GNUSwitchCase> gnu_switchs;
        label_t sw_default;
        location_t sw_default_loc;
    };
    struct alignas(void*) {
        CType decl;
    };
    struct alignas(void*) {
        Expr ret;
    };
    struct alignas(void*) {
        Expr exprbody;
    };
    struct alignas(void*) {
        Expr call_expr;
    };
    struct alignas(void*) {
        xstring asms;
    };
    struct alignas(void*) {
        xvector<VarDecl> vars;
    };
    struct alignas(void*) {
        unsigned decl_idx;
        CType decl_ty;
    };
    struct alignas(void*) {
        unsigned func_idx;
        IdentRef funcname;
        CType functy;
        Stmt funcbody;
        unsigned numLabels;
        xvector<unsigned> args;
    };
};
};
struct HeadStmt {
    Stmt next = nullptr;
    enum StmtKind k=SHead;
};
struct CompoundStmt {
    Stmt next = nullptr;
    enum StmtKind k=SCompound;
    struct alignas(void*) {
        Stmt inner;
    };
};
struct LabelStmt {
    Stmt next = nullptr;
    enum StmtKind k=SLabel;
    struct alignas(void*) {
        label_t label;
        IdentRef labelName;
    };
};
struct GotoStmt {
    Stmt next = nullptr;
    enum StmtKind k=SGoto;
    struct alignas(void*) {
        label_t location;
    };
};
struct CondJumpStmt {
    Stmt next = nullptr;
    enum StmtKind k=SCondJump;
    struct alignas(void*) {
        Expr test;
        label_t T;
        label_t F;
    };
};
struct SwitchStmt {
    Stmt next = nullptr;
    enum StmtKind k=SSwitch;
    struct alignas(void*) {
        Expr itest;
        xvector<SwitchCase> switchs;
        xvector<GNUSwitchCase> gnu_switchs;
        label_t sw_default;
        location_t sw_default_loc;
    };
};
struct DeclOnlyStmt {
    Stmt next = nullptr;
    enum StmtKind k=SDeclOnly;
    struct alignas(void*) {
        CType decl;
    };
};
struct ReturnStmt {
    Stmt next = nullptr;
    enum StmtKind k=SReturn;
    struct alignas(void*) {
        Expr ret;
    };
};
struct ExprStmt {
    Stmt next = nullptr;
    enum StmtKind k=SExpr;
    struct alignas(void*) {
        Expr exprbody;
    };
};
struct NoReturnCallStmt {
    Stmt next = nullptr;
    enum StmtKind k=SNoReturnCall;
    struct alignas(void*) {
        Expr call_expr;
    };
};
struct AsmStmt {
    Stmt next = nullptr;
    enum StmtKind k=SAsm;
    struct alignas(void*) {
        xstring asms;
    };
};
struct VarDeclStmt {
    Stmt next = nullptr;
    enum StmtKind k=SVarDecl;
    struct alignas(void*) {
        xvector<VarDecl> vars;
    };
};
struct DeclStmt {
    Stmt next = nullptr;
    enum StmtKind k=SDecl;
    struct alignas(void*) {
        unsigned decl_idx;
        CType decl_ty;
    };
};
struct FunctionStmt {
    Stmt next = nullptr;
    enum StmtKind k=SFunction;
    struct alignas(void*) {
        unsigned func_idx;
        IdentRef funcname;
        CType functy;
        Stmt funcbody;
        unsigned numLabels;
        xvector<unsigned> args;
    };
};
static uint8_t stmt_size_map[] = {
    sizeof(HeadStmt),
    sizeof(CompoundStmt),
    sizeof(LabelStmt),
    sizeof(GotoStmt),
    sizeof(CondJumpStmt),
    sizeof(SwitchStmt),
    sizeof(DeclOnlyStmt),
    sizeof(ReturnStmt),
    sizeof(ExprStmt),
    sizeof(NoReturnCallStmt),
    sizeof(AsmStmt),
    sizeof(VarDeclStmt),
    sizeof(DeclStmt),
    sizeof(FunctionStmt)
};
static constexpr size_t stmt_max_size = std::max({sizeof(HeadStmt), sizeof(CompoundStmt), sizeof(LabelStmt), sizeof(GotoStmt), sizeof(CondJumpStmt), sizeof(SwitchStmt), sizeof(DeclOnlyStmt), sizeof(ReturnStmt), sizeof(ExprStmt), sizeof(NoReturnCallStmt), sizeof(AsmStmt), sizeof(VarDeclStmt), sizeof(DeclStmt), sizeof(FunctionStmt)});
