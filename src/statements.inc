// C statements and declarations -- generated by gen.py
enum StmtKind: uint8_t {
  SHead,
  SCompound,
  SLabel,
  SGoto,
  SCondJump,
  SSwitch,
  SDeclOnly,
  SReturn,
  SExpr,
  SAsm,
  SVarDecl,
  SDecl,
  SUpdateForwardDecl,
  SFunction
};
struct NullStmt {
  enum StmtKind k;
  Location loc;
  Stmt next;
};
struct OpaqueStmt {
StmtKind k;
Location loc;
Stmt next;
bool isTerminator() const {
    switch (k) {
        case SGoto:
        case SReturn:
        case SCondJump:
            return true;
        default:
            return false;
    }
}
union {
  struct {
      Stmt inner;
  };
  struct {
      label_t label;
    IdentRef labelName;
  };
  struct {
      label_t location;
  };
  struct {
      Expr test;
    label_t T;
    label_t F;
  };
  struct {
      Expr itest;
    xvector<SwitchCase> switchs;
    xvector<GNUSwitchCase> gnu_switchs;
    label_t sw_default;
    Location sw_default_loc;
  };
  struct {
      CType decl;
  };
  struct {
      Expr ret;
  };
  struct {
      Expr exprbody;
  };
  struct {
      xstring asms;
  };
  struct {
      xvector<VarDecl> vars;
  };
  struct {
      size_t decl_idx;
    CType decl_ty;
  };
  struct {
      size_t prev_idx;
    CType prev;
    CType now;
  };
  struct {
      size_t func_idx;
    IdentRef funcname;
    CType functy;
    Stmt funcbody;
    unsigned numLabels;
    xvector<size_t> args;
  };
};};
struct HeadStmt {
  enum StmtKind k=SHead;
  Location loc;
  Stmt next;
 /* empty! */ 
};
struct CompoundStmt {
  enum StmtKind k=SCompound;
  Location loc;
  Stmt next;
  struct {
    Stmt inner;
  };
};
struct LabelStmt {
  enum StmtKind k=SLabel;
  Location loc;
  Stmt next;
  struct {
    label_t label;
    IdentRef labelName;
  };
};
struct GotoStmt {
  enum StmtKind k=SGoto;
  Location loc;
  Stmt next;
  struct {
    label_t location;
  };
};
struct CondJumpStmt {
  enum StmtKind k=SCondJump;
  Location loc;
  Stmt next;
  struct {
    Expr test;
    label_t T;
    label_t F;
  };
};
struct SwitchStmt {
  enum StmtKind k=SSwitch;
  Location loc;
  Stmt next;
  struct {
    Expr itest;
    xvector<SwitchCase> switchs;
    xvector<GNUSwitchCase> gnu_switchs;
    label_t sw_default;
    Location sw_default_loc;
  };
};
struct DeclOnlyStmt {
  enum StmtKind k=SDeclOnly;
  Location loc;
  Stmt next;
  struct {
    CType decl;
  };
};
struct ReturnStmt {
  enum StmtKind k=SReturn;
  Location loc;
  Stmt next;
  struct {
    Expr ret;
  };
};
struct ExprStmt {
  enum StmtKind k=SExpr;
  Location loc;
  Stmt next;
  struct {
    Expr exprbody;
  };
};
struct AsmStmt {
  enum StmtKind k=SAsm;
  Location loc;
  Stmt next;
  struct {
    xstring asms;
  };
};
struct VarDeclStmt {
  enum StmtKind k=SVarDecl;
  Location loc;
  Stmt next;
  struct {
    xvector<VarDecl> vars;
  };
};
struct DeclStmt {
  enum StmtKind k=SDecl;
  Location loc;
  Stmt next;
  struct {
    size_t decl_idx;
    CType decl_ty;
  };
};
struct UpdateForwardDeclStmt {
  enum StmtKind k=SUpdateForwardDecl;
  Location loc;
  Stmt next;
  struct {
    size_t prev_idx;
    CType prev;
    CType now;
  };
};
struct FunctionStmt {
  enum StmtKind k=SFunction;
  Location loc;
  Stmt next;
  struct {
    size_t func_idx;
    IdentRef funcname;
    CType functy;
    Stmt funcbody;
    unsigned numLabels;
    xvector<size_t> args;
  };
};
static uint8_t stmt_size_map[] = {
    sizeof(HeadStmt),
    sizeof(CompoundStmt),
    sizeof(LabelStmt),
    sizeof(GotoStmt),
    sizeof(CondJumpStmt),
    sizeof(SwitchStmt),
    sizeof(DeclOnlyStmt),
    sizeof(ReturnStmt),
    sizeof(ExprStmt),
    sizeof(AsmStmt),
    sizeof(VarDeclStmt),
    sizeof(DeclStmt),
    sizeof(UpdateForwardDeclStmt),
    sizeof(FunctionStmt)
};
static constexpr size_t stmt_max_size = std::max({sizeof(HeadStmt), sizeof(CompoundStmt), sizeof(LabelStmt), sizeof(GotoStmt), sizeof(CondJumpStmt), sizeof(SwitchStmt), sizeof(DeclOnlyStmt), sizeof(ReturnStmt), sizeof(ExprStmt), sizeof(AsmStmt), sizeof(VarDeclStmt), sizeof(DeclStmt), sizeof(UpdateForwardDeclStmt), sizeof(FunctionStmt)});
