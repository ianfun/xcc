// Builtin functions: (copied from Clang)

//===--- Builtins.def - Builtin function info database ----------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines the standard builtin function database.  Users of this file
// must define the BUILTIN macro to make use of this information.
//
//===----------------------------------------------------------------------===//

// FIXME: This should really be a .td file, but that requires modifying tblgen.
// Perhaps tblgen should have plugins.

// The first value provided to the macro specifies the function name of the
// builtin, and results in a clang::builtin::BIXX enum value for XX.

// The second value provided to the macro specifies the type of the function
// (result value, then each argument) as follows:
//  v -> void
//  b -> boolean
//  c -> char
//  s -> short
//  i -> int
//  x -> half (_Float16)
//  y -> half (__bf16)
//  f -> float
//  d -> double
//  z -> size_t
//  w -> wchar_t
//  F -> constant CFString
//  G -> id
//  H -> SEL
//  M -> struct objc_super
//  a -> __builtin_va_list
//  A -> "reference" to __builtin_va_list
//  V -> Vector, followed by the number of elements and the base type.
//  q -> Scalable vector, followed by the number of elements and the base type.
//  E -> ext_vector, followed by the number of elements and the base type.
//  X -> _Complex, followed by the base type.
//  Y -> ptrdiff_t
//  P -> FILE
//  J -> jmp_buf
//  SJ -> sigjmp_buf
//  K -> ucontext_t
//  p -> pid_t
//  . -> "...".  This may only occur at the end of the function list.
//
// Types may be prefixed with the following modifiers:
//  L   -> long (e.g. Li for 'long int', Ld for 'long double')
//  LL  -> long long (e.g. LLi for 'long long int', LLd for __float128)
//  LLL -> __int128_t (e.g. LLLi)
//  Z   -> int32_t (require a native 32-bit integer type on the target)
//  W   -> int64_t (require a native 64-bit integer type on the target)
//  N   -> 'int' size if target is LP64, 'L' otherwise.
//  S   -> signed
//  U   -> unsigned
//  I   -> Required to constant fold to an integer constant expression.
//
// Types may be postfixed with the following modifiers:
// * -> pointer (optionally followed by an address space number, if no address
//               space is specified than any address space will be accepted)
// & -> reference (optionally followed by an address space number)
// C -> const
// D -> volatile
// R -> restrict

// The third value provided to the macro specifies information about attributes
// of the function.  These must be kept in sync with the predicates in the
// Builtin::Context class.  Currently we have:
//  n -> nothrow
//  r -> noreturn
//  U -> pure
//  c -> const
//  t -> signature is meaningless, use custom typechecking
//  T -> type is not important to semantic analysis and codegen; recognize as
//       builtin even if type doesn't match signature, and don't warn if we
//       can't be sure the type is right
//  F -> this is a libc/libm function with a '__builtin_' prefix added.
//  f -> this is a libc/libm function without the '__builtin_' prefix.
//  h -> this function requires a specific header or an explicit declaration.
//  i -> this is a runtime library implemented function without the
//       '__builtin_' prefix. It will be implemented in compiler-rt or libgcc.
//  p:N: -> this is a printf-like function whose Nth argument is the format
//          string.
//  P:N: -> similar to the p:N: attribute, but the function is like vprintf
//          in that it accepts its arguments as a va_list rather than
//          through an ellipsis
//  s:N: -> this is a scanf-like function whose Nth argument is the format
//          string.
//  S:N: -> similar to the s:N: attribute, but the function is like vscanf
//          in that it accepts its arguments as a va_list rather than
//          through an ellipsis
//  e -> const, but only when -fno-math-errno
//  j -> returns_twice (like setjmp)
//  u -> arguments are not evaluated for their side-effects
//  V:N: -> requires vectors of at least N bits to be legal
//  C<N,M_0,...,M_k> -> callback behavior: argument N is called with argument
//                      M_0, ..., M_k as payload
//  FIXME: gcc has nonnull

// Standard libc/libm functions:

BUILTIN(__builtin_atan2 , "ddd"  , "Fne")
BUILTIN(__builtin_atan2f, "fff"  , "Fne")
BUILTIN(__builtin_atan2l, "LdLdLd", "Fne")
BUILTIN(__builtin_atan2f128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_abs  , "ii"  , "ncF")
BUILTIN(__builtin_copysign, "ddd", "ncF")
BUILTIN(__builtin_copysignf, "fff", "ncF")
BUILTIN(__builtin_copysignf16, "hhh", "ncF")
BUILTIN(__builtin_copysignl, "LdLdLd", "ncF")
BUILTIN(__builtin_copysignf128, "LLdLLdLLd", "ncF")
BUILTIN(__builtin_fabs , "dd"  , "ncF")
BUILTIN(__builtin_fabsf, "ff"  , "ncF")
BUILTIN(__builtin_fabsl, "LdLd", "ncF")
BUILTIN(__builtin_fabsf16, "hh"  , "ncF")
BUILTIN(__builtin_fabsf128, "LLdLLd", "ncF")
BUILTIN(__builtin_fmod , "ddd"  , "Fne")
BUILTIN(__builtin_fmodf, "fff"  , "Fne")
BUILTIN(__builtin_fmodf16, "hhh"  , "Fne")
BUILTIN(__builtin_fmodl, "LdLdLd", "Fne")
BUILTIN(__builtin_fmodf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_frexp , "ddi*"  , "Fn")
BUILTIN(__builtin_frexpf, "ffi*"  , "Fn")
BUILTIN(__builtin_frexpl, "LdLdi*", "Fn")
BUILTIN(__builtin_frexpf128, "LLdLLdi*", "Fn")
BUILTIN(__builtin_huge_val, "d", "nc")
BUILTIN(__builtin_huge_valf, "f", "nc")
BUILTIN(__builtin_huge_vall, "Ld", "nc")
BUILTIN(__builtin_huge_valf128, "LLd", "nc")
BUILTIN(__builtin_inf  , "d"   , "nc")
BUILTIN(__builtin_inff , "f"   , "nc")
BUILTIN(__builtin_infl , "Ld"  , "nc")
BUILTIN(__builtin_inff128 , "LLd"  , "nc")
BUILTIN(__builtin_labs , "LiLi"  , "Fnc")
BUILTIN(__builtin_llabs, "LLiLLi", "Fnc")
BUILTIN(__builtin_ldexp , "ddi"  , "Fne")
BUILTIN(__builtin_ldexpf, "ffi"  , "Fne")
BUILTIN(__builtin_ldexpl, "LdLdi", "Fne")
BUILTIN(__builtin_ldexpf128, "LLdLLdi", "Fne")
BUILTIN(__builtin_modf , "ddd*"  , "Fn")
BUILTIN(__builtin_modff, "fff*"  , "Fn")
BUILTIN(__builtin_modfl, "LdLdLd*", "Fn")
BUILTIN(__builtin_modff128, "LLdLLdLLd*", "Fn")
BUILTIN(__builtin_nan,  "dcC*" , "FnU")
BUILTIN(__builtin_nanf, "fcC*" , "FnU")
BUILTIN(__builtin_nanl, "LdcC*", "FnU")
BUILTIN(__builtin_nanf128, "LLdcC*", "FnU")
BUILTIN(__builtin_nans,  "dcC*" , "FnU")
BUILTIN(__builtin_nansf, "fcC*" , "FnU")
BUILTIN(__builtin_nansl, "LdcC*", "FnU")
BUILTIN(__builtin_nansf128, "LLdcC*", "FnU")
BUILTIN(__builtin_powi , "ddi"  , "Fnc")
BUILTIN(__builtin_powif, "ffi"  , "Fnc")
BUILTIN(__builtin_powil, "LdLdi", "Fnc")
BUILTIN(__builtin_pow , "ddd"  , "Fne")
BUILTIN(__builtin_powf, "fff"  , "Fne")
BUILTIN(__builtin_powf16, "hhh"  , "Fne")
BUILTIN(__builtin_powl, "LdLdLd", "Fne")
BUILTIN(__builtin_powf128, "LLdLLdLLd", "Fne")

// Standard unary libc/libm functions with double/float/long double variants:
BUILTIN(__builtin_acos , "dd"  , "Fne")
BUILTIN(__builtin_acosf, "ff"  , "Fne")
BUILTIN(__builtin_acosl, "LdLd", "Fne")
BUILTIN(__builtin_acosf128, "LLdLLd", "Fne")
BUILTIN(__builtin_acosh , "dd"  , "Fne")
BUILTIN(__builtin_acoshf, "ff"  , "Fne")
BUILTIN(__builtin_acoshl, "LdLd", "Fne")
BUILTIN(__builtin_acoshf128, "LLdLLd", "Fne")
BUILTIN(__builtin_asin , "dd"  , "Fne")
BUILTIN(__builtin_asinf, "ff"  , "Fne")
BUILTIN(__builtin_asinl, "LdLd", "Fne")
BUILTIN(__builtin_asinf128, "LLdLLd", "Fne")
BUILTIN(__builtin_asinh , "dd"  , "Fne")
BUILTIN(__builtin_asinhf, "ff"  , "Fne")
BUILTIN(__builtin_asinhl, "LdLd", "Fne")
BUILTIN(__builtin_asinhf128, "LLdLLd", "Fne")
BUILTIN(__builtin_atan , "dd"  , "Fne")
BUILTIN(__builtin_atanf, "ff"  , "Fne")
BUILTIN(__builtin_atanl, "LdLd", "Fne")
BUILTIN(__builtin_atanf128, "LLdLLd", "Fne")
BUILTIN(__builtin_atanh , "dd", "Fne")
BUILTIN(__builtin_atanhf, "ff", "Fne")
BUILTIN(__builtin_atanhl, "LdLd", "Fne")
BUILTIN(__builtin_atanhf128, "LLdLLd", "Fne")
BUILTIN(__builtin_cbrt , "dd", "Fnc")
BUILTIN(__builtin_cbrtf, "ff", "Fnc")
BUILTIN(__builtin_cbrtl, "LdLd", "Fnc")
BUILTIN(__builtin_cbrtf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_ceil , "dd"  , "Fnc")
BUILTIN(__builtin_ceilf, "ff"  , "Fnc")
BUILTIN(__builtin_ceilf16, "hh"  , "Fnc")
BUILTIN(__builtin_ceill, "LdLd", "Fnc")
BUILTIN(__builtin_ceilf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_cos , "dd"  , "Fne")
BUILTIN(__builtin_cosf, "ff"  , "Fne")
BUILTIN(__builtin_cosf16, "hh"  , "Fne")
BUILTIN(__builtin_cosh , "dd"  , "Fne")
BUILTIN(__builtin_coshf, "ff"  , "Fne")
BUILTIN(__builtin_coshl, "LdLd", "Fne")
BUILTIN(__builtin_coshf128, "LLdLLd", "Fne")
BUILTIN(__builtin_cosl, "LdLd", "Fne")
BUILTIN(__builtin_cosf128, "LLdLLd"  , "Fne")
BUILTIN(__builtin_erf , "dd", "Fne")
BUILTIN(__builtin_erff, "ff", "Fne")
BUILTIN(__builtin_erfl, "LdLd", "Fne")
BUILTIN(__builtin_erff128, "LLdLLd", "Fne")
BUILTIN(__builtin_erfc , "dd", "Fne")
BUILTIN(__builtin_erfcf, "ff", "Fne")
BUILTIN(__builtin_erfcl, "LdLd", "Fne")
BUILTIN(__builtin_erfcf128, "LLdLLd", "Fne")
BUILTIN(__builtin_exp , "dd"  , "Fne")
BUILTIN(__builtin_expf, "ff"  , "Fne")
BUILTIN(__builtin_expf16, "hh"  , "Fne")
BUILTIN(__builtin_expl, "LdLd", "Fne")
BUILTIN(__builtin_expf128, "LLdLLd", "Fne")
BUILTIN(__builtin_exp2 , "dd"  , "Fne")
BUILTIN(__builtin_exp2f, "ff"  , "Fne")
BUILTIN(__builtin_exp2f16, "hh"  , "Fne")
BUILTIN(__builtin_exp2l, "LdLd", "Fne")
BUILTIN(__builtin_exp2f128, "LLdLLd"  , "Fne")
BUILTIN(__builtin_expm1 , "dd", "Fne")
BUILTIN(__builtin_expm1f, "ff", "Fne")
BUILTIN(__builtin_expm1l, "LdLd", "Fne")
BUILTIN(__builtin_expm1f128, "LLdLLd", "Fne")
BUILTIN(__builtin_fdim, "ddd", "Fne")
BUILTIN(__builtin_fdimf, "fff", "Fne")
BUILTIN(__builtin_fdiml, "LdLdLd", "Fne")
BUILTIN(__builtin_fdimf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_floor , "dd"  , "Fnc")
BUILTIN(__builtin_floorf, "ff"  , "Fnc")
BUILTIN(__builtin_floorf16, "hh"  , "Fnc")
BUILTIN(__builtin_floorl, "LdLd", "Fnc")
BUILTIN(__builtin_floorf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_fma, "dddd", "Fne")
BUILTIN(__builtin_fmaf, "ffff", "Fne")
BUILTIN(__builtin_fmaf16, "hhhh", "Fne")
BUILTIN(__builtin_fmal, "LdLdLdLd", "Fne")
BUILTIN(__builtin_fmaf128, "LLdLLdLLdLLd", "Fne")
BUILTIN(__builtin_fmax, "ddd", "Fnc")
BUILTIN(__builtin_fmaxf, "fff", "Fnc")
BUILTIN(__builtin_fmaxf16, "hhh", "Fnc")
BUILTIN(__builtin_fmaxl, "LdLdLd", "Fnc")
BUILTIN(__builtin_fmaxf128, "LLdLLdLLd", "Fnc")
BUILTIN(__builtin_fmin, "ddd", "Fnc")
BUILTIN(__builtin_fminf, "fff", "Fnc")
BUILTIN(__builtin_fminf16, "hhh", "Fnc")
BUILTIN(__builtin_fminl, "LdLdLd", "Fnc")
BUILTIN(__builtin_fminf128, "LLdLLdLLd", "Fnc")
BUILTIN(__builtin_hypot , "ddd"  , "Fne")
BUILTIN(__builtin_hypotf, "fff"  , "Fne")
BUILTIN(__builtin_hypotl, "LdLdLd", "Fne")
BUILTIN(__builtin_hypotf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_ilogb , "id", "Fne")
BUILTIN(__builtin_ilogbf, "if", "Fne")
BUILTIN(__builtin_ilogbl, "iLd", "Fne")
BUILTIN(__builtin_ilogbf128, "iLLd", "Fne")
BUILTIN(__builtin_lgamma , "dd", "Fn")
BUILTIN(__builtin_lgammaf, "ff", "Fn")
BUILTIN(__builtin_lgammal, "LdLd", "Fn")
BUILTIN(__builtin_lgammaf128, "LLdLLd", "Fn")
BUILTIN(__builtin_llrint, "LLid", "Fne")
BUILTIN(__builtin_llrintf, "LLif", "Fne")
BUILTIN(__builtin_llrintl, "LLiLd", "Fne")
BUILTIN(__builtin_llrintf128, "LLiLLd", "Fne")
BUILTIN(__builtin_llround , "LLid", "Fne")
BUILTIN(__builtin_llroundf, "LLif", "Fne")
BUILTIN(__builtin_llroundl, "LLiLd", "Fne")
BUILTIN(__builtin_llroundf128, "LLiLLd", "Fne")
BUILTIN(__builtin_log , "dd"  , "Fne")
BUILTIN(__builtin_log10 , "dd"  , "Fne")
BUILTIN(__builtin_log10f, "ff"  , "Fne")
BUILTIN(__builtin_log10f16, "hh"  , "Fne")
BUILTIN(__builtin_log10l, "LdLd", "Fne")
BUILTIN(__builtin_log10f128, "LLdLLd"  , "Fne")
BUILTIN(__builtin_log1p , "dd"  , "Fne")
BUILTIN(__builtin_log1pf, "ff"  , "Fne")
BUILTIN(__builtin_log1pl, "LdLd", "Fne")
BUILTIN(__builtin_log1pf128, "LLdLLd", "Fne")
BUILTIN(__builtin_log2, "dd"  , "Fne")
BUILTIN(__builtin_log2f, "ff"  , "Fne")
BUILTIN(__builtin_log2f16, "hh"  , "Fne")
BUILTIN(__builtin_log2l, "LdLd"  , "Fne")
BUILTIN(__builtin_log2f128, "LLdLLd"  , "Fne")
BUILTIN(__builtin_logb , "dd", "Fne")
BUILTIN(__builtin_logbf, "ff", "Fne")
BUILTIN(__builtin_logbl, "LdLd", "Fne")
BUILTIN(__builtin_logbf128, "LLdLLd", "Fne")
BUILTIN(__builtin_logf, "ff"  , "Fne")
BUILTIN(__builtin_logf16, "hh"  , "Fne")
BUILTIN(__builtin_logl, "LdLd", "Fne")
BUILTIN(__builtin_logf128, "LLdLLd", "Fne")
BUILTIN(__builtin_lrint , "Lid", "Fne")
BUILTIN(__builtin_lrintf, "Lif", "Fne")
BUILTIN(__builtin_lrintl, "LiLd", "Fne")
BUILTIN(__builtin_lrintf128, "LiLLd", "Fne")
BUILTIN(__builtin_lround , "Lid", "Fne")
BUILTIN(__builtin_lroundf, "Lif", "Fne")
BUILTIN(__builtin_lroundl, "LiLd", "Fne")
BUILTIN(__builtin_lroundf128, "LiLLd", "Fne")
BUILTIN(__builtin_nearbyint , "dd", "Fnc")
BUILTIN(__builtin_nearbyintf, "ff", "Fnc")
BUILTIN(__builtin_nearbyintl, "LdLd", "Fnc")
BUILTIN(__builtin_nearbyintf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_nextafter , "ddd", "Fne")
BUILTIN(__builtin_nextafterf, "fff", "Fne")
BUILTIN(__builtin_nextafterl, "LdLdLd", "Fne")
BUILTIN(__builtin_nextafterf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_nexttoward , "ddLd", "Fne")
BUILTIN(__builtin_nexttowardf, "ffLd", "Fne")
BUILTIN(__builtin_nexttowardl, "LdLdLd", "Fne")
BUILTIN(__builtin_nexttowardf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_remainder , "ddd", "Fne")
BUILTIN(__builtin_remainderf, "fff", "Fne")
BUILTIN(__builtin_remainderl, "LdLdLd", "Fne")
BUILTIN(__builtin_remainderf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_remquo , "dddi*", "Fn")
BUILTIN(__builtin_remquof, "fffi*", "Fn")
BUILTIN(__builtin_remquol, "LdLdLdi*", "Fn")
BUILTIN(__builtin_remquof128, "LLdLLdLLdi*", "Fn")
BUILTIN(__builtin_rint , "dd", "Fnc")
BUILTIN(__builtin_rintf, "ff", "Fnc")
BUILTIN(__builtin_rintf16, "hh", "Fnc")
BUILTIN(__builtin_rintl, "LdLd", "Fnc")
BUILTIN(__builtin_rintf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_round, "dd"  , "Fnc")
BUILTIN(__builtin_roundf, "ff"  , "Fnc")
BUILTIN(__builtin_roundf16, "hh"  , "Fnc")
BUILTIN(__builtin_roundl, "LdLd"  , "Fnc")
BUILTIN(__builtin_roundf128, "LLdLLd"  , "Fnc")
BUILTIN(__builtin_scalbln , "ddLi", "Fne")
BUILTIN(__builtin_scalblnf, "ffLi", "Fne")
BUILTIN(__builtin_scalblnl, "LdLdLi", "Fne")
BUILTIN(__builtin_scalblnf128, "LLdLLdLi", "Fne")
BUILTIN(__builtin_scalbn , "ddi", "Fne")
BUILTIN(__builtin_scalbnf, "ffi", "Fne")
BUILTIN(__builtin_scalbnl, "LdLdi", "Fne")
BUILTIN(__builtin_scalbnf128, "LLdLLdi", "Fne")
BUILTIN(__builtin_sin , "dd"  , "Fne")
BUILTIN(__builtin_sinf, "ff"  , "Fne")
BUILTIN(__builtin_sinf16, "hh"  , "Fne")
BUILTIN(__builtin_sinh , "dd"  , "Fne")
BUILTIN(__builtin_sinhf, "ff"  , "Fne")
BUILTIN(__builtin_sinhl, "LdLd", "Fne")
BUILTIN(__builtin_sinhf128, "LLdLLd", "Fne")
BUILTIN(__builtin_sinl, "LdLd", "Fne")
BUILTIN(__builtin_sinf128, "LLdLLd"  , "Fne")
BUILTIN(__builtin_sqrt , "dd"  , "Fne")
BUILTIN(__builtin_sqrtf, "ff"  , "Fne")
BUILTIN(__builtin_sqrtf16, "hh"  , "Fne")
BUILTIN(__builtin_sqrtl, "LdLd", "Fne")
BUILTIN(__builtin_sqrtf128, "LLdLLd", "Fne")
BUILTIN(__builtin_tan , "dd"  , "Fne")
BUILTIN(__builtin_tanf, "ff"  , "Fne")
BUILTIN(__builtin_tanh , "dd"  , "Fne")
BUILTIN(__builtin_tanhf, "ff"  , "Fne")
BUILTIN(__builtin_tanhl, "LdLd", "Fne")
BUILTIN(__builtin_tanhf128, "LLdLLd", "Fne")
BUILTIN(__builtin_tanl, "LdLd", "Fne")
BUILTIN(__builtin_tanf128, "LLdLLd"  , "Fne")
BUILTIN(__builtin_tgamma , "dd", "Fne")
BUILTIN(__builtin_tgammaf, "ff", "Fne")
BUILTIN(__builtin_tgammal, "LdLd", "Fne")
BUILTIN(__builtin_tgammaf128, "LLdLLd", "Fne")
BUILTIN(__builtin_trunc , "dd", "Fnc")
BUILTIN(__builtin_truncf, "ff", "Fnc")
BUILTIN(__builtin_truncl, "LdLd", "Fnc")
BUILTIN(__builtin_truncf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_truncf16, "hh", "Fnc")

// Access to floating point environment
BUILTIN(__builtin_flt_rounds, "i", "n")

// C99 complex builtins
BUILTIN(__builtin_cabs, "dXd", "Fne")
BUILTIN(__builtin_cabsf, "fXf", "Fne")
BUILTIN(__builtin_cabsl, "LdXLd", "Fne")
BUILTIN(__builtin_cacos, "XdXd", "Fne")
BUILTIN(__builtin_cacosf, "XfXf", "Fne")
BUILTIN(__builtin_cacosh, "XdXd", "Fne")
BUILTIN(__builtin_cacoshf, "XfXf", "Fne")
BUILTIN(__builtin_cacoshl, "XLdXLd", "Fne")
BUILTIN(__builtin_cacosl, "XLdXLd", "Fne")
BUILTIN(__builtin_carg, "dXd", "Fne")
BUILTIN(__builtin_cargf, "fXf", "Fne")
BUILTIN(__builtin_cargl, "LdXLd", "Fne")
BUILTIN(__builtin_casin, "XdXd", "Fne")
BUILTIN(__builtin_casinf, "XfXf", "Fne")
BUILTIN(__builtin_casinh, "XdXd", "Fne")
BUILTIN(__builtin_casinhf, "XfXf", "Fne")
BUILTIN(__builtin_casinhl, "XLdXLd", "Fne")
BUILTIN(__builtin_casinl, "XLdXLd", "Fne")
BUILTIN(__builtin_catan, "XdXd", "Fne")
BUILTIN(__builtin_catanf, "XfXf", "Fne")
BUILTIN(__builtin_catanh, "XdXd", "Fne")
BUILTIN(__builtin_catanhf, "XfXf", "Fne")
BUILTIN(__builtin_catanhl, "XLdXLd", "Fne")
BUILTIN(__builtin_catanl, "XLdXLd", "Fne")
BUILTIN(__builtin_ccos, "XdXd", "Fne")
BUILTIN(__builtin_ccosf, "XfXf", "Fne")
BUILTIN(__builtin_ccosl, "XLdXLd", "Fne")
BUILTIN(__builtin_ccosh, "XdXd", "Fne")
BUILTIN(__builtin_ccoshf, "XfXf", "Fne")
BUILTIN(__builtin_ccoshl, "XLdXLd", "Fne")
BUILTIN(__builtin_cexp, "XdXd", "Fne")
BUILTIN(__builtin_cexpf, "XfXf", "Fne")
BUILTIN(__builtin_cexpl, "XLdXLd", "Fne")
BUILTIN(__builtin_cimag, "dXd", "Fnc")
BUILTIN(__builtin_cimagf, "fXf", "Fnc")
BUILTIN(__builtin_cimagl, "LdXLd", "Fnc")
BUILTIN(__builtin_conj, "XdXd", "Fnc")
BUILTIN(__builtin_conjf, "XfXf", "Fnc")
BUILTIN(__builtin_conjl, "XLdXLd", "Fnc")
BUILTIN(__builtin_clog, "XdXd", "Fne")
BUILTIN(__builtin_clogf, "XfXf", "Fne")
BUILTIN(__builtin_clogl, "XLdXLd", "Fne")
BUILTIN(__builtin_cproj, "XdXd", "Fnc")
BUILTIN(__builtin_cprojf, "XfXf", "Fnc")
BUILTIN(__builtin_cprojl, "XLdXLd", "Fnc")
BUILTIN(__builtin_cpow, "XdXdXd", "Fne")
BUILTIN(__builtin_cpowf, "XfXfXf", "Fne")
BUILTIN(__builtin_cpowl, "XLdXLdXLd", "Fne")
BUILTIN(__builtin_creal, "dXd", "Fnc")
BUILTIN(__builtin_crealf, "fXf", "Fnc")
BUILTIN(__builtin_creall, "LdXLd", "Fnc")
BUILTIN(__builtin_csin, "XdXd", "Fne")
BUILTIN(__builtin_csinf, "XfXf", "Fne")
BUILTIN(__builtin_csinl, "XLdXLd", "Fne")
BUILTIN(__builtin_csinh, "XdXd", "Fne")
BUILTIN(__builtin_csinhf, "XfXf", "Fne")
BUILTIN(__builtin_csinhl, "XLdXLd", "Fne")
BUILTIN(__builtin_csqrt, "XdXd", "Fne")
BUILTIN(__builtin_csqrtf, "XfXf", "Fne")
BUILTIN(__builtin_csqrtl, "XLdXLd", "Fne")
BUILTIN(__builtin_ctan, "XdXd", "Fne")
BUILTIN(__builtin_ctanf, "XfXf", "Fne")
BUILTIN(__builtin_ctanl, "XLdXLd", "Fne")
BUILTIN(__builtin_ctanh, "XdXd", "Fne")
BUILTIN(__builtin_ctanhf, "XfXf", "Fne")
BUILTIN(__builtin_ctanhl, "XLdXLd", "Fne")

// GCC-compatible C99 CMPLX implementation.
BUILTIN(__builtin_complex, "v.", "nct")

// FP Comparisons.
BUILTIN(__builtin_isgreater     , "i.", "Fnct")
BUILTIN(__builtin_isgreaterequal, "i.", "Fnct")
BUILTIN(__builtin_isless        , "i.", "Fnct")
BUILTIN(__builtin_islessequal   , "i.", "Fnct")
BUILTIN(__builtin_islessgreater , "i.", "Fnct")
BUILTIN(__builtin_isunordered   , "i.", "Fnct")

// Unary FP classification
BUILTIN(__builtin_fpclassify, "iiiiii.", "Fnct")
BUILTIN(__builtin_isfinite,   "i.", "Fnct")
BUILTIN(__builtin_isinf,      "i.", "Fnct")
BUILTIN(__builtin_isinf_sign, "i.", "Fnct")
BUILTIN(__builtin_isnan,      "i.", "Fnct")
BUILTIN(__builtin_isnormal,   "i.", "Fnct")

// FP signbit builtins
BUILTIN(__builtin_signbit, "i.", "Fnct")
BUILTIN(__builtin_signbitf, "if", "Fnc")
BUILTIN(__builtin_signbitl, "iLd", "Fnc")

// Special FP builtins.
BUILTIN(__builtin_canonicalize, "dd", "nc")
BUILTIN(__builtin_canonicalizef, "ff", "nc")
BUILTIN(__builtin_canonicalizef16, "hh", "nc")
BUILTIN(__builtin_canonicalizel, "LdLd", "nc")

// Builtins for arithmetic.
BUILTIN(__builtin_clzs , "iUs"  , "nc")
BUILTIN(__builtin_clz  , "iUi"  , "nc")
BUILTIN(__builtin_clzl , "iULi" , "nc")
BUILTIN(__builtin_clzll, "iULLi", "nc")
// TODO: int clzimax(uintmax_t)
BUILTIN(__builtin_ctzs , "iUs"  , "nc")
BUILTIN(__builtin_ctz  , "iUi"  , "nc")
BUILTIN(__builtin_ctzl , "iULi" , "nc")
BUILTIN(__builtin_ctzll, "iULLi", "nc")
// TODO: int ctzimax(uintmax_t)
BUILTIN(__builtin_ffs  , "ii"  , "Fnc")
BUILTIN(__builtin_ffsl , "iLi" , "Fnc")
BUILTIN(__builtin_ffsll, "iLLi", "Fnc")
BUILTIN(__builtin_parity  , "iUi"  , "nc")
BUILTIN(__builtin_parityl , "iULi" , "nc")
BUILTIN(__builtin_parityll, "iULLi", "nc")
BUILTIN(__builtin_popcount  , "iUi"  , "nc")
BUILTIN(__builtin_popcountl , "iULi" , "nc")
BUILTIN(__builtin_popcountll, "iULLi", "nc")
BUILTIN(__builtin_clrsb  , "ii"  , "nc")
BUILTIN(__builtin_clrsbl , "iLi" , "nc")
BUILTIN(__builtin_clrsbll, "iLLi", "nc")

// The following builtins rely on that char == 8 bits, short == 16 bits and that
// there exists native types on the target that are 32- and 64-bits wide, unless
// these conditions are fulfilled these builtins will operate on a not intended
// bitwidth.
BUILTIN(__builtin_bswap16, "UsUs", "nc")
BUILTIN(__builtin_bswap32, "UZiUZi", "nc")
BUILTIN(__builtin_bswap64, "UWiUWi", "nc")

BUILTIN(__builtin_bitreverse8, "UcUc", "nc")
BUILTIN(__builtin_bitreverse16, "UsUs", "nc")
BUILTIN(__builtin_bitreverse32, "UZiUZi", "nc")
BUILTIN(__builtin_bitreverse64, "UWiUWi", "nc")

BUILTIN(__builtin_rotateleft8, "UcUcUc", "nc")
BUILTIN(__builtin_rotateleft16, "UsUsUs", "nc")
BUILTIN(__builtin_rotateleft32, "UZiUZiUZi", "nc")
BUILTIN(__builtin_rotateleft64, "UWiUWiUWi", "nc")
BUILTIN(__builtin_rotateright8, "UcUcUc", "nc")
BUILTIN(__builtin_rotateright16, "UsUsUs", "nc")
BUILTIN(__builtin_rotateright32, "UZiUZiUZi", "nc")
BUILTIN(__builtin_rotateright64, "UWiUWiUWi", "nc")

// Random GCC builtins
BUILTIN(__builtin_calloc, "v*zz", "nF")
BUILTIN(__builtin_constant_p, "i.", "nctu")
BUILTIN(__builtin_classify_type, "i.", "nctu")
BUILTIN(__builtin___CFStringMakeConstantString, "FC*cC*", "nc")
BUILTIN(__builtin___NSStringMakeConstantString, "FC*cC*", "nc")
BUILTIN(__builtin_va_start, "vA.", "nt")
BUILTIN(__builtin_va_end, "vA", "n")
BUILTIN(__builtin_va_copy, "vAA", "n")
BUILTIN(__builtin_stdarg_start, "vA.", "nt")
BUILTIN(__builtin_assume_aligned, "v*vC*z.", "nc")
BUILTIN(__builtin_bcmp, "ivC*vC*z", "Fn")
BUILTIN(__builtin_bcopy, "vv*v*z", "n")
BUILTIN(__builtin_bzero, "vv*z", "nF")
BUILTIN(__builtin_fprintf, "iP*cC*.", "Fp:1:")
BUILTIN(__builtin_free, "vv*", "nF")
BUILTIN(__builtin_malloc, "v*z", "nF")
BUILTIN(__builtin_memchr, "v*vC*iz", "nF")
BUILTIN(__builtin_memcmp, "ivC*vC*z", "nF")
BUILTIN(__builtin_memcpy, "v*v*vC*z", "nF")
BUILTIN(__builtin_memcpy_inline, "vv*vC*Iz", "nt")
BUILTIN(__builtin_memmove, "v*v*vC*z", "nF")
BUILTIN(__builtin_mempcpy, "v*v*vC*z", "nF")
BUILTIN(__builtin_memset, "v*v*iz", "nF")
BUILTIN(__builtin_printf, "icC*.", "Fp:0:")
BUILTIN(__builtin_stpcpy, "c*c*cC*", "nF")
BUILTIN(__builtin_stpncpy, "c*c*cC*z", "nF")
BUILTIN(__builtin_strcasecmp, "icC*cC*", "nF")
BUILTIN(__builtin_strcat, "c*c*cC*", "nF")
BUILTIN(__builtin_strchr, "c*cC*i", "nF")
BUILTIN(__builtin_strcmp, "icC*cC*", "nF")
BUILTIN(__builtin_strcpy, "c*c*cC*", "nF")
BUILTIN(__builtin_strcspn, "zcC*cC*", "nF")
BUILTIN(__builtin_strdup, "c*cC*", "nF")
BUILTIN(__builtin_strlen, "zcC*", "nF")
BUILTIN(__builtin_strncasecmp, "icC*cC*z", "nF")
BUILTIN(__builtin_strncat, "c*c*cC*z", "nF")
BUILTIN(__builtin_strncmp, "icC*cC*z", "nF")
BUILTIN(__builtin_strncpy, "c*c*cC*z", "nF")
BUILTIN(__builtin_strndup, "c*cC*z", "nF")
BUILTIN(__builtin_strpbrk, "c*cC*cC*", "nF")
BUILTIN(__builtin_strrchr, "c*cC*i", "nF")
BUILTIN(__builtin_strspn, "zcC*cC*", "nF")
BUILTIN(__builtin_strstr, "c*cC*cC*", "nF")
BUILTIN(__builtin_wcschr, "w*wC*w", "nF")
BUILTIN(__builtin_wcscmp, "iwC*wC*", "nF")
BUILTIN(__builtin_wcslen, "zwC*", "nF")
BUILTIN(__builtin_wcsncmp, "iwC*wC*z", "nF")
BUILTIN(__builtin_wmemchr, "w*wC*wz", "nF")
BUILTIN(__builtin_wmemcmp, "iwC*wC*z", "nF")
BUILTIN(__builtin_wmemcpy, "w*w*wC*z", "nF")
BUILTIN(__builtin_wmemmove, "w*w*wC*z", "nF")
BUILTIN(__builtin_realloc, "v*v*z", "nF")
BUILTIN(__builtin_return_address, "v*IUi", "n")
BUILTIN(__builtin_extract_return_addr, "v*v*", "n")
BUILTIN(__builtin_frame_address, "v*IUi", "n")
BUILTIN(__builtin___clear_cache, "vc*c*", "n")
BUILTIN(__builtin_setjmp, "iv**", "j")
BUILTIN(__builtin_longjmp, "vv**i", "r")
BUILTIN(__builtin_unwind_init, "v", "")
BUILTIN(__builtin_eh_return_data_regno, "iIi", "nc")
BUILTIN(__builtin_snprintf, "ic*zcC*.", "nFp:2:")
BUILTIN(__builtin_sprintf, "ic*cC*.", "nFP:1:")
BUILTIN(__builtin_vsnprintf, "ic*zcC*a", "nFP:2:")
BUILTIN(__builtin_vsprintf, "ic*cC*a", "nFP:1:")
BUILTIN(__builtin_thread_pointer, "v*", "nc")
BUILTIN(__builtin_launder, "v*v*", "nt")

// GCC exception builtins
BUILTIN(__builtin_eh_return, "vzv*", "r") // FIXME: Takes intptr_t, not size_t!
BUILTIN(__builtin_frob_return_addr, "v*v*", "n")
BUILTIN(__builtin_dwarf_cfa, "v*", "n")
BUILTIN(__builtin_init_dwarf_reg_size_table, "vv*", "n")
BUILTIN(__builtin_dwarf_sp_column, "Ui", "n")
BUILTIN(__builtin_extend_pointer, "ULLiv*", "n") // _Unwind_Word == uint64_t

// GCC Object size checking builtins
BUILTIN(__builtin_object_size, "zvC*i", "nu")
BUILTIN(__builtin_dynamic_object_size, "zvC*i", "nu") // Clang only.
BUILTIN(__builtin___memcpy_chk, "v*v*vC*zz", "nF")
BUILTIN(__builtin___memccpy_chk, "v*v*vC*izz", "nF")
BUILTIN(__builtin___memmove_chk, "v*v*vC*zz", "nF")
BUILTIN(__builtin___mempcpy_chk, "v*v*vC*zz", "nF")
BUILTIN(__builtin___memset_chk, "v*v*izz", "nF")
BUILTIN(__builtin___stpcpy_chk, "c*c*cC*z", "nF")
BUILTIN(__builtin___strcat_chk, "c*c*cC*z", "nF")
BUILTIN(__builtin___strcpy_chk, "c*c*cC*z", "nF")
BUILTIN(__builtin___strlcat_chk, "zc*cC*zz", "nF")
BUILTIN(__builtin___strlcpy_chk, "zc*cC*zz", "nF")
BUILTIN(__builtin___strncat_chk, "c*c*cC*zz", "nF")
BUILTIN(__builtin___strncpy_chk, "c*c*cC*zz", "nF")
BUILTIN(__builtin___stpncpy_chk, "c*c*cC*zz", "nF")
BUILTIN(__builtin___snprintf_chk, "ic*zizcC*.", "Fp:4:")
BUILTIN(__builtin___sprintf_chk, "ic*izcC*.", "Fp:3:")
BUILTIN(__builtin___vsnprintf_chk, "ic*zizcC*a", "FP:4:")
BUILTIN(__builtin___vsprintf_chk, "ic*izcC*a", "FP:3:")
BUILTIN(__builtin___fprintf_chk, "iP*icC*.", "Fp:2:")
BUILTIN(__builtin___printf_chk, "iicC*.", "Fp:1:")
BUILTIN(__builtin___vfprintf_chk, "iP*icC*a", "FP:2:")
BUILTIN(__builtin___vprintf_chk, "iicC*a", "FP:1:")

BUILTIN(__builtin_unpredictable, "LiLi"   , "nc")
BUILTIN(__builtin_expect, "LiLiLi"   , "nc")
BUILTIN(__builtin_expect_with_probability, "LiLiLid", "nc")
BUILTIN(__builtin_prefetch, "vvC*.", "nc")
BUILTIN(__builtin_readcyclecounter, "ULLi", "n")
BUILTIN(__builtin_trap, "v", "nr")
BUILTIN(__builtin_debugtrap, "v", "n")
BUILTIN(__builtin_unreachable, "v", "nr")
BUILTIN(__builtin_shufflevector, "v."   , "nct")
BUILTIN(__builtin_convertvector, "v."   , "nct")
BUILTIN(__builtin_alloca, "v*z"   , "Fn")
BUILTIN(__builtin_alloca_uninitialized, "v*z", "Fn")
BUILTIN(__builtin_alloca_with_align, "v*zIz", "Fn")
BUILTIN(__builtin_alloca_with_align_uninitialized, "v*zIz", "Fn")
BUILTIN(__builtin_call_with_static_chain, "v.", "nt")

BUILTIN(__builtin_elementwise_abs, "v.", "nct")
BUILTIN(__builtin_elementwise_max, "v.", "nct")
BUILTIN(__builtin_elementwise_min, "v.", "nct")
BUILTIN(__builtin_elementwise_ceil, "v.", "nct")
BUILTIN(__builtin_elementwise_floor, "v.", "nct")
BUILTIN(__builtin_elementwise_roundeven, "v.", "nct")
BUILTIN(__builtin_elementwise_trunc, "v.", "nct")
BUILTIN(__builtin_reduce_max, "v.", "nct")
BUILTIN(__builtin_reduce_min, "v.", "nct")
BUILTIN(__builtin_reduce_xor, "v.", "nct")
BUILTIN(__builtin_reduce_or, "v.", "nct")
BUILTIN(__builtin_reduce_and, "v.", "nct")

BUILTIN(__builtin_matrix_transpose, "v.", "nFt")
BUILTIN(__builtin_matrix_column_major_load, "v.", "nFt")
BUILTIN(__builtin_matrix_column_major_store, "v.", "nFt")

// "Overloaded" Atomic operator builtins.  These are overloaded to support data
// types of i8, i16, i32, i64, and i128.  The front-end sees calls to the
// non-suffixed version of these (which has a bogus type) and transforms them to
// the right overloaded version in Sema (plus casts).

// FIXME: These assume that char -> i8, short -> i16, int -> i32,
// long long -> i64.

BUILTIN(__sync_fetch_and_add, "v.", "t")
BUILTIN(__sync_fetch_and_add_1, "ccD*c.", "nt")
BUILTIN(__sync_fetch_and_add_2, "ssD*s.", "nt")
BUILTIN(__sync_fetch_and_add_4, "iiD*i.", "nt")
BUILTIN(__sync_fetch_and_add_8, "LLiLLiD*LLi.", "nt")
BUILTIN(__sync_fetch_and_add_16, "LLLiLLLiD*LLLi.", "nt")

BUILTIN(__sync_fetch_and_sub, "v.", "t")
BUILTIN(__sync_fetch_and_sub_1, "ccD*c.", "nt")
BUILTIN(__sync_fetch_and_sub_2, "ssD*s.", "nt")
BUILTIN(__sync_fetch_and_sub_4, "iiD*i.", "nt")
BUILTIN(__sync_fetch_and_sub_8, "LLiLLiD*LLi.", "nt")
BUILTIN(__sync_fetch_and_sub_16, "LLLiLLLiD*LLLi.", "nt")

BUILTIN(__sync_fetch_and_or, "v.", "t")
BUILTIN(__sync_fetch_and_or_1, "ccD*c.", "nt")
BUILTIN(__sync_fetch_and_or_2, "ssD*s.", "nt")
BUILTIN(__sync_fetch_and_or_4, "iiD*i.", "nt")
BUILTIN(__sync_fetch_and_or_8, "LLiLLiD*LLi.", "nt")
BUILTIN(__sync_fetch_and_or_16, "LLLiLLLiD*LLLi.", "nt")

BUILTIN(__sync_fetch_and_and, "v.", "t")
BUILTIN(__sync_fetch_and_and_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_and_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_and_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_and_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_and_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_fetch_and_xor, "v.", "t")
BUILTIN(__sync_fetch_and_xor_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_xor_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_xor_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_xor_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_xor_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_fetch_and_nand, "v.", "t")
BUILTIN(__sync_fetch_and_nand_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_nand_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_nand_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_nand_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_nand_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_add_and_fetch, "v.", "t")
BUILTIN(__sync_add_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_add_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_add_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_add_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_add_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_sub_and_fetch, "v.", "t")
BUILTIN(__sync_sub_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_sub_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_sub_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_sub_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_sub_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_or_and_fetch, "v.", "t")
BUILTIN(__sync_or_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_or_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_or_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_or_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_or_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_and_and_fetch, "v.", "t")
BUILTIN(__sync_and_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_and_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_and_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_and_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_and_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_xor_and_fetch, "v.", "t")
BUILTIN(__sync_xor_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_xor_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_xor_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_xor_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_xor_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_nand_and_fetch, "v.", "t")
BUILTIN(__sync_nand_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_nand_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_nand_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_nand_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_nand_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_bool_compare_and_swap, "v.", "t")
BUILTIN(__sync_bool_compare_and_swap_1, "bcD*cc.", "tn")
BUILTIN(__sync_bool_compare_and_swap_2, "bsD*ss.", "tn")
BUILTIN(__sync_bool_compare_and_swap_4, "biD*ii.", "tn")
BUILTIN(__sync_bool_compare_and_swap_8, "bLLiD*LLiLLi.", "tn")
BUILTIN(__sync_bool_compare_and_swap_16, "bLLLiD*LLLiLLLi.", "tn")

BUILTIN(__sync_val_compare_and_swap, "v.", "t")
BUILTIN(__sync_val_compare_and_swap_1, "ccD*cc.", "tn")
BUILTIN(__sync_val_compare_and_swap_2, "ssD*ss.", "tn")
BUILTIN(__sync_val_compare_and_swap_4, "iiD*ii.", "tn")
BUILTIN(__sync_val_compare_and_swap_8, "LLiLLiD*LLiLLi.", "tn")
BUILTIN(__sync_val_compare_and_swap_16, "LLLiLLLiD*LLLiLLLi.", "tn")

BUILTIN(__sync_lock_test_and_set, "v.", "t")
BUILTIN(__sync_lock_test_and_set_1, "ccD*c.", "tn")
BUILTIN(__sync_lock_test_and_set_2, "ssD*s.", "tn")
BUILTIN(__sync_lock_test_and_set_4, "iiD*i.", "tn")
BUILTIN(__sync_lock_test_and_set_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_lock_test_and_set_16, "LLLiLLLiD*LLLi.", "tn")

BUILTIN(__sync_lock_release, "v.", "t")
BUILTIN(__sync_lock_release_1, "vcD*.", "tn")
BUILTIN(__sync_lock_release_2, "vsD*.", "tn")
BUILTIN(__sync_lock_release_4, "viD*.", "tn")
BUILTIN(__sync_lock_release_8, "vLLiD*.", "tn")
BUILTIN(__sync_lock_release_16, "vLLLiD*.", "tn")

BUILTIN(__sync_swap, "v.", "t")
BUILTIN(__sync_swap_1, "ccD*c.", "tn")
BUILTIN(__sync_swap_2, "ssD*s.", "tn")
BUILTIN(__sync_swap_4, "iiD*i.", "tn")
BUILTIN(__sync_swap_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_swap_16, "LLLiLLLiD*LLLi.", "tn")

// C11 _Atomic operations for <stdatomic.h>.
ATOMIC_BUILTIN(__c11_atomic_init, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_load, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_store, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_compare_exchange_strong, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_compare_exchange_weak, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_sub, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_nand, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_max, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_min, "v.", "t")
BUILTIN(__c11_atomic_thread_fence, "vi", "n")
BUILTIN(__c11_atomic_signal_fence, "vi", "n")
BUILTIN(__c11_atomic_is_lock_free, "bz", "n")

// GNU atomic builtins.
ATOMIC_BUILTIN(__atomic_load, "v.", "t")
ATOMIC_BUILTIN(__atomic_load_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_store, "v.", "t")
ATOMIC_BUILTIN(__atomic_store_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__atomic_exchange_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_compare_exchange, "v.", "t")
ATOMIC_BUILTIN(__atomic_compare_exchange_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_sub, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_nand, "v.", "t")
ATOMIC_BUILTIN(__atomic_add_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_sub_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_and_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_or_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_xor_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_max_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_min_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_nand_fetch, "v.", "t")
BUILTIN(__atomic_test_and_set, "bvD*i", "n")
BUILTIN(__atomic_clear, "vvD*i", "n")
BUILTIN(__atomic_thread_fence, "vi", "n")
BUILTIN(__atomic_signal_fence, "vi", "n")
BUILTIN(__atomic_always_lock_free, "bzvCD*", "n")
BUILTIN(__atomic_is_lock_free, "bzvCD*", "n")

// GCC does not support these, they are a Clang extension.
ATOMIC_BUILTIN(__atomic_fetch_min, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_max, "v.", "t")

// HIP atomic builtins.
ATOMIC_BUILTIN(__hip_atomic_load, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_store, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_compare_exchange_weak, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_compare_exchange_strong, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_min, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_max, "v.", "t")

#undef ATOMIC_BUILTIN

// Non-overloaded atomic builtins.
BUILTIN(__sync_synchronize, "v", "n")
// GCC does not support these, they are a Clang extension.
BUILTIN(__sync_fetch_and_min, "iiD*i", "n")
BUILTIN(__sync_fetch_and_max, "iiD*i", "n")
BUILTIN(__sync_fetch_and_umin, "UiUiD*Ui", "n")
BUILTIN(__sync_fetch_and_umax, "UiUiD*Ui", "n")

// Random libc builtins.
BUILTIN(__builtin_abort, "v", "Fnr")
BUILTIN(__builtin_index, "c*cC*i", "Fn")
BUILTIN(__builtin_rindex, "c*cC*i", "Fn")

// ignored glibc builtin, see https://sourceware.org/bugzilla/show_bug.cgi?id=25399
BUILTIN(__warn_memset_zero_len, "v", "nU")

// C99 library functions
// C99 stdarg.h
LIBBUILTIN(va_start, "vA.",       "fn",    "stdarg.h")
LIBBUILTIN(va_end, "vA",          "fn",    "stdarg.h")
LIBBUILTIN(va_copy, "vAA",        "fn",    "stdarg.h")
// C99 stdlib.h
LIBBUILTIN(abort, "v",            "fr",    "stdlib.h")
LIBBUILTIN(calloc, "v*zz",        "f",     "stdlib.h")
LIBBUILTIN(exit, "vi",            "fr",    "stdlib.h")
LIBBUILTIN(_Exit, "vi",           "fr",    "stdlib.h")
LIBBUILTIN(malloc, "v*z",         "f",     "stdlib.h")
LIBBUILTIN(realloc, "v*v*z",      "f",     "stdlib.h")
LIBBUILTIN(free,    "vv*",        "f",     "stdlib.h")
LIBBUILTIN(strtod, "dcC*c**",     "f",     "stdlib.h")
LIBBUILTIN(strtof, "fcC*c**",     "f",     "stdlib.h")
LIBBUILTIN(strtold, "LdcC*c**",   "f",     "stdlib.h")
LIBBUILTIN(strtol, "LicC*c**i",   "f",     "stdlib.h")
LIBBUILTIN(strtoll, "LLicC*c**i", "f",     "stdlib.h")
LIBBUILTIN(strtoul, "ULicC*c**i", "f",     "stdlib.h")
LIBBUILTIN(strtoull, "ULLicC*c**i", "f",   "stdlib.h")
// C11 stdlib.h
LIBBUILTIN(aligned_alloc, "v*zz", "f",     "stdlib.h")
// C99 string.h
LIBBUILTIN(memcpy, "v*v*vC*z",    "f",     "string.h")
LIBBUILTIN(memcmp, "ivC*vC*z",    "f",     "string.h")
LIBBUILTIN(memmove, "v*v*vC*z",   "f",     "string.h")
LIBBUILTIN(strcpy, "c*c*cC*",     "f",     "string.h")
LIBBUILTIN(strncpy, "c*c*cC*z",   "f",     "string.h")
LIBBUILTIN(strcmp, "icC*cC*",     "f",     "string.h")
LIBBUILTIN(strncmp, "icC*cC*z",   "f",     "string.h")
LIBBUILTIN(strcat, "c*c*cC*",     "f",     "string.h")
LIBBUILTIN(strncat, "c*c*cC*z",   "f",     "string.h")
LIBBUILTIN(strxfrm, "zc*cC*z",    "f",     "string.h")
LIBBUILTIN(memchr, "v*vC*iz",     "f",     "string.h")
LIBBUILTIN(strchr, "c*cC*i",      "f",     "string.h")
LIBBUILTIN(strcspn, "zcC*cC*",    "f",     "string.h")
LIBBUILTIN(strpbrk, "c*cC*cC*",   "f",     "string.h")
LIBBUILTIN(strrchr, "c*cC*i",     "f",     "string.h")
LIBBUILTIN(strspn, "zcC*cC*",     "f",     "string.h")
LIBBUILTIN(strstr, "c*cC*cC*",    "f",     "string.h")
LIBBUILTIN(strtok, "c*c*cC*",     "f",     "string.h")
LIBBUILTIN(memset, "v*v*iz",      "f",     "string.h")
LIBBUILTIN(strerror, "c*i",       "f",     "string.h")
LIBBUILTIN(strlen, "zcC*",        "f",     "string.h")
// C99 stdio.h
// FIXME: This list is incomplete.
LIBBUILTIN(printf, "icC*.",       "fp:0:", "stdio.h")
LIBBUILTIN(fprintf, "iP*cC*.",    "fp:1:", "stdio.h")
LIBBUILTIN(snprintf, "ic*zcC*.",  "fp:2:", "stdio.h")
LIBBUILTIN(sprintf, "ic*cC*.",    "fp:1:", "stdio.h")
LIBBUILTIN(vprintf, "icC*a",      "fP:0:", "stdio.h")
LIBBUILTIN(vfprintf, "iP*cC*a",   "fP:1:", "stdio.h")
LIBBUILTIN(vsnprintf, "ic*zcC*a", "fP:2:", "stdio.h")
LIBBUILTIN(vsprintf, "ic*cC*a",   "fP:1:", "stdio.h")
LIBBUILTIN(scanf, "icC*R.",       "fs:0:", "stdio.h")
LIBBUILTIN(fscanf, "iP*RcC*R.",   "fs:1:", "stdio.h")
LIBBUILTIN(sscanf, "icC*RcC*R.",  "fs:1:", "stdio.h")
LIBBUILTIN(vscanf, "icC*Ra",      "fS:0:", "stdio.h")
LIBBUILTIN(vfscanf, "iP*RcC*Ra",  "fS:1:", "stdio.h")
LIBBUILTIN(vsscanf, "icC*RcC*Ra", "fS:1:", "stdio.h")
LIBBUILTIN(fopen, "P*cC*cC*",     "f",     "stdio.h")
LIBBUILTIN(fread, "zv*zzP*",      "f",     "stdio.h")
LIBBUILTIN(fwrite, "zvC*zzP*",    "f",     "stdio.h")

// C99 ctype.h
LIBBUILTIN(isalnum, "ii", "fnU", "ctype.h")
LIBBUILTIN(isalpha, "ii", "fnU", "ctype.h")
LIBBUILTIN(isblank, "ii", "fnU", "ctype.h")
LIBBUILTIN(iscntrl, "ii", "fnU", "ctype.h")
LIBBUILTIN(isdigit, "ii", "fnU", "ctype.h")
LIBBUILTIN(isgraph, "ii", "fnU", "ctype.h")
LIBBUILTIN(islower, "ii", "fnU", "ctype.h")
LIBBUILTIN(isprint, "ii", "fnU", "ctype.h")
LIBBUILTIN(ispunct, "ii", "fnU", "ctype.h")
LIBBUILTIN(isspace, "ii", "fnU", "ctype.h")
LIBBUILTIN(isupper, "ii", "fnU", "ctype.h")
LIBBUILTIN(isxdigit, "ii", "fnU", "ctype.h")
LIBBUILTIN(tolower, "ii", "fnU", "ctype.h")
LIBBUILTIN(toupper, "ii", "fnU", "ctype.h")
// C99 wchar.h
// FIXME: This list is incomplete. We should cover at least the functions that
// take format strings.
LIBBUILTIN(wcschr,  "w*wC*w",   "f", "wchar.h")
LIBBUILTIN(wcscmp,  "iwC*wC*",  "f", "wchar.h")
LIBBUILTIN(wcslen,  "zwC*",     "f", "wchar.h")
LIBBUILTIN(wcsncmp, "iwC*wC*z", "f", "wchar.h")
LIBBUILTIN(wmemchr, "w*wC*wz",  "f", "wchar.h")
LIBBUILTIN(wmemcmp, "iwC*wC*z", "f", "wchar.h")
LIBBUILTIN(wmemcpy, "w*w*wC*z", "f", "wchar.h")
LIBBUILTIN(wmemmove,"w*w*wC*z", "f", "wchar.h")

// C99
// In some systems setjmp is a macro that expands to _setjmp. We undefine
// it here to avoid having two identical LIBBUILTIN entries.
#undef setjmp
LIBBUILTIN(setjmp, "iJ",          "fjT",   "setjmp.h")
LIBBUILTIN(longjmp, "vJi",        "frT",   "setjmp.h")

// Non-C library functions, active in GNU mode only.
// Functions with (returns_twice) attribute (marked as "j") are still active in
// all languages, because losing this attribute would result in miscompilation
// when these functions are used in non-GNU mode. PR16138.
LIBBUILTIN(alloca, "v*z",         "f",     "stdlib.h")
// POSIX malloc.h
LIBBUILTIN(memalign, "v*zz",      "f",     "malloc.h")
// POSIX string.h
LIBBUILTIN(memccpy, "v*v*vC*iz",  "f",     "string.h")
LIBBUILTIN(mempcpy, "v*v*vC*z",   "f",     "string.h")
LIBBUILTIN(stpcpy, "c*c*cC*",     "f",     "string.h")
LIBBUILTIN(stpncpy, "c*c*cC*z",   "f",     "string.h")
LIBBUILTIN(strdup, "c*cC*",       "f",     "string.h")
LIBBUILTIN(strndup, "c*cC*z",     "f",     "string.h")
// POSIX strings.h
LIBBUILTIN(index, "c*cC*i",       "f",     "strings.h")
LIBBUILTIN(rindex, "c*cC*i",      "f",     "strings.h")
LIBBUILTIN(bzero, "vv*z",         "f",     "strings.h")
LIBBUILTIN(bcmp, "ivC*vC*z",      "f",     "strings.h")
// In some systems str[n]casejmp is a macro that expands to _str[n]icmp.
// We undefine then here to avoid wrong name.
#undef strcasecmp
#undef strncasecmp
LIBBUILTIN(strcasecmp, "icC*cC*", "f",     "strings.h")
LIBBUILTIN(strncasecmp, "icC*cC*z", "f",   "strings.h")
// POSIX unistd.h
LIBBUILTIN(_exit, "vi",           "fr",    "unistd.h")
LIBBUILTIN(vfork, "p",            "fjT",   "unistd.h")
// POSIX pthread.h
// FIXME: Should specify argument types.
LIBBUILTIN(pthread_create, "",  "fC<2,3>", "pthread.h")

// POSIX setjmp.h

// FIXME: MinGW _setjmp has an additional void* parameter.
LIBBUILTIN(_setjmp, "iJ",         "fjT",   "setjmp.h")
LIBBUILTIN(__sigsetjmp, "iSJi",   "fjT",   "setjmp.h")
LIBBUILTIN(sigsetjmp, "iSJi",     "fjT",   "setjmp.h")
LIBBUILTIN(savectx, "iJ",         "fjT",   "setjmp.h")
LIBBUILTIN(getcontext, "iK*",     "fjT",   "setjmp.h")

LIBBUILTIN(_longjmp, "vJi",       "frT",   "setjmp.h")
LIBBUILTIN(siglongjmp, "vSJi",    "frT",   "setjmp.h")
// non-standard but very common
LIBBUILTIN(strlcpy, "zc*cC*z",    "f",     "string.h")
LIBBUILTIN(strlcat, "zc*cC*z",    "f",     "string.h")

// Builtin math library functions
LIBBUILTIN(atan2, "ddd", "fne", "math.h")
LIBBUILTIN(atan2f, "fff", "fne", "math.h")
LIBBUILTIN(atan2l, "LdLdLd", "fne", "math.h")

LIBBUILTIN(abs, "ii", "fnc", "stdlib.h")
LIBBUILTIN(labs, "LiLi", "fnc", "stdlib.h")
LIBBUILTIN(llabs, "LLiLLi", "fnc", "stdlib.h")

LIBBUILTIN(copysign, "ddd", "fnc", "math.h")
LIBBUILTIN(copysignf, "fff", "fnc", "math.h")
LIBBUILTIN(copysignl, "LdLdLd", "fnc", "math.h")

LIBBUILTIN(fabs, "dd", "fnc", "math.h")
LIBBUILTIN(fabsf, "ff", "fnc", "math.h")
LIBBUILTIN(fabsl, "LdLd", "fnc", "math.h")

// Some systems define finitef as alias of _finitef.
#if defined (finitef)
#undef finitef
#endif
LIBBUILTIN(finite, "id", "fnc", "math.h")
LIBBUILTIN(finitef, "if", "fnc", "math.h")
LIBBUILTIN(finitel, "iLd", "fnc", "math.h")
// glibc's math.h generates calls to __finite
LIBBUILTIN(__finite, "id", "fnc", "math.h")
LIBBUILTIN(__finitef, "if", "fnc", "math.h")
LIBBUILTIN(__finitel, "iLd", "fnc", "math.h")

LIBBUILTIN(fmod, "ddd", "fne", "math.h")
LIBBUILTIN(fmodf, "fff", "fne", "math.h")
LIBBUILTIN(fmodl, "LdLdLd", "fne", "math.h")

LIBBUILTIN(frexp, "ddi*", "fn", "math.h")
LIBBUILTIN(frexpf, "ffi*", "fn", "math.h")
LIBBUILTIN(frexpl, "LdLdi*", "fn", "math.h")

LIBBUILTIN(ldexp, "ddi", "fne", "math.h")
LIBBUILTIN(ldexpf, "ffi", "fne", "math.h")
LIBBUILTIN(ldexpl, "LdLdi", "fne", "math.h")

LIBBUILTIN(modf, "ddd*", "fn", "math.h")
LIBBUILTIN(modff, "fff*", "fn", "math.h")
LIBBUILTIN(modfl, "LdLdLd*", "fn", "math.h")

LIBBUILTIN(nan,  "dcC*", "fUn", "math.h")
LIBBUILTIN(nanf, "fcC*", "fUn", "math.h")
LIBBUILTIN(nanl, "LdcC*", "fUn", "math.h")

LIBBUILTIN(pow, "ddd", "fne", "math.h")
LIBBUILTIN(powf, "fff", "fne", "math.h")
LIBBUILTIN(powl, "LdLdLd", "fne", "math.h")

LIBBUILTIN(acos, "dd", "fne", "math.h")
LIBBUILTIN(acosf, "ff", "fne", "math.h")
LIBBUILTIN(acosl, "LdLd", "fne", "math.h")

LIBBUILTIN(acosh, "dd", "fne", "math.h")
LIBBUILTIN(acoshf, "ff", "fne", "math.h")
LIBBUILTIN(acoshl, "LdLd", "fne", "math.h")

LIBBUILTIN(asin, "dd", "fne", "math.h")
LIBBUILTIN(asinf, "ff", "fne", "math.h")
LIBBUILTIN(asinl, "LdLd", "fne", "math.h")

LIBBUILTIN(asinh, "dd", "fne", "math.h")
LIBBUILTIN(asinhf, "ff", "fne", "math.h")
LIBBUILTIN(asinhl, "LdLd", "fne", "math.h")

LIBBUILTIN(atan, "dd", "fne", "math.h")
LIBBUILTIN(atanf, "ff", "fne", "math.h")
LIBBUILTIN(atanl, "LdLd", "fne", "math.h")

LIBBUILTIN(atanh, "dd", "fne", "math.h")
LIBBUILTIN(atanhf, "ff", "fne", "math.h")
LIBBUILTIN(atanhl, "LdLd", "fne", "math.h")

LIBBUILTIN(cbrt, "dd", "fnc", "math.h")
LIBBUILTIN(cbrtf, "ff", "fnc", "math.h")
LIBBUILTIN(cbrtl, "LdLd", "fnc", "math.h")

LIBBUILTIN(ceil, "dd", "fnc", "math.h")
LIBBUILTIN(ceilf, "ff", "fnc", "math.h")
LIBBUILTIN(ceill, "LdLd", "fnc", "math.h")

LIBBUILTIN(cos, "dd", "fne", "math.h")
LIBBUILTIN(cosf, "ff", "fne", "math.h")
LIBBUILTIN(cosl, "LdLd", "fne", "math.h")

LIBBUILTIN(cosh, "dd", "fne", "math.h")
LIBBUILTIN(coshf, "ff", "fne", "math.h")
LIBBUILTIN(coshl, "LdLd", "fne", "math.h")

LIBBUILTIN(erf, "dd", "fne", "math.h")
LIBBUILTIN(erff, "ff", "fne", "math.h")
LIBBUILTIN(erfl, "LdLd", "fne", "math.h")

LIBBUILTIN(erfc, "dd", "fne", "math.h")
LIBBUILTIN(erfcf, "ff", "fne", "math.h")
LIBBUILTIN(erfcl, "LdLd", "fne", "math.h")

LIBBUILTIN(exp, "dd", "fne", "math.h")
LIBBUILTIN(expf, "ff", "fne", "math.h")
LIBBUILTIN(expl, "LdLd", "fne", "math.h")

LIBBUILTIN(exp2, "dd", "fne", "math.h")
LIBBUILTIN(exp2f, "ff", "fne", "math.h")
LIBBUILTIN(exp2l, "LdLd", "fne", "math.h")

LIBBUILTIN(expm1, "dd", "fne", "math.h")
LIBBUILTIN(expm1f, "ff", "fne", "math.h")
LIBBUILTIN(expm1l, "LdLd", "fne", "math.h")

LIBBUILTIN(fdim, "ddd", "fne", "math.h")
LIBBUILTIN(fdimf, "fff", "fne", "math.h")
LIBBUILTIN(fdiml, "LdLdLd", "fne", "math.h")

LIBBUILTIN(floor, "dd", "fnc", "math.h")
LIBBUILTIN(floorf, "ff", "fnc", "math.h")
LIBBUILTIN(floorl, "LdLd", "fnc", "math.h")

LIBBUILTIN(fma, "dddd", "fne", "math.h")
LIBBUILTIN(fmaf, "ffff", "fne", "math.h")
LIBBUILTIN(fmal, "LdLdLdLd", "fne", "math.h")

LIBBUILTIN(fmax, "ddd", "fnc", "math.h")
LIBBUILTIN(fmaxf, "fff", "fnc", "math.h")
LIBBUILTIN(fmaxl, "LdLdLd", "fnc", "math.h")

LIBBUILTIN(fmin, "ddd", "fnc", "math.h")
LIBBUILTIN(fminf, "fff", "fnc", "math.h")
LIBBUILTIN(fminl, "LdLdLd", "fnc", "math.h")

LIBBUILTIN(hypot, "ddd", "fne", "math.h")
LIBBUILTIN(hypotf, "fff", "fne", "math.h")
LIBBUILTIN(hypotl, "LdLdLd", "fne", "math.h")

LIBBUILTIN(ilogb, "id", "fne", "math.h")
LIBBUILTIN(ilogbf, "if", "fne", "math.h")
LIBBUILTIN(ilogbl, "iLd", "fne", "math.h")

// POSIX math.h declares a global, signgam, that lgamma writes to, so these
// shouldn't have "e" or "c" attributes
LIBBUILTIN(lgamma, "dd", "fn", "math.h")
LIBBUILTIN(lgammaf, "ff", "fn", "math.h")
LIBBUILTIN(lgammal, "LdLd", "fn", "math.h")

LIBBUILTIN(llrint, "LLid", "fne", "math.h")
LIBBUILTIN(llrintf, "LLif", "fne", "math.h")
LIBBUILTIN(llrintl, "LLiLd", "fne", "math.h")

LIBBUILTIN(llround, "LLid", "fne", "math.h")
LIBBUILTIN(llroundf, "LLif", "fne", "math.h")
LIBBUILTIN(llroundl, "LLiLd", "fne", "math.h")

LIBBUILTIN(log, "dd", "fne", "math.h")
LIBBUILTIN(logf, "ff", "fne", "math.h")
LIBBUILTIN(logl, "LdLd", "fne", "math.h")

LIBBUILTIN(log10, "dd", "fne", "math.h")
LIBBUILTIN(log10f, "ff", "fne", "math.h")
LIBBUILTIN(log10l, "LdLd", "fne", "math.h")

LIBBUILTIN(log1p, "dd", "fne", "math.h")
LIBBUILTIN(log1pf, "ff", "fne", "math.h")
LIBBUILTIN(log1pl, "LdLd", "fne", "math.h")

LIBBUILTIN(log2, "dd", "fne", "math.h")
LIBBUILTIN(log2f, "ff", "fne", "math.h")
LIBBUILTIN(log2l, "LdLd", "fne", "math.h")

LIBBUILTIN(logb, "dd", "fne", "math.h")
LIBBUILTIN(logbf, "ff", "fne", "math.h")
LIBBUILTIN(logbl, "LdLd", "fne", "math.h")

LIBBUILTIN(lrint, "Lid", "fne", "math.h")
LIBBUILTIN(lrintf, "Lif", "fne", "math.h")
LIBBUILTIN(lrintl, "LiLd", "fne", "math.h")

LIBBUILTIN(lround, "Lid", "fne", "math.h")
LIBBUILTIN(lroundf, "Lif", "fne", "math.h")
LIBBUILTIN(lroundl, "LiLd", "fne", "math.h")

LIBBUILTIN(nearbyint, "dd", "fnc", "math.h")
LIBBUILTIN(nearbyintf, "ff", "fnc", "math.h")
LIBBUILTIN(nearbyintl, "LdLd", "fnc", "math.h")

LIBBUILTIN(nextafter, "ddd", "fne", "math.h")
LIBBUILTIN(nextafterf, "fff", "fne", "math.h")
LIBBUILTIN(nextafterl, "LdLdLd", "fne", "math.h")

LIBBUILTIN(nexttoward, "ddLd", "fne", "math.h")
LIBBUILTIN(nexttowardf, "ffLd", "fne", "math.h")
LIBBUILTIN(nexttowardl, "LdLdLd", "fne", "math.h")

LIBBUILTIN(remainder, "ddd", "fne", "math.h")
LIBBUILTIN(remainderf, "fff", "fne", "math.h")
LIBBUILTIN(remainderl, "LdLdLd", "fne", "math.h")

LIBBUILTIN(remquo, "dddi*", "fn", "math.h")
LIBBUILTIN(remquof, "fffi*", "fn", "math.h")
LIBBUILTIN(remquol, "LdLdLdi*", "fn", "math.h")

LIBBUILTIN(rint, "dd", "fnc", "math.h")
LIBBUILTIN(rintf, "ff", "fnc", "math.h")
LIBBUILTIN(rintl, "LdLd", "fnc", "math.h")

LIBBUILTIN(round, "dd", "fnc", "math.h")
LIBBUILTIN(roundf, "ff", "fnc", "math.h")
LIBBUILTIN(roundl, "LdLd", "fnc", "math.h")

LIBBUILTIN(scalbln, "ddLi", "fne", "math.h")
LIBBUILTIN(scalblnf, "ffLi", "fne", "math.h")
LIBBUILTIN(scalblnl, "LdLdLi", "fne", "math.h")

LIBBUILTIN(scalbn, "ddi", "fne", "math.h")
LIBBUILTIN(scalbnf, "ffi", "fne", "math.h")
LIBBUILTIN(scalbnl, "LdLdi", "fne", "math.h")

LIBBUILTIN(sin, "dd", "fne", "math.h")
LIBBUILTIN(sinf, "ff", "fne", "math.h")
LIBBUILTIN(sinl, "LdLd", "fne", "math.h")

LIBBUILTIN(sinh, "dd", "fne", "math.h")
LIBBUILTIN(sinhf, "ff", "fne", "math.h")
LIBBUILTIN(sinhl, "LdLd", "fne", "math.h")

LIBBUILTIN(sqrt, "dd", "fne", "math.h")
LIBBUILTIN(sqrtf, "ff", "fne", "math.h")
LIBBUILTIN(sqrtl, "LdLd", "fne", "math.h")

LIBBUILTIN(tan, "dd", "fne", "math.h")
LIBBUILTIN(tanf, "ff", "fne", "math.h")
LIBBUILTIN(tanl, "LdLd", "fne", "math.h")

LIBBUILTIN(tanh, "dd", "fne", "math.h")
LIBBUILTIN(tanhf, "ff", "fne", "math.h")
LIBBUILTIN(tanhl, "LdLd", "fne", "math.h")

LIBBUILTIN(tgamma, "dd", "fne", "math.h")
LIBBUILTIN(tgammaf, "ff", "fne", "math.h")
LIBBUILTIN(tgammal, "LdLd", "fne", "math.h")

LIBBUILTIN(trunc, "dd", "fnc", "math.h")
LIBBUILTIN(truncf, "ff", "fnc", "math.h")
LIBBUILTIN(truncl, "LdLd", "fnc", "math.h")

LIBBUILTIN(cabs, "dXd", "fne", "complex.h")
LIBBUILTIN(cabsf, "fXf", "fne", "complex.h")
LIBBUILTIN(cabsl, "LdXLd", "fne", "complex.h")

LIBBUILTIN(cacos, "XdXd", "fne", "complex.h")
LIBBUILTIN(cacosf, "XfXf", "fne", "complex.h")
LIBBUILTIN(cacosl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(cacosh, "XdXd", "fne", "complex.h")
LIBBUILTIN(cacoshf, "XfXf", "fne", "complex.h")
LIBBUILTIN(cacoshl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(carg, "dXd", "fne", "complex.h")
LIBBUILTIN(cargf, "fXf", "fne", "complex.h")
LIBBUILTIN(cargl, "LdXLd", "fne", "complex.h")

LIBBUILTIN(casin, "XdXd", "fne", "complex.h")
LIBBUILTIN(casinf, "XfXf", "fne", "complex.h")
LIBBUILTIN(casinl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(casinh, "XdXd", "fne", "complex.h")
LIBBUILTIN(casinhf, "XfXf", "fne", "complex.h")
LIBBUILTIN(casinhl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(catan, "XdXd", "fne", "complex.h")
LIBBUILTIN(catanf, "XfXf", "fne", "complex.h")
LIBBUILTIN(catanl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(catanh, "XdXd", "fne", "complex.h")
LIBBUILTIN(catanhf, "XfXf", "fne", "complex.h")
LIBBUILTIN(catanhl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(ccos, "XdXd", "fne", "complex.h")
LIBBUILTIN(ccosf, "XfXf", "fne", "complex.h")
LIBBUILTIN(ccosl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(ccosh, "XdXd", "fne", "complex.h")
LIBBUILTIN(ccoshf, "XfXf", "fne", "complex.h")
LIBBUILTIN(ccoshl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(cexp, "XdXd", "fne", "complex.h")
LIBBUILTIN(cexpf, "XfXf", "fne", "complex.h")
LIBBUILTIN(cexpl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(cimag, "dXd", "fnc", "complex.h")
LIBBUILTIN(cimagf, "fXf", "fnc", "complex.h")
LIBBUILTIN(cimagl, "LdXLd", "fnc", "complex.h")

LIBBUILTIN(conj, "XdXd", "fnc", "complex.h")
LIBBUILTIN(conjf, "XfXf", "fnc", "complex.h")
LIBBUILTIN(conjl, "XLdXLd", "fnc", "complex.h")

LIBBUILTIN(clog, "XdXd", "fne", "complex.h")
LIBBUILTIN(clogf, "XfXf", "fne", "complex.h")
LIBBUILTIN(clogl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(cproj, "XdXd", "fnc", "complex.h")
LIBBUILTIN(cprojf, "XfXf", "fnc", "complex.h")
LIBBUILTIN(cprojl, "XLdXLd", "fnc", "complex.h")

LIBBUILTIN(cpow, "XdXdXd", "fne", "complex.h")
LIBBUILTIN(cpowf, "XfXfXf", "fne", "complex.h")
LIBBUILTIN(cpowl, "XLdXLdXLd", "fne", "complex.h")

LIBBUILTIN(creal, "dXd", "fnc", "complex.h")
LIBBUILTIN(crealf, "fXf", "fnc", "complex.h")
LIBBUILTIN(creall, "LdXLd", "fnc", "complex.h")

LIBBUILTIN(csin, "XdXd", "fne", "complex.h")
LIBBUILTIN(csinf, "XfXf", "fne", "complex.h")
LIBBUILTIN(csinl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(csinh, "XdXd", "fne", "complex.h")
LIBBUILTIN(csinhf, "XfXf", "fne", "complex.h")
LIBBUILTIN(csinhl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(csqrt, "XdXd", "fne", "complex.h")
LIBBUILTIN(csqrtf, "XfXf", "fne", "complex.h")
LIBBUILTIN(csqrtl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(ctan, "XdXd", "fne", "complex.h")
LIBBUILTIN(ctanf, "XfXf", "fne", "complex.h")
LIBBUILTIN(ctanl, "XLdXLd", "fne", "complex.h")

LIBBUILTIN(ctanh, "XdXd", "fne", "complex.h")
LIBBUILTIN(ctanhf, "XfXf", "fne", "complex.h")
LIBBUILTIN(ctanhl, "XLdXLd", "fne", "complex.h")

// __sinpi and friends are OS X specific library functions, but otherwise much
// like the standard (non-complex) sin (etc).
LIBBUILTIN(__sinpi, "dd", "fne", "math.h")
LIBBUILTIN(__sinpif, "ff", "fne", "math.h")

LIBBUILTIN(__cospi, "dd", "fne", "math.h")
LIBBUILTIN(__cospif, "ff", "fne", "math.h")

LIBBUILTIN(__tanpi, "dd", "fne", "math.h")
LIBBUILTIN(__tanpif, "ff", "fne", "math.h")

// Similarly, __exp10 is OS X only
LIBBUILTIN(__exp10, "dd", "fne", "math.h")
LIBBUILTIN(__exp10f, "ff", "fne", "math.h")

// Blocks runtime Builtin math library functions
LIBBUILTIN(_Block_object_assign, "vv*vC*iC", "f", "Blocks.h")
LIBBUILTIN(_Block_object_dispose, "vvC*iC", "f", "Blocks.h")
// FIXME: Also declare NSConcreteGlobalBlock and NSConcreteStackBlock.

// Annotation function
BUILTIN(__builtin_annotation, "v.", "tn")

// Invariants
BUILTIN(__builtin_assume, "vb", "n")

// Multiprecision Arithmetic Builtins.
BUILTIN(__builtin_addcb, "UcUcCUcCUcCUc*", "n")
BUILTIN(__builtin_addcs, "UsUsCUsCUsCUs*", "n")
BUILTIN(__builtin_addc, "UiUiCUiCUiCUi*", "n")
BUILTIN(__builtin_addcl, "ULiULiCULiCULiCULi*", "n")
BUILTIN(__builtin_addcll, "ULLiULLiCULLiCULLiCULLi*", "n")
BUILTIN(__builtin_subcb, "UcUcCUcCUcCUc*", "n")
BUILTIN(__builtin_subcs, "UsUsCUsCUsCUs*", "n")
BUILTIN(__builtin_subc, "UiUiCUiCUiCUi*", "n")
BUILTIN(__builtin_subcl, "ULiULiCULiCULiCULi*", "n")
BUILTIN(__builtin_subcll, "ULLiULLiCULLiCULLiCULLi*", "n")

// Checked Arithmetic Builtins for Security.
BUILTIN(__builtin_add_overflow, "b.", "nt")
BUILTIN(__builtin_sub_overflow, "b.", "nt")
BUILTIN(__builtin_mul_overflow, "b.", "nt")
BUILTIN(__builtin_uadd_overflow, "bUiCUiCUi*", "n")
BUILTIN(__builtin_uaddl_overflow, "bULiCULiCULi*", "n")
BUILTIN(__builtin_uaddll_overflow, "bULLiCULLiCULLi*", "n")
BUILTIN(__builtin_usub_overflow, "bUiCUiCUi*", "n")
BUILTIN(__builtin_usubl_overflow, "bULiCULiCULi*", "n")
BUILTIN(__builtin_usubll_overflow, "bULLiCULLiCULLi*", "n")
BUILTIN(__builtin_umul_overflow, "bUiCUiCUi*", "n")
BUILTIN(__builtin_umull_overflow, "bULiCULiCULi*", "n")
BUILTIN(__builtin_umulll_overflow, "bULLiCULLiCULLi*", "n")
BUILTIN(__builtin_sadd_overflow, "bSiCSiCSi*", "n")
BUILTIN(__builtin_saddl_overflow, "bSLiCSLiCSLi*", "n")
BUILTIN(__builtin_saddll_overflow, "bSLLiCSLLiCSLLi*", "n")
BUILTIN(__builtin_ssub_overflow, "bSiCSiCSi*", "n")
BUILTIN(__builtin_ssubl_overflow, "bSLiCSLiCSLi*", "n")
BUILTIN(__builtin_ssubll_overflow, "bSLLiCSLLiCSLLi*", "n")
BUILTIN(__builtin_smul_overflow, "bSiCSiCSi*", "n")
BUILTIN(__builtin_smull_overflow, "bSLiCSLiCSLi*", "n")
BUILTIN(__builtin_smulll_overflow, "bSLLiCSLLiCSLLi*", "n")

// Clang builtins (not available in GCC).
BUILTIN(__builtin_addressof, "v*v&", "nct")
BUILTIN(__builtin_function_start, "v*v&", "nct")
BUILTIN(__builtin_operator_new, "v*z", "tc")
BUILTIN(__builtin_operator_delete, "vv*", "tn")
BUILTIN(__builtin_char_memchr, "c*cC*iz", "n")
BUILTIN(__builtin_dump_struct, "ivC*v*", "tn")
BUILTIN(__builtin_preserve_access_index, "v.", "t")

// Alignment builtins (uses custom parsing to support pointers and integers)
BUILTIN(__builtin_is_aligned, "bvC*z", "nct")
BUILTIN(__builtin_align_up, "v*vC*z", "nct")
BUILTIN(__builtin_align_down, "v*vC*z", "nct")

// Safestack builtins
BUILTIN(__builtin___get_unsafe_stack_start, "v*", "Fn")
BUILTIN(__builtin___get_unsafe_stack_bottom, "v*", "Fn")
BUILTIN(__builtin___get_unsafe_stack_top, "v*", "Fn")
BUILTIN(__builtin___get_unsafe_stack_ptr, "v*", "Fn")

// Nontemporal loads/stores builtins
BUILTIN(__builtin_nontemporal_store, "v.", "t")
BUILTIN(__builtin_nontemporal_load, "v.", "t")

// Builtins for os_log/os_trace
BUILTIN(__builtin_os_log_format_buffer_size, "zcC*.", "p:0:nut")
BUILTIN(__builtin_os_log_format, "v*v*cC*.", "p:0:nt")

// Builtins for XRay
BUILTIN(__xray_customevent, "vcC*z", "")
BUILTIN(__xray_typedevent, "vzcC*z", "")

// Win64-compatible va_list functions
BUILTIN(__builtin_ms_va_start, "vc*&.", "nt")
BUILTIN(__builtin_ms_va_end, "vc*&", "n")
BUILTIN(__builtin_ms_va_copy, "vc*&c*&", "n")
