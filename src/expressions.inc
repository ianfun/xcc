// C expressions -- generated by gen.py
enum ExprKind: uint8_t {
    EConstant,
    EBin,
    EUnary,
    EConstantArray,
    EConstantArraySubstript,
    EVoid,
    EVar,
    ECondition,
    ECast,
    ECall,
    ESubscript,
    EArray,
    EStruct,
    EMemberAccess,
    EArrToAddress,
    EPostFix,
    ESizeof,
    EBitCast
};
struct OpaqueExpr {
OpaqueExpr()=delete;
~OpaqueExpr()=delete;
bool isSimple() const {
  switch (k) {
    case EVar:
    case EConstantArray:
    case EConstant:
    case EStruct:
    case EArray:
      return true;
    default: 
      return false;
  }
}
bool hasSideEffects() const;
const location_t *getParenLLoc() const;
const location_t *getParenRLoc() const;
location_t *getParenLLoc();
location_t *getParenRLoc();
location_t getBeginLoc() const ;
location_t getEndLoc() const;
SourceRange getSourceRange() const {return SourceRange(getBeginLoc(), getEndLoc());}
ExprKind k;
CType ty;
union alignas(void*) {
    struct alignas(void*) {
      llvm::Constant* C;
        location_t constantLoc;
        location_t constantEndLoc;
    };
    struct alignas(void*) {
      Expr lhs;
        enum BinOp bop;
        Expr rhs;
    };
    struct alignas(void*) {
      Expr uoperand;
        enum UnaryOp uop;
        location_t opLoc;
    };
    struct alignas(void*) {
      llvm::GlobalVariable *array;
        location_t constantArrayLoc;
        location_t constantArrayLocEnd;
    };
    struct alignas(void*) {
      llvm::GlobalVariable *carray;
        APInt cidx;
        location_t constantArraySubscriptLoc;
        location_t constantArraySubscriptLocEnd;
    };
    struct alignas(void*) {
      Expr voidexpr;
        location_t voidStartLoc;
    };
    struct alignas(void*) {
      unsigned sval;
        IdentRef varName;
        location_t varLoc;
    };
    struct alignas(void*) {
      Expr cond, cleft, cright;
    };
    struct alignas(void*) {
      enum CastOp castop;
        Expr castval;
    };
    struct alignas(void*) {
      Expr callfunc;
        xvector<Expr> callargs;
        location_t callEnd;
    };
    struct alignas(void*) {
      Expr left, right;
    };
    struct alignas(void*) {
      xvector<Expr> arr;
        location_t ArrayStartLoc;
        location_t ArrayEndLoc;
    };
    struct alignas(void*) {
      xvector<Expr> arr2;
        location_t StructStartLoc;
        location_t StructEndLoc;
    };
    struct alignas(void*) {
      Expr obj;
        unsigned idx;
        location_t memberEndLoc;
    };
    struct alignas(void*) {
      Expr arr3;
    };
    struct alignas(void*) {
      enum PostFixOp pop;
        Expr poperand;
        location_t postFixEndLoc;
    };
    struct alignas(void*) {
      CType theType;
        location_t sizeof_loc_begin;
        location_t sizeof_loc_end;
    };
    struct alignas(void*) {
      Expr src;
    };
};
};
struct ConstantExpr {
    enum ExprKind k=EConstant;
    CType ty;
    struct alignas(void*) {
          llvm::Constant* C;
        location_t constantLoc;
        location_t constantEndLoc;
  };
};
struct BinExpr {
    enum ExprKind k=EBin;
    CType ty;
    struct alignas(void*) {
          Expr lhs;
        enum BinOp bop;
        Expr rhs;
  };
};
struct UnaryExpr {
    enum ExprKind k=EUnary;
    CType ty;
    struct alignas(void*) {
          Expr uoperand;
        enum UnaryOp uop;
        location_t opLoc;
  };
};
struct ConstantArrayExpr {
    enum ExprKind k=EConstantArray;
    CType ty;
    struct alignas(void*) {
          llvm::GlobalVariable *array;
        location_t constantArrayLoc;
        location_t constantArrayLocEnd;
  };
};
struct ConstantArraySubstriptExpr {
    enum ExprKind k=EConstantArraySubstript;
    CType ty;
    struct alignas(void*) {
          llvm::GlobalVariable *carray;
        APInt cidx;
        location_t constantArraySubscriptLoc;
        location_t constantArraySubscriptLocEnd;
  };
};
struct VoidExpr {
    enum ExprKind k=EVoid;
    CType ty;
    struct alignas(void*) {
          Expr voidexpr;
        location_t voidStartLoc;
  };
};
struct VarExpr {
    enum ExprKind k=EVar;
    CType ty;
    struct alignas(void*) {
          unsigned sval;
        IdentRef varName;
        location_t varLoc;
  };
};
struct ConditionExpr {
    enum ExprKind k=ECondition;
    CType ty;
    struct alignas(void*) {
          Expr cond, cleft, cright;
  };
};
struct CastExpr {
    enum ExprKind k=ECast;
    CType ty;
    struct alignas(void*) {
          enum CastOp castop;
        Expr castval;
  };
};
struct CallExpr {
    enum ExprKind k=ECall;
    CType ty;
    struct alignas(void*) {
          Expr callfunc;
        xvector<Expr> callargs;
        location_t callEnd;
  };
};
struct SubscriptExpr {
    enum ExprKind k=ESubscript;
    CType ty;
    struct alignas(void*) {
          Expr left, right;
  };
};
struct ArrayExpr {
    enum ExprKind k=EArray;
    CType ty;
    struct alignas(void*) {
          xvector<Expr> arr;
        location_t ArrayStartLoc;
        location_t ArrayEndLoc;
  };
};
struct StructExpr {
    enum ExprKind k=EStruct;
    CType ty;
    struct alignas(void*) {
          xvector<Expr> arr2;
        location_t StructStartLoc;
        location_t StructEndLoc;
  };
};
struct MemberAccessExpr {
    enum ExprKind k=EMemberAccess;
    CType ty;
    struct alignas(void*) {
          Expr obj;
        unsigned idx;
        location_t memberEndLoc;
  };
};
struct ArrToAddressExpr {
    enum ExprKind k=EArrToAddress;
    CType ty;
    struct alignas(void*) {
          Expr arr3;
  };
};
struct PostFixExpr {
    enum ExprKind k=EPostFix;
    CType ty;
    struct alignas(void*) {
          enum PostFixOp pop;
        Expr poperand;
        location_t postFixEndLoc;
  };
};
struct SizeofExpr {
    enum ExprKind k=ESizeof;
    CType ty;
    struct alignas(void*) {
          CType theType;
        location_t sizeof_loc_begin;
        location_t sizeof_loc_end;
  };
};
struct BitCastExpr {
    enum ExprKind k=EBitCast;
    CType ty;
    struct alignas(void*) {
          Expr src;
  };
};
static uint8_t expr_size_map[] = {
    sizeof(ConstantExpr),
    sizeof(BinExpr),
    sizeof(UnaryExpr),
    sizeof(ConstantArrayExpr),
    sizeof(ConstantArraySubstriptExpr),
    sizeof(VoidExpr),
    sizeof(VarExpr),
    sizeof(ConditionExpr),
    sizeof(CastExpr),
    sizeof(CallExpr),
    sizeof(SubscriptExpr),
    sizeof(ArrayExpr),
    sizeof(StructExpr),
    sizeof(MemberAccessExpr),
    sizeof(ArrToAddressExpr),
    sizeof(PostFixExpr),
    sizeof(SizeofExpr),
    sizeof(BitCastExpr)
};
static constexpr size_t expr_max_size = std::max({sizeof(ConstantExpr), sizeof(BinExpr), sizeof(UnaryExpr), sizeof(ConstantArrayExpr), sizeof(ConstantArraySubstriptExpr), sizeof(VoidExpr), sizeof(VarExpr), sizeof(ConditionExpr), sizeof(CastExpr), sizeof(CallExpr), sizeof(SubscriptExpr), sizeof(ArrayExpr), sizeof(StructExpr), sizeof(MemberAccessExpr), sizeof(ArrToAddressExpr), sizeof(PostFixExpr), sizeof(SizeofExpr), sizeof(BitCastExpr)});
