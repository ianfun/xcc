// C expressions -- generated by gen.py
enum ExprKind: uint8_t {
  EConstant,
  EBin,
  EUnary,
  EConstantArray,
  EVoid,
  EVar,
  ECondition,
  ECast,
  ECall,
  ESubscript,
  EArray,
  EStruct,
  EMemberAccess,
  EArrToAddress,
  EPostFix
};
struct OpaqueExpr {
OpaqueExpr()=delete;
~OpaqueExpr()=delete;
bool isSimple() const {
  switch (k) {
    case EVar:
    case EConstantArray:
    case EConstant:
    case EStruct:
    case EArray:
      return true;
    default: 
      return false;
  }
}
ExprKind k;
Location loc;
CType ty;

union {
    struct {
      llvm::Constant* C;
    };
    struct {
      Expr lhs;
      enum BinOp bop;
      Expr rhs;
    };
    struct {
      Expr uoperand;
      enum UnaryOp uop;
    };
    struct {
      llvm::GlobalVariable *array;
    };
    struct {
      Expr voidexpr;
    };
    struct {
      size_t sval;
    };
    struct {
      Expr cond, cleft, cright;
    };
    struct {
      enum CastOp castop;
      Expr castval;
    };
    struct {
      Expr callfunc;
      xvector<Expr> callargs;
    };
    struct {
      Expr left, right;
    };
    struct {
      xvector<Expr> arr;
    };
    struct {
      xvector<Expr> arr2;
    };
    struct {
      Expr obj;
      uint32_t idx;
    };
    struct {
      Expr arr3;
    };
    struct {
      enum PostFixOp pop;
      Expr poperand;
    };
};
};
struct ConstantExpr {
  enum ExprKind k=EConstant;
  Location loc;
  CType ty;
  struct {
    llvm::Constant* C;
  };
};
struct BinExpr {
  enum ExprKind k=EBin;
  Location loc;
  CType ty;
  struct {
    Expr lhs;
    enum BinOp bop;
    Expr rhs;
  };
};
struct UnaryExpr {
  enum ExprKind k=EUnary;
  Location loc;
  CType ty;
  struct {
    Expr uoperand;
    enum UnaryOp uop;
  };
};
struct ConstantArrayExpr {
  enum ExprKind k=EConstantArray;
  Location loc;
  CType ty;
  struct {
    llvm::GlobalVariable *array;
  };
};
struct VoidExpr {
  enum ExprKind k=EVoid;
  Location loc;
  CType ty;
  struct {
    Expr voidexpr;
  };
};
struct VarExpr {
  enum ExprKind k=EVar;
  Location loc;
  CType ty;
  struct {
    size_t sval;
  };
};
struct ConditionExpr {
  enum ExprKind k=ECondition;
  Location loc;
  CType ty;
  struct {
    Expr cond, cleft, cright;
  };
};
struct CastExpr {
  enum ExprKind k=ECast;
  Location loc;
  CType ty;
  struct {
    enum CastOp castop;
    Expr castval;
  };
};
struct CallExpr {
  enum ExprKind k=ECall;
  Location loc;
  CType ty;
  struct {
    Expr callfunc;
    xvector<Expr> callargs;
  };
};
struct SubscriptExpr {
  enum ExprKind k=ESubscript;
  Location loc;
  CType ty;
  struct {
    Expr left, right;
  };
};
struct ArrayExpr {
  enum ExprKind k=EArray;
  Location loc;
  CType ty;
  struct {
    xvector<Expr> arr;
  };
};
struct StructExpr {
  enum ExprKind k=EStruct;
  Location loc;
  CType ty;
  struct {
    xvector<Expr> arr2;
  };
};
struct MemberAccessExpr {
  enum ExprKind k=EMemberAccess;
  Location loc;
  CType ty;
  struct {
    Expr obj;
    uint32_t idx;
  };
};
struct ArrToAddressExpr {
  enum ExprKind k=EArrToAddress;
  Location loc;
  CType ty;
  struct {
    Expr arr3;
  };
};
struct PostFixExpr {
  enum ExprKind k=EPostFix;
  Location loc;
  CType ty;
  struct {
    enum PostFixOp pop;
    Expr poperand;
  };
};
static uint8_t expr_size_map[] = {
    sizeof(ConstantExpr),
    sizeof(BinExpr),
    sizeof(UnaryExpr),
    sizeof(ConstantArrayExpr),
    sizeof(VoidExpr),
    sizeof(VarExpr),
    sizeof(ConditionExpr),
    sizeof(CastExpr),
    sizeof(CallExpr),
    sizeof(SubscriptExpr),
    sizeof(ArrayExpr),
    sizeof(StructExpr),
    sizeof(MemberAccessExpr),
    sizeof(ArrToAddressExpr),
    sizeof(PostFixExpr)
};
static constexpr size_t expr_max_size = std::max({sizeof(ConstantExpr), sizeof(BinExpr), sizeof(UnaryExpr), sizeof(ConstantArrayExpr), sizeof(VoidExpr), sizeof(VarExpr), sizeof(ConditionExpr), sizeof(CastExpr), sizeof(CallExpr), sizeof(SubscriptExpr), sizeof(ArrayExpr), sizeof(StructExpr), sizeof(MemberAccessExpr), sizeof(ArrToAddressExpr), sizeof(PostFixExpr)});
