// C expressions -- generated by gen.py
enum ExprKind: uint8_t {
  EBin,
  EUnary,
  EIntLit,
  EFloatLit,
  EVoid,
  EVar,
  ECondition,
  ECast,
  ECall,
  ESubscript,
  EDefault,
  EArray,
  EStruct,
  EString,
  EUndef,
  EMemberAccess,
  EArrToAddress,
  EPostFix
};
struct OpaqueExpr {
  OpaqueExpr()=delete;
  ~OpaqueExpr()=delete;
  ExprKind k;
  Location loc;
  CType ty;

  union {
    struct {
      Expr lhs;
      enum BinOp bop;
      Expr rhs;
    };
    struct {
      Expr uoperand;
      enum UnaryOp uop;
    };
    struct {
      uintmax_t ival;
    };
    struct {
      double fval;
    };
    struct {
      Expr voidexpr;
    };
    struct {
      IdentRef sval;
    };
    struct {
      Expr cond, cleft, cright;
    };
    struct {
      enum CastOp castop;
      Expr castval;
    };
    struct {
      Expr callfunc;
      xvector<Expr> callargs;
    };
    struct {
      Expr left, right;
    };
    struct {
      xvector<Expr> arr;
    };
    struct {
      xvector<Expr> arr2;
    };
    struct {
      xstring str;
      bool is_constant;
    };
    struct {
      Expr obj;
      uint32_t idx;
    };
    struct {
      Expr arr3;
    };
    struct {
      enum PostFixOp pop;
      Expr poperand;
    };
};
};
struct BinExpr {
  enum ExprKind k=EBin;
  Location loc;
  CType ty;
struct {
      Expr lhs;
    enum BinOp bop;
    Expr rhs;

  };};
struct UnaryExpr {
  enum ExprKind k=EUnary;
  Location loc;
  CType ty;
struct {
      Expr uoperand;
    enum UnaryOp uop;

  };};
struct IntLitExpr {
  enum ExprKind k=EIntLit;
  Location loc;
  CType ty;
struct {
      uintmax_t ival;

  };};
struct FloatLitExpr {
  enum ExprKind k=EFloatLit;
  Location loc;
  CType ty;
struct {
      double fval;

  };};
struct VoidExpr {
  enum ExprKind k=EVoid;
  Location loc;
  CType ty;
struct {
      Expr voidexpr;

  };};
struct VarExpr {
  enum ExprKind k=EVar;
  Location loc;
  CType ty;
struct {
      IdentRef sval;

  };};
struct ConditionExpr {
  enum ExprKind k=ECondition;
  Location loc;
  CType ty;
struct {
      Expr cond, cleft, cright;

  };};
struct CastExpr {
  enum ExprKind k=ECast;
  Location loc;
  CType ty;
struct {
      enum CastOp castop;
    Expr castval;

  };};
struct CallExpr {
  enum ExprKind k=ECall;
  Location loc;
  CType ty;
struct {
      Expr callfunc;
    xvector<Expr> callargs;

  };};
struct SubscriptExpr {
  enum ExprKind k=ESubscript;
  Location loc;
  CType ty;
struct {
      Expr left, right;

  };};
struct DefaultExpr {
  enum ExprKind k=EDefault;
  Location loc;
  CType ty;
 /* empty! */ 
};struct ArrayExpr {
  enum ExprKind k=EArray;
  Location loc;
  CType ty;
struct {
      xvector<Expr> arr;

  };};
struct StructExpr {
  enum ExprKind k=EStruct;
  Location loc;
  CType ty;
struct {
      xvector<Expr> arr2;

  };};
struct StringExpr {
  enum ExprKind k=EString;
  Location loc;
  CType ty;
struct {
      xstring str;
    bool is_constant;

  };};
struct UndefExpr {
  enum ExprKind k=EUndef;
  Location loc;
  CType ty;
 /* empty! */ 
};struct MemberAccessExpr {
  enum ExprKind k=EMemberAccess;
  Location loc;
  CType ty;
struct {
      Expr obj;
    uint32_t idx;

  };};
struct ArrToAddressExpr {
  enum ExprKind k=EArrToAddress;
  Location loc;
  CType ty;
struct {
      Expr arr3;

  };};
struct PostFixExpr {
  enum ExprKind k=EPostFix;
  Location loc;
  CType ty;
struct {
      enum PostFixOp pop;
    Expr poperand;

  };};
static uint8_t expr_size_map[] = {
    sizeof(BinExpr),
    sizeof(UnaryExpr),
    sizeof(IntLitExpr),
    sizeof(FloatLitExpr),
    sizeof(VoidExpr),
    sizeof(VarExpr),
    sizeof(ConditionExpr),
    sizeof(CastExpr),
    sizeof(CallExpr),
    sizeof(SubscriptExpr),
    sizeof(DefaultExpr),
    sizeof(ArrayExpr),
    sizeof(StructExpr),
    sizeof(StringExpr),
    sizeof(UndefExpr),
    sizeof(MemberAccessExpr),
    sizeof(ArrToAddressExpr),
    sizeof(PostFixExpr)
};
static constexpr size_t expr_max_size = std::max({sizeof(BinExpr), sizeof(UnaryExpr), sizeof(IntLitExpr), sizeof(FloatLitExpr), sizeof(VoidExpr), sizeof(VarExpr), sizeof(ConditionExpr), sizeof(CastExpr), sizeof(CallExpr), sizeof(SubscriptExpr), sizeof(DefaultExpr), sizeof(ArrayExpr), sizeof(StructExpr), sizeof(StringExpr), sizeof(UndefExpr), sizeof(MemberAccessExpr), sizeof(ArrToAddressExpr), sizeof(PostFixExpr)});
